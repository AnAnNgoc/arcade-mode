{
  "name": "ArcadeMode Interview Questions",
  "order": "",
  "time": "",
  "helpRoom": "",
  "challenges": [
    {
      "title": "Problem 1: Multiples of 3 and 5",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "1",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>",
        "<p class=\"euler__paragraph\">Find the sum of all the multiples of 3 or 5 below 1000.</p></div>"
      ],
      "challengeSeed": [
        "function euler1() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler1();"
      ],
      "solutions": [
        "function euler1() {\n  let sum = 0;\n  for (let i = 1; i < 1000; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"
      ],
      "tail": "// not used",
      "tests": [
        "assert(typeof euler1 === 'function', 'message: <code>euler1()</code> is a function.');",
        "assert.strictEqual(euler1(), 233168, 'message: <code>euler1()</code> should return 233168.');"
      ],
      "id": "5900f36e1000cf542c50fe80"
    },
    {
      "title": "Problem 2: Even Fibonacci numbers",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "2",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>",
        "<p class=\"euler__paragraph\">1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...</p>",
        "<p class=\"euler__paragraph\">By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p></div>"
      ],
      "challengeSeed": [
        "function euler2() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler2();"
      ],
      "solutions": [
        "function euler2() {\n  let fib1 = 1;\n  let fib2 = 1;\n  let result = 0;\n  let sum = 0;\n\n  while (result < 4000000) {\n    if (result % 2 === 0) {\n      sum += result;\n    }\n\n    result = fib1 + fib2;\n    fib1 = fib2;\n    fib2 = result;\n  }\n\n  return sum;\n}\n"
      ],
      "tail": "const replaceThis = 3;",
      "tests": [
        "assert(typeof euler2 === 'function', 'message: <code>euler2()</code> is a function.');",
        "assert.strictEqual(euler2(), 4613732, 'message: <code>euler2()</code> should return 4613732.');"
      ],
      "id": "5900f36e1000cf542c50fe81"
    },
    {
      "title": "Problem 3: Largest prime factor",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The prime factors of 13195 are 5, 7, 13 and 29.</p>",
        "<p class=\"euler__paragraph\">What is the largest prime factor of the number 600851475143 ?</p></div>"
      ],
      "challengeSeed": [
        "function euler3() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler3();"
      ],
      "solutions": [
        "function euler3() {\n\tvar number = 600851475143;\n\tvar max = 0;\n\n\tfor (let i = 2; i <= number; i++) {\n\t\twhile (number % i == 0) {\n\t\t\tmax = i;\n\t\t\tnumber /= i;\n\t\t}\n\t}\n\n\treturn max;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler3 === 'function', 'message: <code>euler3()</code> is a function.');",
        "assert.strictEqual(euler3(), 6857, 'message: <code>euler3()</code> should return 6857.');"
      ],
      "id": "5900f36f1000cf542c50fe82"
    },
    {
      "title": "Problem 4: Largest palindrome product",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "1",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.</p>",
        "<p class=\"euler__paragraph\">Find the largest palindrome made from the product of two 3-digit numbers.</p></div>"
      ],
      "challengeSeed": [
        "function euler4() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler4();"
      ],
      "solutions": [
        "function euler4() {\n  function isPalindrome(num) {\n    const numStr = num.toString();\n    for (let i = 0; i < numStr.length / 2; i++) {\n      if (numStr[i] !== numStr[numStr.length - 1 - i]) return false;\n    }\n    return true;\n  }\n\n  let largestPalindrome = 0;\n  for (let num1 = 999; num1 > 0; num1--) {\n    let num2 = num1 - 1;\n    while (num1 * num2 > largestPalindrome) {\n      if (isPalindrome(num1 * num2)) {\n        largestPalindrome = num1 * num2;\n      }\n      num2--;\n    }\n  }\n  return largestPalindrome;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler4 === 'function', 'message: <code>euler4()</code> is a function.');",
        "assert.strictEqual(euler4(), 906609, 'message: <code>euler4()</code> should return 906609.');"
      ],
      "id": "5900f3701000cf542c50fe83"
    },
    {
      "title": "Problem 5: Smallest multiple",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "1",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.</p>",
        "<p class=\"euler__paragraph\">What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler5() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler5();"
      ],
      "solutions": [
        "// noprotect\nfunction euler5() {\n  const num = 20;\n  let multiple = num;\n  let smallestMultiple;\n  while (!smallestMultiple) {\n    let provedWrong = false;\n    for (let i = num; i > 1; i--) {\n      if (multiple % i !== 0) {\n        // multiple is not a multiple\n        provedWrong = true;\n        break;\n      }\n    }\n    if (!provedWrong) {\n      smallestMultiple = multiple;\n    }\n    multiple += num;\n  }\n  return smallestMultiple;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler5 === 'function', 'message: <code>euler5()</code> is a function.');",
        "assert.strictEqual(euler5(), 232792560, 'message: <code>euler5()</code> should return 232792560.');"
      ],
      "id": "5900f3711000cf542c50fe84"
    },
    {
      "title": "Problem 6: Sum square difference",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The sum of the squares of the first ten natural numbers is,</p>",
        "<p class=\"euler__paragraph\">12 + 22 + ... + 102 = 385</p>",
        "<p class=\"euler__paragraph\">The square of the sum of the first ten natural numbers is,</p>",
        "<p class=\"euler__paragraph\">(1 + 2 + ... + 10)2 = 552 = 3025</p>",
        "<p class=\"euler__paragraph\">Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.</p>",
        "<p class=\"euler__paragraph\">Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</p></div>"
      ],
      "challengeSeed": [
        "function euler6() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler6();"
      ],
      "solutions": [
        "function euler6() {\n\tconst max = 100\n\tvar sumOfSquares = 0\n\tvar squareOfSums = 0\n\n\tfor(let i = 1; i <= max; i++) {\n\t\tsumOfSquares += (i*i)\n\t}\n\n\tfor (let i = 1; i <= max; i++) {\n\t\tsquareOfSums += (i)\n\t}\n\n\treturn (squareOfSums * squareOfSums) - sumOfSquares\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler6 === 'function', 'message: <code>euler6()</code> is a function.');",
        "assert.strictEqual(euler6(), 25164150, 'message: <code>euler6()</code> should return 25164150.');"
      ],
      "id": "5900f3721000cf542c50fe85"
    },
    {
      "title": "Problem 7: 10001st prime",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "1",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>",
        "<p class=\"euler__paragraph\">What is the 10 001st prime number?</p></div>"
      ],
      "challengeSeed": [
        "function euler7() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler7();"
      ],
      "solutions": [
        "function euler7() {\n\n\tfunction isPrime(num) {\n\t\t\tif (num === 1) {\n\t\t\t\treturn false;\n\t\t\t} else if (num === 2) {\n\t\t\t\treturn true;\n\t\t}\n\t\tlet sqrtOfNum = Math.floor(num ** 0.5);\n\t\tfor (let i = 2; i <= sqrtOfNum + 1; i++) {\n\t\t\tif (num % i === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n  let primes = [];\n  let currNum = 1;\n  while (primes.length < 10001) { // noprotect\n    if (isPrime(currNum)) {\n      primes.push(currNum);\n    }\n    currNum += 1;\n  }\n  return primes[primes.length - 1];\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler7 === 'function', 'message: <code>euler7()</code> is a function.');",
        "assert.strictEqual(euler7(), 104743, 'message: <code>euler7()</code> should return 104743.');"
      ],
      "id": "5900f3731000cf542c50fe86"
    },
    {
      "title": "Problem 8: Largest product in a series",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.</p>",
        "<p class=\"euler__paragraph\"></p>",
        "<p class=\"euler__paragraph\">73167176531330624919225119674426574742355349194934</p>",
        "<p class=\"euler__paragraph\">96983520312774506326239578318016984801869478851843</p>",
        "<p class=\"euler__paragraph\">85861560789112949495459501737958331952853208805511</p>",
        "<p class=\"euler__paragraph\">12540698747158523863050715693290963295227443043557</p>",
        "<p class=\"euler__paragraph\">66896648950445244523161731856403098711121722383113</p>",
        "<p class=\"euler__paragraph\">62229893423380308135336276614282806444486645238749</p>",
        "<p class=\"euler__paragraph\">30358907296290491560440772390713810515859307960866</p>",
        "<p class=\"euler__paragraph\">70172427121883998797908792274921901699720888093776</p>",
        "<p class=\"euler__paragraph\">65727333001053367881220235421809751254540594752243</p>",
        "<p class=\"euler__paragraph\">52584907711670556013604839586446706324415722155397</p>",
        "<p class=\"euler__paragraph\">53697817977846174064955149290862569321978468622482</p>",
        "<p class=\"euler__paragraph\">83972241375657056057490261407972968652414535100474</p>",
        "<p class=\"euler__paragraph\">82166370484403199890008895243450658541227588666881</p>",
        "<p class=\"euler__paragraph\">16427171479924442928230863465674813919123162824586</p>",
        "<p class=\"euler__paragraph\">17866458359124566529476545682848912883142607690042</p>",
        "<p class=\"euler__paragraph\">24219022671055626321111109370544217506941658960408</p>",
        "<p class=\"euler__paragraph\">07198403850962455444362981230987879927244284909188</p>",
        "<p class=\"euler__paragraph\">84580156166097919133875499200524063689912560717606</p>",
        "<p class=\"euler__paragraph\">05886116467109405077541002256983155200055935729725</p>",
        "<p class=\"euler__paragraph\">71636269561882670428252483600823257530420752963450</p>",
        "<p class=\"euler__paragraph\">Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?</p></div>"
      ],
      "challengeSeed": [
        "function euler8() {",
        "  const largeNumber =",
        "      '73167176531330624919225119674426574742355349194934' +",
        "      '96983520312774506326239578318016984801869478851843' +",
        "      '85861560789112949495459501737958331952853208805511' +",
        "      '12540698747158523863050715693290963295227443043557' +",
        "      '66896648950445244523161731856403098711121722383113' +",
        "      '62229893423380308135336276614282806444486645238749' +",
        "      '30358907296290491560440772390713810515859307960866' +",
        "      '70172427121883998797908792274921901699720888093776' +",
        "      '65727333001053367881220235421809751254540594752243' +",
        "      '52584907711670556013604839586446706324415722155397' +",
        "      '53697817977846174064955149290862569321978468622482' +",
        "      '83972241375657056057490261407972968652414535100474' +",
        "      '82166370484403199890008895243450658541227588666881' +",
        "      '16427171479924442928230863465674813919123162824586' +",
        "      '17866458359124566529476545682848912883142607690042' +",
        "      '24219022671055626321111109370544217506941658960408' +",
        "      '07198403850962455444362981230987879927244284909188' +",
        "      '84580156166097919133875499200524063689912560717606' +",
        "      '05886116467109405077541002256983155200055935729725' +",
        "      '71636269561882670428252483600823257530420752963450';",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler8();"
      ],
      "solutions": [
        "function euler8() {\n  const largeNumber =\n      '73167176531330624919225119674426574742355349194934' +\n      '96983520312774506326239578318016984801869478851843' +\n      '85861560789112949495459501737958331952853208805511' +\n      '12540698747158523863050715693290963295227443043557' +\n      '66896648950445244523161731856403098711121722383113' +\n      '62229893423380308135336276614282806444486645238749' +\n      '30358907296290491560440772390713810515859307960866' +\n      '70172427121883998797908792274921901699720888093776' +\n      '65727333001053367881220235421809751254540594752243' +\n      '52584907711670556013604839586446706324415722155397' +\n      '53697817977846174064955149290862569321978468622482' +\n      '83972241375657056057490261407972968652414535100474' +\n      '82166370484403199890008895243450658541227588666881' +\n      '16427171479924442928230863465674813919123162824586' +\n      '17866458359124566529476545682848912883142607690042' +\n      '24219022671055626321111109370544217506941658960408' +\n      '07198403850962455444362981230987879927244284909188' +\n      '84580156166097919133875499200524063689912560717606' +\n      '05886116467109405077541002256983155200055935729725' +\n      '71636269561882670428252483600823257530420752963450';\n  const adjacentDigits = 13;\n  let largestProduct = 0;\n  for (let i = 0; i <= largeNumber.length - adjacentDigits; i++) {\n    let product = 1;\n    for (let j = 0; j < adjacentDigits; j++) {\n      product *= parseInt(largeNumber[i + j], 10);\n    }\n    if (product > largestProduct) {\n      largestProduct = product;\n    }\n  }\n  return largestProduct;\n}"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler8 === 'function', 'message: <code>euler8()</code> is a function.');",
        "assert.strictEqual(euler8(), 23514624000, 'message: <code>euler8()</code> should return 23514624000.');"
      ],
      "id": "5900f3741000cf542c50fe87"
    },
    {
      "title": "Problem 9: Special Pythagorean triplet",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,</p>",
        "<p class=\"euler__paragraph\"> a2 + b2 = c2</p>",
        "<p class=\"euler__paragraph\">For example, 32 + 42 = 9 + 16 = 25 = 52.</p>",
        "<p class=\"euler__paragraph\">There exists exactly one Pythagorean triplet for which a + b + c = 1000.Find the product abc.</p></div>"
      ],
      "challengeSeed": [
        "function euler9() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler9();"
      ],
      "solutions": [
        "function euler9() {\n  function isPythTrip(a, b, c) {\n    if ((a ** 2) + (b ** 2) === c ** 2) {\n      return true;\n    }\n    return false;\n  }\n\n  const sum = 1000;\n  for (let a = 1; a < sum; a++) {\n    for (let b = 1; b < a; b++) {\n      const c = sum - a - b;\n      if (isPythTrip(a, b, c)) {\n        return a * b * c;\n      }\n    }\n  }\n  return 0;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler9 === 'function', 'message: <code>euler9()</code> is a function.');",
        "assert.strictEqual(euler9(), 31875000, 'message: <code>euler9()</code> should return 31875000.');"
      ],
      "id": "5900f3761000cf542c50fe88"
    },
    {
      "title": "Problem 10: Summation of primes",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</p>",
        "<p class=\"euler__paragraph\">Find the sum of all the primes below two million.</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler10() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler10();"
      ],
      "solutions": [
        "// noprotect\nfunction euler10() {\n  function isPrime(num) {\n    if (num === 1) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  const limit = 2000000;\n  let sum = 0;\n  for (let i = 1; i < limit; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler10 === 'function', 'message: <code>euler10()</code> is a function.');",
        "assert.strictEqual(euler10(), 142913828922, 'message: <code>euler10()</code> should return 142913828922.');"
      ],
      "id": "5900f3761000cf542c50fe89"
    },
    {
      "title": "Problem 11: Largest product in a grid",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "1",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">In the 20×20 grid below, four numbers along a diagonal line have been marked in red.</p>",
        "<br>",
        "<div class=\"euler__pre-wrap\"><pre class=\"euler__pre\">",
        "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08",
        "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00",
        "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65",
        "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91",
        "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80",
        "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50",
        "32 98 81 28 64 23 67 10 <span class=\"euler__text--bold\" style=\"color:#ff0000;\">26</span> 38 40 67 59 54 70 66 18 38 64 70",
        "67 26 20 68 02 62 12 20 95 <span class=\"euler__text--bold\" style=\"color:#ff0000;\">63</span> 94 39 63 08 40 91 66 49 94 21",
        "24 55 58 05 66 73 99 26 97 17 <span class=\"euler__text--bold\" style=\"color:#ff0000;\">78</span> 78 96 83 14 88 34 89 63 72",
        "21 36 23 09 75 00 76 44 20 45 35 <span class=\"euler__text--bold\" style=\"color:#ff0000;\">14</span> 00 61 33 97 34 31 33 95",
        "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92",
        "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57",
        "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58",
        "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40",
        "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66",
        "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69",
        "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36",
        "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16",
        "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54",
        "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48</pre></div>",
        "<br>",
        "<p class=\"euler__paragraph\">The product of these numbers is 26 × 63 × 78 × 14 = 1788696.</p>",
        "<p class=\"euler__paragraph\">What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?</p></div>"
      ],
      "challengeSeed": [
        "function euler11() {",
        "  const data = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],",
        "              [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],",
        "              [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],",
        "              [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],",
        "              [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],",
        "              [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],",
        "              [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],",
        "              [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],",
        "              [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],",
        "              [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],",
        "              [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],",
        "              [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],",
        "              [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],",
        "              [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],",
        "              [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],",
        "              [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],",
        "              [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],",
        "              [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],",
        "              [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],",
        "              [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]];",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler11();"
      ],
      "solutions": [
        "function euler11() {\n  const data = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],\n              [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],\n              [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],\n              [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],\n              [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],\n              [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],\n              [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],\n              [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],\n              [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],\n              [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],\n              [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],\n              [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],\n              [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],\n              [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],\n              [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],\n              [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],\n              [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],\n              [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],\n              [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],\n              [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]];\n\n  function maxProduct(array, numberOfMultipliers, dirrection) {\n    let max = 0;\n    const endRow = array.length - (dirrection[0] * (numberOfMultipliers - 1));\n    const endCol = array[0].length - (dirrection[1] * (numberOfMultipliers - 1));\n    for (let i = 0; i < endRow; i++) {\n      for (let j = 0; j < endCol; j++) {\n        let product = 1;\n        for (let k = 0; k < numberOfMultipliers; k++) {\n          product *= array[i + (k * dirrection[0])][j + (k * dirrection[1])];\n        }\n        if (product > max) {\n          max = product;\n        }\n      }\n    }\n    return max;\n  }\n\n  const maxArr = [];\n  maxArr.push(maxProduct(data, 4, [1, 1]));\n  maxArr.push(maxProduct(data, 4, [1, -1]));\n  maxArr.push(maxProduct(data, 4, [1, 0]));\n  maxArr.push(maxProduct(data, 4, [0, 1]));\n  let max = 0;\n  maxArr.forEach(element => {\n    max = element > max ? element : max;\n  });\n  return max;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler11 === 'function', 'message: <code>euler11()</code> is a function.');",
        "assert.strictEqual(euler11(), 70600674, 'message: <code>euler11()</code> should return 70600674.');"
      ],
      "id": "5900f3781000cf542c50fe8a"
    },
    {
      "title": "Problem 12: Highly divisible triangular number",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The sequence of <a class=\"euler__link--wiki\" href=\"https://en.wikipedia.org/wiki/Triangular_number\" title=\"Triangular number wiki\">triangle numbers</a> is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:</p>",
        "<br>",
        "<p class=\"euler__paragraph\">1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Let us list the factors of the first seven triangle numbers:</p>",
        "<ul class=\"euler__unordered-list\">",
        "<li class=\"euler__list-item--unordered\">1: 1</li>",
        "<li class=\"euler__list-item--unordered\">3: 1,3</li>",
        "<li class=\"euler__list-item--unordered\">6: 1,2,3,6</li>",
        "<li class=\"euler__list-item--unordered\">10: 1,2,5,10</li>",
        "<li class=\"euler__list-item--unordered\">15: 1,3,5,15</li>",
        "<li class=\"euler__list-item--unordered\">21: 1,3,7,21</li>",
        "<li class=\"euler__list-item--unordered\">28: 1,2,4,7,14,28</li></ul>",
        "<br>",
        "<p class=\"euler__paragraph\">We can see that 28 is the first triangle number to have over five divisors.</p>",
        "<p class=\"euler__paragraph\">What is the value of the first triangle number to have over five hundred divisors?</p></div>"
      ],
      "challengeSeed": [
        "function euler12() {",
        "// noprotect",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler12();"
      ],
      "solutions": [
        "// noprotect\nfunction euler12() {\n  function findFactors(num) {\n    const factors = [];\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let divisor = 1; divisor <= sqrtOfNum; divisor++) {\n      if (num % divisor === 0) {\n        factors.push(divisor);\n        if (divisor !== num / divisor) {\n          factors.push(num / divisor);\n        }\n      }\n    }\n    return factors;\n  }\n\n  const numFactors = 500;\n  let i = 1;\n  let triangularNum = 1;\n  while (findFactors(triangularNum).length < numFactors) {\n    i += 1;\n    triangularNum += i;\n  }\n  return triangularNum;\n}\n"
      ],
      "tail": "const replaceThis = 3;",
      "tests": [
        "assert(typeof euler12 === 'function', 'message: <code>euler12()</code> is a function.');",
        "assert.strictEqual(euler12(), 76576500, 'message: <code>euler12()</code> should return 76576500.');"
      ],
      "id": "5900f3781000cf542c50fe8b"
    },
    {
      "title": "Problem 13: Large sum",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.</p>",
        "<br>",
        "<div class=\"euler__pre-wrap\"><pre class=\"euler__pre\">",
        "37107287533902102798797998220837590246510135740250",
        "46376937677490009712648124896970078050417018260538",
        "74324986199524741059474233309513058123726617309629",
        "91942213363574161572522430563301811072406154908250",
        "23067588207539346171171980310421047513778063246676",
        "89261670696623633820136378418383684178734361726757",
        "28112879812849979408065481931592621691275889832738",
        "44274228917432520321923589422876796487670272189318",
        "47451445736001306439091167216856844588711603153276",
        "70386486105843025439939619828917593665686757934951",
        "62176457141856560629502157223196586755079324193331",
        "64906352462741904929101432445813822663347944758178",
        "92575867718337217661963751590579239728245598838407",
        "58203565325359399008402633568948830189458628227828",
        "80181199384826282014278194139940567587151170094390",
        "35398664372827112653829987240784473053190104293586",
        "86515506006295864861532075273371959191420517255829",
        "71693888707715466499115593487603532921714970056938",
        "54370070576826684624621495650076471787294438377604",
        "53282654108756828443191190634694037855217779295145",
        "36123272525000296071075082563815656710885258350721",
        "45876576172410976447339110607218265236877223636045",
        "17423706905851860660448207621209813287860733969412",
        "81142660418086830619328460811191061556940512689692",
        "51934325451728388641918047049293215058642563049483",
        "62467221648435076201727918039944693004732956340691",
        "15732444386908125794514089057706229429197107928209",
        "55037687525678773091862540744969844508330393682126",
        "18336384825330154686196124348767681297534375946515",
        "80386287592878490201521685554828717201219257766954",
        "78182833757993103614740356856449095527097864797581",
        "16726320100436897842553539920931837441497806860984",
        "48403098129077791799088218795327364475675590848030",
        "87086987551392711854517078544161852424320693150332",
        "59959406895756536782107074926966537676326235447210",
        "69793950679652694742597709739166693763042633987085",
        "41052684708299085211399427365734116182760315001271",
        "65378607361501080857009149939512557028198746004375",
        "35829035317434717326932123578154982629742552737307",
        "94953759765105305946966067683156574377167401875275",
        "88902802571733229619176668713819931811048770190271",
        "25267680276078003013678680992525463401061632866526",
        "36270218540497705585629946580636237993140746255962",
        "24074486908231174977792365466257246923322810917141",
        "91430288197103288597806669760892938638285025333403",
        "34413065578016127815921815005561868836468420090470",
        "23053081172816430487623791969842487255036638784583",
        "11487696932154902810424020138335124462181441773470",
        "63783299490636259666498587618221225225512486764533",
        "67720186971698544312419572409913959008952310058822",
        "95548255300263520781532296796249481641953868218774",
        "76085327132285723110424803456124867697064507995236",
        "37774242535411291684276865538926205024910326572967",
        "23701913275725675285653248258265463092207058596522",
        "29798860272258331913126375147341994889534765745501",
        "18495701454879288984856827726077713721403798879715",
        "38298203783031473527721580348144513491373226651381",
        "34829543829199918180278916522431027392251122869539",
        "40957953066405232632538044100059654939159879593635",
        "29746152185502371307642255121183693803580388584903",
        "41698116222072977186158236678424689157993532961922",
        "62467957194401269043877107275048102390895523597457",
        "23189706772547915061505504953922979530901129967519",
        "86188088225875314529584099251203829009407770775672",
        "11306739708304724483816533873502340845647058077308",
        "82959174767140363198008187129011875491310547126581",
        "97623331044818386269515456334926366572897563400500",
        "42846280183517070527831839425882145521227251250327",
        "55121603546981200581762165212827652751691296897789",
        "32238195734329339946437501907836945765883352399886",
        "75506164965184775180738168837861091527357929701337",
        "62177842752192623401942399639168044983993173312731",
        "32924185707147349566916674687634660915035914677504",
        "99518671430235219628894890102423325116913619626622",
        "73267460800591547471830798392868535206946944540724",
        "76841822524674417161514036427982273348055556214818",
        "97142617910342598647204516893989422179826088076852",
        "87783646182799346313767754307809363333018982642090",
        "10848802521674670883215120185883543223812876952786",
        "71329612474782464538636993009049310363619763878039",
        "62184073572399794223406235393808339651327408011116",
        "66627891981488087797941876876144230030984490851411",
        "60661826293682836764744779239180335110989069790714",
        "85786944089552990653640447425576083659976645795096",
        "66024396409905389607120198219976047599490197230297",
        "64913982680032973156037120041377903785566085089252",
        "16730939319872750275468906903707539413042652315011",
        "94809377245048795150954100921645863754710598436791",
        "78639167021187492431995700641917969777599028300699",
        "15368713711936614952811305876380278410754449733078",
        "40789923115535562561142322423255033685442488917353",
        "44889911501440648020369068063960672322193204149535",
        "41503128880339536053299340368006977710650566631954",
        "81234880673210146739058568557934581403627822703280",
        "82616570773948327592232845941706525094512325230608",
        "22918802058777319719839450180888072429661980811197",
        "77158542502016545090413245809786882778948721859617",
        "72107838435069186155435662884062257473692284509516",
        "20849603980134001723930671666823555245252804609722",
        "53503534226472524250874054075591789781264330331690</pre></div>"
      ],
      "challengeSeed": [
        "function euler13() {",
        "  const numArr = ['37107287533902102798797998220837590246510135740250',",
        "    '46376937677490009712648124896970078050417018260538',",
        "    '74324986199524741059474233309513058123726617309629',",
        "    '91942213363574161572522430563301811072406154908250',",
        "    '23067588207539346171171980310421047513778063246676',",
        "    '89261670696623633820136378418383684178734361726757',",
        "    '28112879812849979408065481931592621691275889832738',",
        "    '44274228917432520321923589422876796487670272189318',",
        "    '47451445736001306439091167216856844588711603153276',",
        "    '70386486105843025439939619828917593665686757934951',",
        "    '62176457141856560629502157223196586755079324193331',",
        "    '64906352462741904929101432445813822663347944758178',",
        "    '92575867718337217661963751590579239728245598838407',",
        "    '58203565325359399008402633568948830189458628227828',",
        "    '80181199384826282014278194139940567587151170094390',",
        "    '35398664372827112653829987240784473053190104293586',",
        "    '86515506006295864861532075273371959191420517255829',",
        "    '71693888707715466499115593487603532921714970056938',",
        "    '54370070576826684624621495650076471787294438377604',",
        "    '53282654108756828443191190634694037855217779295145',",
        "    '36123272525000296071075082563815656710885258350721',",
        "    '45876576172410976447339110607218265236877223636045',",
        "    '17423706905851860660448207621209813287860733969412',",
        "    '81142660418086830619328460811191061556940512689692',",
        "    '51934325451728388641918047049293215058642563049483',",
        "    '62467221648435076201727918039944693004732956340691',",
        "    '15732444386908125794514089057706229429197107928209',",
        "    '55037687525678773091862540744969844508330393682126',",
        "    '18336384825330154686196124348767681297534375946515',",
        "    '80386287592878490201521685554828717201219257766954',",
        "    '78182833757993103614740356856449095527097864797581',",
        "    '16726320100436897842553539920931837441497806860984',",
        "    '48403098129077791799088218795327364475675590848030',",
        "    '87086987551392711854517078544161852424320693150332',",
        "    '59959406895756536782107074926966537676326235447210',",
        "    '69793950679652694742597709739166693763042633987085',",
        "    '41052684708299085211399427365734116182760315001271',",
        "    '65378607361501080857009149939512557028198746004375',",
        "    '35829035317434717326932123578154982629742552737307',",
        "    '94953759765105305946966067683156574377167401875275',",
        "    '88902802571733229619176668713819931811048770190271',",
        "    '25267680276078003013678680992525463401061632866526',",
        "    '36270218540497705585629946580636237993140746255962',",
        "    '24074486908231174977792365466257246923322810917141',",
        "    '91430288197103288597806669760892938638285025333403',",
        "    '34413065578016127815921815005561868836468420090470',",
        "    '23053081172816430487623791969842487255036638784583',",
        "    '11487696932154902810424020138335124462181441773470',",
        "    '63783299490636259666498587618221225225512486764533',",
        "    '67720186971698544312419572409913959008952310058822',",
        "    '95548255300263520781532296796249481641953868218774',",
        "    '76085327132285723110424803456124867697064507995236',",
        "    '37774242535411291684276865538926205024910326572967',",
        "    '23701913275725675285653248258265463092207058596522',",
        "    '29798860272258331913126375147341994889534765745501',",
        "    '18495701454879288984856827726077713721403798879715',",
        "    '38298203783031473527721580348144513491373226651381',",
        "    '34829543829199918180278916522431027392251122869539',",
        "    '40957953066405232632538044100059654939159879593635',",
        "    '29746152185502371307642255121183693803580388584903',",
        "    '41698116222072977186158236678424689157993532961922',",
        "    '62467957194401269043877107275048102390895523597457',",
        "    '23189706772547915061505504953922979530901129967519',",
        "    '86188088225875314529584099251203829009407770775672',",
        "    '11306739708304724483816533873502340845647058077308',",
        "    '82959174767140363198008187129011875491310547126581',",
        "    '97623331044818386269515456334926366572897563400500',",
        "    '42846280183517070527831839425882145521227251250327',",
        "    '55121603546981200581762165212827652751691296897789',",
        "    '32238195734329339946437501907836945765883352399886',",
        "    '75506164965184775180738168837861091527357929701337',",
        "    '62177842752192623401942399639168044983993173312731',",
        "    '32924185707147349566916674687634660915035914677504',",
        "    '99518671430235219628894890102423325116913619626622',",
        "    '73267460800591547471830798392868535206946944540724',",
        "    '76841822524674417161514036427982273348055556214818',",
        "    '97142617910342598647204516893989422179826088076852',",
        "    '87783646182799346313767754307809363333018982642090',",
        "    '10848802521674670883215120185883543223812876952786',",
        "    '71329612474782464538636993009049310363619763878039',",
        "    '62184073572399794223406235393808339651327408011116',",
        "    '66627891981488087797941876876144230030984490851411',",
        "    '60661826293682836764744779239180335110989069790714',",
        "    '85786944089552990653640447425576083659976645795096',",
        "    '66024396409905389607120198219976047599490197230297',",
        "    '64913982680032973156037120041377903785566085089252',",
        "    '16730939319872750275468906903707539413042652315011',",
        "    '94809377245048795150954100921645863754710598436791',",
        "    '78639167021187492431995700641917969777599028300699',",
        "    '15368713711936614952811305876380278410754449733078',",
        "    '40789923115535562561142322423255033685442488917353',",
        "    '44889911501440648020369068063960672322193204149535',",
        "    '41503128880339536053299340368006977710650566631954',",
        "    '81234880673210146739058568557934581403627822703280',",
        "    '82616570773948327592232845941706525094512325230608',",
        "    '22918802058777319719839450180888072429661980811197',",
        "    '77158542502016545090413245809786882778948721859617',",
        "    '72107838435069186155435662884062257473692284509516',",
        "    '20849603980134001723930671666823555245252804609722',",
        "    '53503534226472524250874054075591789781264330331690'];",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler13();"
      ],
      "solutions": [
        "function euler13() {\n  const numArr = ['37107287533902102798797998220837590246510135740250',\n    '46376937677490009712648124896970078050417018260538',\n    '74324986199524741059474233309513058123726617309629',\n    '91942213363574161572522430563301811072406154908250',\n    '23067588207539346171171980310421047513778063246676',\n    '89261670696623633820136378418383684178734361726757',\n    '28112879812849979408065481931592621691275889832738',\n    '44274228917432520321923589422876796487670272189318',\n    '47451445736001306439091167216856844588711603153276',\n    '70386486105843025439939619828917593665686757934951',\n    '62176457141856560629502157223196586755079324193331',\n    '64906352462741904929101432445813822663347944758178',\n    '92575867718337217661963751590579239728245598838407',\n    '58203565325359399008402633568948830189458628227828',\n    '80181199384826282014278194139940567587151170094390',\n    '35398664372827112653829987240784473053190104293586',\n    '86515506006295864861532075273371959191420517255829',\n    '71693888707715466499115593487603532921714970056938',\n    '54370070576826684624621495650076471787294438377604',\n    '53282654108756828443191190634694037855217779295145',\n    '36123272525000296071075082563815656710885258350721',\n    '45876576172410976447339110607218265236877223636045',\n    '17423706905851860660448207621209813287860733969412',\n    '81142660418086830619328460811191061556940512689692',\n    '51934325451728388641918047049293215058642563049483',\n    '62467221648435076201727918039944693004732956340691',\n    '15732444386908125794514089057706229429197107928209',\n    '55037687525678773091862540744969844508330393682126',\n    '18336384825330154686196124348767681297534375946515',\n    '80386287592878490201521685554828717201219257766954',\n    '78182833757993103614740356856449095527097864797581',\n    '16726320100436897842553539920931837441497806860984',\n    '48403098129077791799088218795327364475675590848030',\n    '87086987551392711854517078544161852424320693150332',\n    '59959406895756536782107074926966537676326235447210',\n    '69793950679652694742597709739166693763042633987085',\n    '41052684708299085211399427365734116182760315001271',\n    '65378607361501080857009149939512557028198746004375',\n    '35829035317434717326932123578154982629742552737307',\n    '94953759765105305946966067683156574377167401875275',\n    '88902802571733229619176668713819931811048770190271',\n    '25267680276078003013678680992525463401061632866526',\n    '36270218540497705585629946580636237993140746255962',\n    '24074486908231174977792365466257246923322810917141',\n    '91430288197103288597806669760892938638285025333403',\n    '34413065578016127815921815005561868836468420090470',\n    '23053081172816430487623791969842487255036638784583',\n    '11487696932154902810424020138335124462181441773470',\n    '63783299490636259666498587618221225225512486764533',\n    '67720186971698544312419572409913959008952310058822',\n    '95548255300263520781532296796249481641953868218774',\n    '76085327132285723110424803456124867697064507995236',\n    '37774242535411291684276865538926205024910326572967',\n    '23701913275725675285653248258265463092207058596522',\n    '29798860272258331913126375147341994889534765745501',\n    '18495701454879288984856827726077713721403798879715',\n    '38298203783031473527721580348144513491373226651381',\n    '34829543829199918180278916522431027392251122869539',\n    '40957953066405232632538044100059654939159879593635',\n    '29746152185502371307642255121183693803580388584903',\n    '41698116222072977186158236678424689157993532961922',\n    '62467957194401269043877107275048102390895523597457',\n    '23189706772547915061505504953922979530901129967519',\n    '86188088225875314529584099251203829009407770775672',\n    '11306739708304724483816533873502340845647058077308',\n    '82959174767140363198008187129011875491310547126581',\n    '97623331044818386269515456334926366572897563400500',\n    '42846280183517070527831839425882145521227251250327',\n    '55121603546981200581762165212827652751691296897789',\n    '32238195734329339946437501907836945765883352399886',\n    '75506164965184775180738168837861091527357929701337',\n    '62177842752192623401942399639168044983993173312731',\n    '32924185707147349566916674687634660915035914677504',\n    '99518671430235219628894890102423325116913619626622',\n    '73267460800591547471830798392868535206946944540724',\n    '76841822524674417161514036427982273348055556214818',\n    '97142617910342598647204516893989422179826088076852',\n    '87783646182799346313767754307809363333018982642090',\n    '10848802521674670883215120185883543223812876952786',\n    '71329612474782464538636993009049310363619763878039',\n    '62184073572399794223406235393808339651327408011116',\n    '66627891981488087797941876876144230030984490851411',\n    '60661826293682836764744779239180335110989069790714',\n    '85786944089552990653640447425576083659976645795096',\n    '66024396409905389607120198219976047599490197230297',\n    '64913982680032973156037120041377903785566085089252',\n    '16730939319872750275468906903707539413042652315011',\n    '94809377245048795150954100921645863754710598436791',\n    '78639167021187492431995700641917969777599028300699',\n    '15368713711936614952811305876380278410754449733078',\n    '40789923115535562561142322423255033685442488917353',\n    '44889911501440648020369068063960672322193204149535',\n    '41503128880339536053299340368006977710650566631954',\n    '81234880673210146739058568557934581403627822703280',\n    '82616570773948327592232845941706525094512325230608',\n    '22918802058777319719839450180888072429661980811197',\n    '77158542502016545090413245809786882778948721859617',\n    '72107838435069186155435662884062257473692284509516',\n    '20849603980134001723930671666823555245252804609722',\n    '53503534226472524250874054075591789781264330331690'];\n\n  // sum the first 12 digits of the numbers\n  let sum = numArr.reduce((innerSum, element) => {\n    return parseInt(element.substr(0, 12), 10) + innerSum;\n  }, 0);\n  sum = sum.toString();\n\n  // return first 10 digits of sum\n  return parseInt(sum.substr(0, 10), 10);\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler13 === 'function', 'message: <code>euler13()</code> is a function.');",
        "assert.strictEqual(euler13(), 5537376230, 'message: <code>euler13()</code> should return 5537376230.');"
      ],
      "id": "5900f37a1000cf542c50fe8c"
    },
    {
      "title": "Problem 14: Longest Collatz sequence",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The following iterative sequence is defined for the set of positive integers:</p>",
        "<br>",
        "<p class=\"euler__text--indented\"><span class=\"euler__text--italic\">n</span> → <span class=\"euler__text--italic\">n</span>/2 (<span class=\"euler__text--italic\">n</span> is even)</p>",
        "<br>",
        "<p class=\"euler__text--indented\"><span class=\"euler__text--italic\">n</span> → 3<span class=\"euler__text--italic\">n</span> + 1 (<span class=\"euler__text--italic\">n</span> is odd)</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Using the rule above and starting with 13, we generate the following sequence:</p>",
        "<br>",
        "<p class=\"euler__paragraph\">13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1</p>",
        "<br>",
        "<p class=\"euler__paragraph\">It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.</p>",
        "<p class=\"euler__paragraph\">Which starting number, under one million, produces the longest chain?</p>",
        "<p class=\"euler__paragraph\">NOTE: Once the chain starts the terms are allowed to go above one million.</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler14() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler14();"
      ],
      "solutions": [
        "// noprotect\nfunction euler14() {\n  function generateSequence(startNum) {\n    const sequence = [startNum];\n    let currNum = startNum;\n    while (currNum !== 1) {\n      if (currNum % 2 === 0) {\n        currNum /= 2;\n      } else {\n        currNum = (3 * currNum) + 1;\n      }\n      sequence.append(currNum);\n    }\n    return sequence;\n  }\n\n  const limit = 1000000;\n  const sequenceLengthStore = { 1: 1 };\n  let longestSeq = 0;\n  let longestStartNum = 0;\n  for (let i = 2; i < limit; i++) {\n    let currentNumber = i;\n    let count = 1;\n    while (!Object.prototype.hasOwnProperty.call(sequenceLengthStore, i)) {\n      // Colatz operations\n      if (currentNumber % 2 === 0) {\n        currentNumber /= 2;\n      } else {\n        currentNumber = (3 * currentNumber) + 1;\n      }\n\n      // Check if the new current number has already been calculated\n      if (Object.prototype.hasOwnProperty.call(sequenceLengthStore, currentNumber)) {\n        const sequenceLength = sequenceLengthStore[currentNumber] + count;\n        sequenceLengthStore[i] = sequenceLength;\n        if (sequenceLength > longestSeq) {\n          longestSeq = sequenceLength;\n          longestStartNum = i;\n        }\n      }\n      count += 1;\n    }\n  }\n  return longestStartNum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler14 === 'function', 'message: <code>euler14()</code> is a function.');",
        "assert.strictEqual(euler14(), 837799, 'message: <code>euler14()</code> should return 837799.');"
      ],
      "id": "5900f37a1000cf542c50fe8d"
    },
    {
      "title": "Problem 15: Lattice paths",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.</p>",
        "<p class=\"euler__paragraph\"></p>",
        "<p class=\"euler__paragraph\"></p>",
        "<p class=\"euler__paragraph\">How many such routes are there through a 20×20 grid?</p></div>"
      ],
      "challengeSeed": [
        "function euler15() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler15();"
      ],
      "solutions": [
        "function euler15() {\n  const size = [20, 20];\n  // create zero matrix\n  // The number of rows and columns needs to be one more\n  // than the number of squares in each row/column\n  const row = new Array(size[0] + 1).fill(0);\n  const paths = new Array(size[1] + 1).fill(row);\n\n  for (let i = size[0]; i >= 0; i--) {\n    for (let j = size[1]; j >= 0; j--) {\n      if (i === size[0] || j === size[1]) {\n        // cell is on the bottom or right edge of the matrix\n        paths[i][j] = 1;\n      } else {\n        paths[i][j] = paths[i + 1][j] + paths[i][j + 1];\n      }\n    }\n  }\n  return paths[0][0];\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler15 === 'function', 'message: <code>euler15()</code> is a function.');",
        "assert.strictEqual(euler15(), 137846528820, 'message: <code>euler15()</code> should return 137846528820.');"
      ],
      "id": "5900f37b1000cf542c50fe8e"
    },
    {
      "title": "Problem 16: Power digit sum",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">2<sup>15</sup> = 32768 and the sum of its digits is:</p>",
        "<p class=\"euler__paragraph\">3 + 2 + 7 + 6 + 8 = 26.</p>",
        "<p class=\"euler__paragraph\">What is the sum of the digits of the number 2<sup>1000</sup>?</p></div>"
      ],
      "challengeSeed": [
        "function euler16() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler16();"
      ],
      "solutions": [
        "function euler16() {\n  const exponent = 1000;\n  // digitArr will hold the digits of the exponents\n  const digitArr = [1];\n  for (let i = 0; i < exponent; i++) {\n    // Each loop multiplies the digits by 2 and carries\n    // the result to the next index in the array\n\n    // update final digit\n    const len = digitArr.length;\n    const lastNum = digitArr[len - 1];\n    if (lastNum >= 5) {\n      digitArr.push(1);\n      digitArr[len - 1] = (lastNum * 2) - 10;\n    } else {\n      digitArr[len - 1] *= 2;\n    }\n\n    // Update remaining digits\n    for (let j = len - 2; j >= 0; j--) {\n      const digit = digitArr[j];\n      if (digit >= 5) {\n        digitArr[j + 1] += 1;\n        digitArr[j] = (digit * 2) - 10;\n      } else {\n        digitArr[j] *= 2;\n      }\n    }\n  }\n  return digitArr.reduce((sum, digit) => {\n    return sum + digit;\n  });\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler16 === 'function', 'message: <code>euler16()</code> is a function.');",
        "assert.strictEqual(euler16(), 1366, 'message: <code>euler16()</code> should return 1366.');"
      ],
      "id": "5900f37d1000cf542c50fe8f"
    },
    {
      "title": "Problem 17: Number letter counts",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.</p>",
        "<p class=\"euler__paragraph\">If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used? </p>",
        "<p class=\"euler__paragraph\">NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of \"and\" when writing out numbers is in compliance with <a class=\"euler__link--wiki\" href=\"https://english.stackexchange.com/questions/111765/how-to-write-out-numbers-in-compliance-with-british-usage\" title=\"British Usage\">British usage</a>.</p></div>"
      ],
      "challengeSeed": [
        "function euler17() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler17();"
      ],
      "solutions": [
        "function euler17() {\n  const oneToNineteen = [0, 'one', 'two', 'three', 'four', 'five',\n    'six', 'seven', 'eight', 'nine', 'ten',\n    'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen',\n    'sixteen', 'seventeen', 'eighteen', 'nineteen'];\n\n  const tens = [0, 'ten', 'twenty', 'thirty', 'forty', 'fifty',\n    'sixty', 'seventy', 'eighty', 'ninety'];\n\n  function numToWord(num) {\n    if (num > 999) {\n      return 'onethousand';\n    } else if (num > 99) {\n      const hundred = Math.floor(num / 100);\n      const numberWord = `${oneToNineteen[hundred]}hundred`;\n      if (num % (100 * hundred) === 0) {\n        return numberWord;\n      }\n      return `${numberWord}and${numToWord(num % (100 * hundred))}`;\n    } else if (num > 19) {\n      const ten = Math.floor(num / 10);\n      const numberWord = tens[ten];\n      if (num % (10 * ten) === 0) {\n        return numberWord;\n      }\n      return numberWord + numToWord(num % (10 * ten));\n    }\n    return oneToNineteen[num];\n  }\n\n  let sum = 0;\n  for (let i = 1; i <= 1000; i++) {\n    sum += numToWord(i).length;\n  }\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler17 === 'function', 'message: <code>euler17()</code> is a function.');",
        "assert.strictEqual(euler17(), 21124, 'message: <code>euler17()</code> should return 21124.');"
      ],
      "id": "5900f37d1000cf542c50fe90"
    },
    {
      "title": "Problem 18: Maximum path sum I",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</p>",
        "<div class=\"euler__pre-wrap\"><pre class=\"euler__pre\">",
        "   <span class=\"euler__text--bold\" style=\"color:#ff0000;\">3</span>",
        "  <span class=\"euler__text--bold\" style=\"color:#ff0000;\">7</span> 4",
        " 2 <span class=\"euler__text--bold\" style=\"color:#ff0000;\">4</span> 6",
        "8 5 <span class=\"euler__text--bold\" style=\"color:#ff0000;\">9</span> 3",
        "</pre></div>",
        "<p class=\"euler__paragraph\">That is, 3 + 7 + 4 + 9 = 23.</p>",
        "<p class=\"euler__paragraph\">Find the maximum total from top to bottom of the triangle below:</p>",
        "<div class=\"euler__pre-wrap\"><pre class=\"euler__pre\">",
        "                     75",
        "                   95 64",
        "                  17 47 82",
        "                18 35 87 10",
        "               20 04 82 47 65",
        "             19 01 23 75 03 34",
        "            88 02 77 73 07 63 67",
        "          99 65 04 28 06 16 70 92",
        "         41 41 26 56 83 40 80 70 33",
        "       41 48 72 33 47 32 37 16 94 29",
        "      53 71 44 65 25 43 91 52 97 51 14",
        "    70 11 33 28 77 73 17 78 39 68 17 57",
        "   91 71 52 38 17 14 91 43 58 50 27 29 48",
        " 63 66 04 68 89 53 67 30 73 16 69 87 40 31",
        "04 62 98 27 23 09 70 98 73 93 38 53 60 04 23",
        "</pre></div>",
        "<p class=\"euler__paragraph\">NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)</p></div>"
      ],
      "challengeSeed": [
        "function euler18() {",
        "  const triangle = [",
        "    '75',",
        "    '95 64',",
        "    '17 47 82',",
        "    '18 35 87 10',",
        "    '20 04 82 47 65',",
        "    '19 01 23 75 03 34',",
        "    '88 02 77 73 07 63 67',",
        "    '99 65 04 28 06 16 70 92',",
        "    '41 41 26 56 83 40 80 70 33',",
        "    '41 48 72 33 47 32 37 16 94 29',",
        "    '53 71 44 65 25 43 91 52 97 51 14',",
        "    '70 11 33 28 77 73 17 78 39 68 17 57',",
        "    '91 71 52 38 17 14 91 43 58 50 27 29 48',",
        "    '63 66 04 68 89 53 67 30 73 16 69 87 40 31',",
        "    '04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'];",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler18();"
      ],
      "solutions": [
        "function euler18() {\n  const triangle = [\n    '75',\n    '95 64',\n    '17 47 82',\n    '18 35 87 10',\n    '20 04 82 47 65',\n    '19 01 23 75 03 34',\n    '88 02 77 73 07 63 67',\n    '99 65 04 28 06 16 70 92',\n    '41 41 26 56 83 40 80 70 33',\n    '41 48 72 33 47 32 37 16 94 29',\n    '53 71 44 65 25 43 91 52 97 51 14',\n    '70 11 33 28 77 73 17 78 39 68 17 57',\n    '91 71 52 38 17 14 91 43 58 50 27 29 48',\n    '63 66 04 68 89 53 67 30 73 16 69 87 40 31',\n    '04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'];\n\n  function parseData(data) {\n    return data.map(row => {\n      return row.split(' ').map(el => {\n        return parseInt(el, 10);\n      });\n    });\n  }\n\n  function pathSum(arr) {\n    const size = arr.length;\n    if (size === 1) {\n      return arr[0][0];\n    }\n    for (let i = 0; i < size - 1; i++) {\n      const numToAdd = arr[size - 1][i] > arr[size - 1][i + 1] ? arr[size - 1][i] : arr[size - 1][i + 1];\n      arr[size - 2][i] += numToAdd;\n    }\n    arr.splice(size - 1, 1);\n    return pathSum(arr);\n  }\n\n  return pathSum(parseData(triangle));\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler18 === 'function', 'message: <code>euler18()</code> is a function.');",
        "assert.strictEqual(euler18(), 1074, 'message: <code>euler18()</code> should return 1074.');"
      ],
      "id": "5900f37e1000cf542c50fe91"
    },
    {
      "title": "Problem 19: Counting Sundays",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\">",
        "<p class=\"euler__paragraph\">You are given the following information, but you may prefer to do some research for yourself.</p>",
        "<ul class=\"euler__unordered-list\"><li class=\"euler__list-item--unordered\">1 Jan 1900 was a Monday.</li>",
        "<li class=\"euler__list-item--unordered\">Thirty days has September,",
        "April, June and November.",
        "All the rest have thirty-one,",
        "saving February alone,",
        "which has twenty-eight, rain or shine.",
        "And on leap years, twenty-nine.</li>",
        "<li class=\"euler__list-item--unordered\">A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</li></ul>",
        "<br>",
        "<p class=\"euler__paragraph\">How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p></div>"
      ],
      "challengeSeed": [
        "function euler19() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler19();"
      ],
      "solutions": [
        "function euler19() {\n  const startDate = new Date('Jan 01 1901');\n  const endDate = new Date('Dec 31 2000');\n\n  let sundayCount = 0;\n  while (startDate <= endDate) {\n    if (startDate.getDate() === 1 && startDate.getDay() === 0) {\n      // date is the 1st of the month and a Sunday\n      sundayCount += 1;\n    }\n    // add 1 day to start date\n    startDate.setDate(startDate.getDate() + 1);\n  }\n  return sundayCount;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler19 === 'function', 'message: <code>euler19()</code> is a function.');",
        "assert.strictEqual(euler19(), 171, 'message: <code>euler19()</code> should return 171.');"
      ],
      "id": "5900f37f1000cf542c50fe92"
    },
    {
      "title": "Problem 20: Factorial digit sum",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\">",
        "<p class=\"euler__paragraph\"><span class=\"euler__text--italic\">n</span>! means <span class=\"euler__text--italic\">n</span> × (<span class=\"euler__text--italic\">n</span> − 1) × ... × 3 × 2 × 1</p>",
        "<br>",
        "<p class=\"euler__paragraph\">For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,</p>",
        "<p class=\"euler__paragraph\">and the sum of the digits in the number 10! is:</p>",
        "<p class=\"euler__paragraph\">3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the sum of the digits in the number 100!</p></div>"
      ],
      "challengeSeed": [
        "function euler20() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler20();"
      ],
      "solutions": [
        "function euler20() {\n  // 100! is too large to store acurately as an integer.\n  // To overcome this, this solution uses an array of digits\n  // to represent the large number accurately.\n\n  function multiplyDigitArray(digitArr, multiplier) {\n    function carry(arr, index, num) {\n      // carries higher multiples of 10 to the next index\n      const len = arr.length;\n      const ones = num % 10;\n      const tens = Math.floor((num % 100) / 10);\n      const hundreds = Math.floor(num / 100);\n      arr[index] = ones;\n      if (tens > 0 || hundreds > 0) {\n        if (index + 1 >= len) {\n          // need to extend arr\n          arr.push(tens);\n        } else {\n          carry(arr, index + 1, tens + arr[index + 1]);\n        }\n      }\n      if (hundreds > 0) {\n        if (index + 2 >= len) {\n          // need to extend arr\n          arr.push(hundreds);\n        } else {\n          carry(arr, index + 2, hundreds + arr[index + 2]);\n        }\n      }\n    }\n\n    // Update digits starting with most significant\n    const len = digitArr.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const digit = digitArr[i];\n      const product = digit * multiplier;\n      carry(digitArr, i, product);\n    }\n    return digitArr;\n  }\n\n  function factorial(num) {\n    // returns an array with the digits of the factorial\n    if (num === 1) {\n      return [1];\n    }\n    return multiplyDigitArray(factorial(num - 1), num);\n  }\n\n  const factorialDigitArr = factorial(100);\n  return factorialDigitArr.reduce((sum, digit) => {\n    return sum + digit;\n  });\n}\n"
      ],
      "tail": "const replaceThis = 3;",
      "tests": [
        "assert(typeof euler20 === 'function', 'message: <code>euler20()</code> is a function.');",
        "assert.strictEqual(euler20(), 648, 'message: <code>euler20()</code> should return 648.');"
      ],
      "id": "5900f3801000cf542c50fe93"
    },
    {
      "title": "Problem 21: Amicable numbers",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Let d(<span class=\"euler__text--italic\">n</span>) be defined as the sum of proper divisors of <span class=\"euler__text--italic\">n</span> (numbers less than <span class=\"euler__text--italic\">n</span> which divide evenly into <span class=\"euler__text--italic\">n</span>).</p>",
        "<p class=\"euler__paragraph\">If d(<span class=\"euler__text--italic\">a</span>) = <span class=\"euler__text--italic\">b</span> and d(<span class=\"euler__text--italic\">b</span>) = <span class=\"euler__text--italic\">a</span>, where <span class=\"euler__text--italic\">a</span> ≠ <span class=\"euler__text--italic\">b</span>, then <span class=\"euler__text--italic\">a</span> and <span class=\"euler__text--italic\">b</span> are an amicable pair and each of <span class=\"euler__text--italic\">a</span> and <span class=\"euler__text--italic\">b</span> are called amicable numbers.</p>",
        "<p class=\"euler__paragraph\">For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.</p>",
        "<p class=\"euler__paragraph\">Evaluate the sum of all the amicable numbers under 10000.</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler21() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler21();"
      ],
      "solutions": [
        "// noprotect\nfunction euler21() {\n  function sumOfDivisors(num) {\n    let i = 2;\n    let sum = 1;\n    while (i <= num ** 0.5) {\n      if (num % i === 0) {\n        sum += i;\n        if (i !== num ** 0.5) {\n          sum += num / i;\n        }\n      }\n      i += 1;\n    }\n    return sum;\n  }\n\n  function findAmicablePairs(limit) {\n    let i = 2;\n    const amicablePairs = [];\n    while (i < limit) {\n      const sumOfDivs = sumOfDivisors(i);\n      if (sumOfDivisors(sumOfDivs) === i && sumOfDivs !== i && amicablePairs.indexOf(i) < 0) {\n        amicablePairs.push(i);\n        amicablePairs.push(sumOfDivs);\n      }\n      i += 1;\n    }\n    return amicablePairs;\n  }\n\n  const amacablePairs = findAmicablePairs(10000);\n  let sum = 0;\n  amacablePairs.forEach(element => {\n    sum += element;\n  });\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler21 === 'function', 'message: <code>euler21()</code> is a function.');",
        "assert.strictEqual(euler21(), 31626, 'message: <code>euler21()</code> should return 31626.');"
      ],
      "id": "5900f3811000cf542c50fe94"
    },
    {
      "title": "Problem 23: Non-abundant sums",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">A number <span class=\"euler__text--italic\">n</span> is called deficient if the sum of its proper divisors is less than <span class=\"euler__text--italic\">n</span> and it is called abundant if this sum exceeds <span class=\"euler__text--italic\">n</span>.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.</p>",
        "<p class=\"euler__paragraph\">Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler23() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler23();"
      ],
      "solutions": [
        "// noprotect\nfunction euler23() {\n  function sumOfDivisors(num) {\n    let i = 2;\n    let sum = 1;\n    while (i <= num ** 0.5) {\n      if (num % i === 0) {\n        sum += i;\n        if (i !== num ** 0.5) {\n          sum += num / i;\n        }\n      }\n      i += 1;\n    }\n    return sum;\n  }\n\n  function findAbundantNumbers(limit) {\n    const abundantNumbers = [];\n    for (let i = 1; i < limit; i++) {\n      if (sumOfDivisors(i) > i) {\n        abundantNumbers.push(i);\n      }\n    }\n    return abundantNumbers;\n  }\n\n  const limit = 28123;\n  const abundantNumbers = findAbundantNumbers(limit);\n\n  // find numbers that aren't sums of abundant number\n  const notSumsBoolArr = new Array(limit).fill(false);\n  for (let i = 0; i < abundantNumbers.length; i++) {\n    for (let j = i; j < abundantNumbers.length; j++) {\n      const sum = abundantNumbers[i] + abundantNumbers[j];\n      if (sum >= limit) {\n        break;\n      }\n      notSumsBoolArr[sum] = true;\n    }\n  }\n  const notSums = [];\n  for (let i = 1; i < limit; i++) {\n    if (!notSumsBoolArr[i]) {\n      notSums.push(i);\n    }\n  }\n\n  // sum the notSums array\n\n  let sum = 0;\n  notSums.forEach(element => {\n    sum += element;\n  });\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler23 === 'function', 'message: <code>euler23()</code> is a function.');",
        "assert.strictEqual(euler23(), 4179871, 'message: <code>euler23()</code> should return 4179871.');"
      ],
      "id": "5900f3831000cf542c50fe96"
    },
    {
      "title": "Problem 24: Lexicographic permutations",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:</p>",
        "<br>",
        "<p class=\"euler__paragraph euler__text--centered\">012   021   102   120   201   210</p>",
        "<br>",
        "<p class=\"euler__paragraph\">What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?</p></div>"
      ],
      "challengeSeed": [
        "function euler24() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler24();"
      ],
      "solutions": [
        "function euler24() {\n  let digitString = '0123456789';\n  let permIndex = 999999;\n  // Sort the digits\n  const digitStringArr = digitString.split('');\n  digitStringArr.sort();\n  digitString = digitStringArr.join('');\n\n  // Calculate the number of permutations\n  // using digitString.length!\n  let numberOfPerms = 1;\n  for (let i = 1; i <= digitString.length; i++) {\n    numberOfPerms *= i;\n  }\n\n  // The 1000000th permutation can be found without\n  // creating all permutations.\n  // The first 1/10th of the permutations start with a 0/\n  // The second 1/10th of the permutations start with a 1 etc.\n  // The first 1/9th of the first 1/10th of the permutations\n  // have a 1 as the second digit.\n  // Following this method, we can find the ith permutation.\n\n  // find the ith permutation\n  let ithPermutation = '';\n  let digitsLeft = digitString;\n  while (digitsLeft.length > 0) {\n    // find the ith character\n    const characterIndex = Math.floor((permIndex / numberOfPerms) * digitsLeft.length);\n    const character = digitsLeft[characterIndex];\n    ithPermutation += character;\n\n    // update permIndex so that it points to the right permutations\n    // for the next itteration\n    permIndex -= ((numberOfPerms / digitsLeft.length) * Math.floor((permIndex / numberOfPerms) * digitsLeft.length));\n\n    // update numberOfPerms\n    numberOfPerms /= digitsLeft.length;\n\n    // delete used character from digit string.\n    digitsLeft = digitsLeft.slice(0, characterIndex) + digitsLeft.slice(characterIndex + 1);\n  }\n  return parseInt(ithPermutation, 10);\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler24 === 'function', 'message: <code>euler24()</code> is a function.');",
        "assert.strictEqual(euler24(), 2783915460, 'message: <code>euler24()</code> should return 2783915460.');"
      ],
      "id": "5900f3841000cf542c50fe97"
    },
    {
      "title": "Problem 25: 1000-digit Fibonacci number",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The <a class=\"euler__link--wiki\" href=\"https://en.wikipedia.org/wiki/Fibonacci_number\" title=\"Fibonacci Numbers\">Fibonacci sequence</a> is defined by the recurrence relation:</p>",
        "<p class=\"euler__paragraph\">F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub>, where F<sub>1</sub> = 1 and F<sub>2</sub> = 1.</p>",
        "<p class=\"euler__paragraph\">Hence the first 12 terms will be:</p>",
        "<p class=\"euler__paragraph\">F<sub>1</sub> = 1</p>",
        "<p class=\"euler__paragraph\">F<sub>2</sub> = 1</p>",
        "<p class=\"euler__paragraph\">F<sub>3</sub> = 2</p>",
        "<p class=\"euler__paragraph\">F<sub>4</sub> = 3</p>",
        "<p class=\"euler__paragraph\">F<sub>5</sub> = 5</p>",
        "<p class=\"euler__paragraph\">F<sub>6</sub> = 8</p>",
        "<p class=\"euler__paragraph\">F<sub>7</sub> = 13</p>",
        "<p class=\"euler__paragraph\">F<sub>8</sub> = 21</p>",
        "<p class=\"euler__paragraph\">F<sub>9</sub> = 34</p>",
        "<p class=\"euler__paragraph\">F<sub>10</sub> = 55</p>",
        "<p class=\"euler__paragraph\">F<sub>11</sub> = 89</p>",
        "<p class=\"euler__paragraph\">F<sub>12</sub> = 144</p>",
        "<p class=\"euler__paragraph\">The 12th term, F<sub>12</sub>, is the first term to contain three digits.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">What is the index of the first term in the Fibonacci sequence to contain 1000 digits?</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler25() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler25();"
      ],
      "solutions": [
        "// noprotect\nfunction euler25() {\n  function sumDigitArrays(arr1, arr2) {\n    function addNumToDigitArr(arr, index, num) {\n      // adds a number to a digit array at a specified index.\n      const len = arr.length;\n      const ones = num % 10;\n      const tens = Math.floor((num % 100) / 10);\n      const hundreds = Math.floor(num / 100);\n      arr[index] = ones;\n      if (tens > 0 || hundreds > 0) {\n        if (index + 1 >= len) {\n          // need to extend arr\n          arr.push(tens);\n        } else {\n          addNumToDigitArr(arr, index + 1, tens + arr[index + 1]);\n        }\n      }\n      if (hundreds > 0) {\n        if (index + 2 >= len) {\n          // need to extend arr\n          arr.push(hundreds);\n        } else {\n          addNumToDigitArr(arr, index + 2, hundreds + arr[index + 2]);\n        }\n      }\n    }\n\n    const longArr = arr1.length > arr2.length ? arr1 : arr2;\n    const shortArr = arr1.length <= arr2.length ? arr1 : arr2;\n    const result = [0];\n    let i = 0;\n    while (i < shortArr.length) {\n      addNumToDigitArr(result, i, shortArr[i] + longArr[i] + (result[i] ? result[i] : 0));\n      i++;\n    }\n    while (i < longArr.length) {\n      addNumToDigitArr(result, i, longArr[i] + (result[i] ? result[i] : 0));\n      i++;\n    }\n    return result;\n  }\n\n  // fibList will store numbers as digit arrays\n  const fibList = [[1]];\n  let latestFib = [1];\n  while (latestFib.length < 1000) {\n    fibList.push(latestFib);\n    const len = fibList.length;\n    latestFib = sumDigitArrays(fibList[len - 2], fibList[len - 1]);\n  }\n  return fibList.length + 1;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler25 === 'function', 'message: <code>euler25()</code> is a function.');",
        "assert.strictEqual(euler25(), 4782, 'message: <code>euler25()</code> should return 4782.');"
      ],
      "id": "5900f3851000cf542c50fe98"
    },
    {
      "title": "Problem 26: Reciprocal cycles",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:</p>",
        "<p class=\"euler__paragraph\"></p>",
        "<p class=\"euler__text--indented\"><sup>1</sup>/<sub>2</sub> = 0.5</p><br>",
        "<p class=\"euler__text--indented\"><sup>1</sup>/<sub>3</sub> = 0.(3)</p><br>",
        "<p class=\"euler__text--indented\"><sup>1</sup>/<sub>4</sub> = 0.25</p><br>",
        "<p class=\"euler__text--indented\"><sup>1</sup>/<sub>5</sub> = 0.2</p><br>",
        "<p class=\"euler__text--indented\"><sup>1</sup>/<sub>6</sub> = 0.1(6)</p><br>",
        "<p class=\"euler__text--indented\"><sup>1</sup>/<sub>7</sub> = 0.(142857)</p><br>",
        "<p class=\"euler__text--indented\"><sup>1</sup>/<sub>8</sub> = 0.125</p><br>",
        "<p class=\"euler__text--indented\"><sup>1</sup>/<sub>9</sub> = 0.(1)</p><br>",
        "<p class=\"euler__text--indented\"><sup>1</sup>/<sub>10</sub>= 0.1</p><br>",
        "<p class=\"euler__paragraph\">Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that <sup>1</sup>/<sub>7</sub> has a 6-digit recurring cycle.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the value of d < 1000 for which <sup>1</sup>/<sub>d</sub> contains the longest recurring cycle in its decimal fraction part.</p></div>"
      ],
      "challengeSeed": [
        "function euler26() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler26();"
      ],
      "solutions": [
        "function euler26() {\n  function getLengthOfCycle(denominator) {\n    let currNum = 1;\n    let count = 0;\n    const numsVisited = [];\n    while (numsVisited.indexOf(currNum) === -1) {\n      numsVisited.push(currNum);\n      currNum %= denominator;\n      currNum *= 10;\n      count++;\n    }\n    return count - 1;\n  }\n\n  let longestCycle = 0;\n  let numWithLongestCycle;\n  for (let d = 999; d > 0; d--) {\n    if (d < longestCycle) break;\n    const cycleLength = getLengthOfCycle(d);\n    if (cycleLength > longestCycle) {\n      longestCycle = cycleLength;\n      numWithLongestCycle = d;\n    }\n  }\n  return numWithLongestCycle;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler26 === 'function', 'message: <code>euler26()</code> is a function.');",
        "assert.strictEqual(euler26(), 983, 'message: <code>euler26()</code> should return 983.');"
      ],
      "id": "5900f3861000cf542c50fe99"
    },
    {
      "title": "Problem 27: Quadratic primes",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Euler discovered the remarkable quadratic formula:</p>",
        "<br>",
        "<p class=\"euler__paragraph\">$n^2 + n + 41$</p>",
        "<br>",
        "<p class=\"euler__paragraph\">It turns out that the formula will produce 40 primes for the consecutive integer values $0 \\le n \\le 39$. However, when $n = 40$, $40^2 + 40 + 41 = 40(40 + 1) + 41$ is divisible by 41, and certainly when $n = 41$, $41^2 + 41 + 41$ is clearly divisible by 41.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">The incredible formula $n^2 - 79n + 1601$ was discovered, which produces 80 primes for the consecutive values $0 \\le n \\le 79$. The product of the coefficients, −79 and 1601, is −126479.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Considering quadratics of the form:</p>",
        "<br>",
        "<p class=\"euler__paragraph\">$n^2 + an + b$, where $|a| < 1000$ and $|b| \\le 1000$</p>",
        "<br>",
        "<p class=\"euler__paragraph\"><small>where $|n|$ is the modulus/absolute value of $n$<br>e.g. $|11| = 11$ and $|-4| = 4$</small></p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the product of the coefficients, $a$ and $b$, for the quadratic expression that produces the maximum number of primes for consecutive values of $n$, starting with $n = 0$.</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler27() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler27();"
      ],
      "solutions": [
        "// noprotect\nfunction euler27() {\n  function isPrime(num) {\n    if (num < 2) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function findPrimes(lim) {\n    const primes = [];\n    for (let num = 1; num < lim; num++) {\n      if (isPrime(num)) {\n        primes.push(num);\n      }\n    }\n    return primes;\n  }\n\n  const limitA = 1000;\n  const limitB = 1000;\n\n  const primes = findPrimes(limitA > limitB ? limitA : limitB);\n  const negativePrimes = [];\n  primes.forEach(prime => {\n    negativePrimes.push(prime);\n    negativePrimes.push(-prime);\n  });\n\n  let maxN = 0;\n  let maxA = 0;\n  let maxB = 0;\n  for (let i = 0; i < negativePrimes.length && negativePrimes[i] < limitA; i++) {\n    const a = negativePrimes[i];\n    for (let j = 0; j < negativePrimes.length && negativePrimes[j] <= limitB; j++) {\n      const b = negativePrimes[j];\n      let n = 0;\n      while (isPrime((n ** 2) + (a * n) + b)) {\n        n++;\n      }\n      if (n > maxN) {\n        maxN = n;\n        maxA = a;\n        maxB = b;\n      }\n    }\n  }\n  return maxA * maxB;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler27 === 'function', 'message: <code>euler27()</code> is a function.');",
        "assert.strictEqual(euler27(), -59231, 'message: <code>euler27()</code> should return -59231.');"
      ],
      "id": "5900f3871000cf542c50fe9a"
    },
    {
      "title": "Problem 28: Number spiral diagonals",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:</p>",
        "<div class=\"euler__pre-wrap\"><pre class=\"euler__pre\">",
        "<span class=\"euler__text--bold\" style=\"color:#ff0000;\">21</span> 22 23 24 <span class=\"euler__text--bold\" style=\"color:#ff0000;\">25</span>",
        "20  <span class=\"euler__text--bold\" style=\"color:#ff0000;\">7</span>  8  <span class=\"euler__text--bold\" style=\"color:#ff0000;\">9</span> 10",
        "19  6  <span class=\"euler__text--bold\" style=\"color:#ff0000;\">1</span>  2 11",
        "18  <span class=\"euler__text--bold\" style=\"color:#ff0000;\">5</span>  4  <span class=\"euler__text--bold\" style=\"color:#ff0000;\">3</span> 12",
        "<span class=\"euler__text--bold\" style=\"color:#ff0000;\">17</span> 16 15 14 <span class=\"euler__text--bold\" style=\"color:#ff0000;\">13</span>",
        "</pre></div>",
        "<p class=\"euler__paragraph\">It can be verified that the sum of the numbers on the diagonals is 101.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?</p></div>"
      ],
      "challengeSeed": [
        "function euler28() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler28();"
      ],
      "solutions": [
        "function euler28() {\n  const spiralSize = 1001;\n  if (spiralSize % 2 === 0) {\n    return -1;\n  }\n  if (spiralSize === 1) {\n    return 1;\n  }\n  let sum = 1;\n  const cornerNums = [3, 5, 7, 9];\n  for (let layer = 3; layer <= spiralSize; layer += 2) {\n    sum += cornerNums.reduce((element, cornerSum) =>\n      cornerSum + element, 0);\n    cornerNums.forEach((num, i) => {\n      cornerNums[i] += ((layer - 1) * (3 - i)) + ((layer + 1) * (i + 1));\n    });\n  }\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler28 === 'function', 'message: <code>euler28()</code> is a function.');",
        "assert.strictEqual(euler28(), 669171001, 'message: <code>euler28()</code> should return 669171001.');"
      ],
      "id": "5900f3881000cf542c50fe9b"
    },
    {
      "title": "Problem 30: Digit fifth powers",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Surprisingly there are only three numbers that can be written as the sum of fourth powers of their digits:</p>",
        "<p class=\"euler__paragraph\">$1634 = 1^4 + 6^4 + 3^4 + 4^4$</p>",
        "<p class=\"euler__paragraph\">$8208 = 8^4 + 2^4 + 0^4 + 8^4$</p>",
        "<p class=\"euler__paragraph\">$9474 = 9^4 + 4^4 + 7^4 + 4^4$</p>",
        "<p class=\"euler__paragraph\">As $1 = 1^4$ is not a sum it is not included.</p>",
        "<p class=\"euler__paragraph\">The sum of these numbers is: $1634 + 8208 + 9474 = 19316$</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the sum of all the numbers that can be written as the sum of fifth powers of their digits.</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler30() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler30();"
      ],
      "solutions": [
        "// noprotect\nfunction euler30() {\n  /*\n    The upper bound is found by evaluating:\n    n*9^5 = {nDigitNumber}\n    When n < 6, we get a number with more than n digits.\n    When n = 6, we get a number with 6 digits. 6*9^5 = 354,294\n    Therefore, we can't get a number greater than 354,294 with\n    6 digits.\n    When n > 6, we get a number with less than n digits.\n    Therefore, we can't get any solutions for n > 6.\n    Therefore, 354,294 must be our limit.\n  */\n  let sum = 0;\n  for (let i = 2; i <= 354294; i++) {\n    let sumOfFifthPowers = 0;\n    let currNum = i;\n    while (sumOfFifthPowers <= i && currNum > 0) {\n      sumOfFifthPowers += (currNum % 10) ** 5;\n      currNum = Math.floor(currNum / 10);\n    }\n    if (sumOfFifthPowers === i) {\n      sum += sumOfFifthPowers;\n    }\n  }\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler30 === 'function', 'message: <code>euler30()</code> is a function.');",
        "assert.strictEqual(euler30(), 443839, 'message: <code>euler30()</code> should return 443839.');"
      ],
      "id": "5900f38a1000cf542c50fe9d"
    },
    {
      "title": "Problem 31: Coin sums",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:</p>",
        "<p class=\"euler__paragraph\">1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).</p>",
        "<br>",
        "<p class=\"euler__paragraph\">It is possible to make £2 in the following way:</p>",
        "<p class=\"euler__paragraph\">1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p</p>",
        "<br>",
        "<p class=\"euler__paragraph\">How many different ways can £2 be made using any number of coins?</p></div>"
      ],
      "challengeSeed": [
        "function euler31() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler31();"
      ],
      "solutions": [
        "function euler31() {\n  let count = 0;\n  const requiredTotal = 200;\n  for (let a = requiredTotal; a >= 0; a -= 200) {\n    for (let b = a; b >= 0; b -= 100) {\n      for (let c = b; c >= 0; c -= 50) {\n        for (let d = c; d >= 0; d -= 20) {\n          for (let e = d; e >= 0; e -= 10) {\n            for (let f = e; f >= 0; f -= 5) {\n              for (let g = f; g >= 0; g -= 2) {\n                count++;\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return count;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler31 === 'function', 'message: <code>euler31()</code> is a function.');",
        "assert.strictEqual(euler31(), 73682, 'message: <code>euler31()</code> should return 73682.');"
      ],
      "id": "5900f38b1000cf542c50fe9e"
    },
    {
      "title": "Problem 32: Pandigital products",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once; for example, the 5-digit number, 15234, is 1 through 5 pandigital.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">The product 7254 is unusual, as the identity, 39 × 186 = 7254, containing multiplicand, multiplier, and product is 1 through 9 pandigital.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the sum of all products whose multiplicand/multiplier/product identity can be written as a 1 through 9 pandigital.</p>",
        "<br>",
        "<p class=\"euler__paragraph\"><small>HINT: Some products can be obtained in more than one way so be sure to only include it once in your sum.</small></p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler32() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler32();"
      ],
      "solutions": [
        "// noprotect\nfunction euler32() {\n  function is1to9Pandigital(...numbers) {\n    const digitStr = concatenateNums(...numbers);\n\n    // check if length is 9\n    if (digitStr.length !== 9) {\n      return false;\n    }\n\n    // check if pandigital\n    for (let i = digitStr.length; i > 0; i--) {\n      if (digitStr.indexOf(i.toString()) === -1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function concatenateNums(...numbers) {\n    let digitStr = '';\n    for (let i = 0; i < numbers.length; i++) {\n      digitStr += numbers[i].toString();\n    }\n    return digitStr;\n  }\n\n  const pandigitalNums = [];\n  let sum = 0;\n  // limit mult 1 to 9876. Anything more than this will\n  // result in a product with more than 4 digits, which means\n  // the equation will have more than 9 digits\n  for (let mult1 = 2; mult1 < 9876; mult1++) {\n    // start mult 2 at 123. Anything lower than this will\n    // create a equation with less than 9 digits\n    let mult2 = 123;\n    while (concatenateNums(mult1, mult2, mult1 * mult2).length < 10) {\n      if (is1to9Pandigital(mult1, mult2, mult1 * mult2)\n          && !pandigitalNums.includes(mult1 * mult2)) {\n        pandigitalNums.push(mult1 * mult2);\n        sum += mult1 * mult2;\n      }\n      mult2++;\n    }\n  }\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler32 === 'function', 'message: <code>euler32()</code> is a function.');",
        "assert.strictEqual(euler32(), 45228, 'message: <code>euler32()</code> should return 45228.');"
      ],
      "id": "5900f38c1000cf542c50fe9f"
    },
    {
      "title": "Problem 33: Digit cancelling fractions",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The fraction $49/98$ is a curious fraction, as an inexperienced mathematician in attempting to simplify it may incorrectly believe that $49/98 = 4/8$, which is correct, is obtained by cancelling the $9$s.</p>",
        "<p class=\"euler__paragraph\">We shall consider fractions like, $30/50 = 3/5$, to be trivial examples.</p>",
        "<p class=\"euler__paragraph\">There are exactly four non-trivial examples of this type of fraction, less than one in value, and containing two digits in the numerator and denominator.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">If the product of these four fractions is given in its lowest common terms, find the value of the denominator.</p></div>"
      ],
      "challengeSeed": [
        "function euler33() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler33();"
      ],
      "solutions": [
        "function euler33() {\n  function isCurious(numerator, denominator) {\n    const fraction = numerator / denominator;\n    const numString = numerator.toString();\n    const denString = denominator.toString();\n\n    if (numString[1] === '0' && denString[1] === '0') {\n      // trivial\n      return false;\n    }\n    for (let i = 0; i < 2; i++) {\n      for (let j = 0; j < 2; j++) {\n        if (numString[i] === denString[j]) {\n          const newNum = parseInt(numString[1 - i], 10);\n          const newDen = parseInt(denString[1 - j], 10);\n          if (newNum / newDen === fraction) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  function findLargestDivisor(a, b) {\n    let gcd = a > b ? b : a;\n    while (gcd > 1) {\n      if (a % gcd === 0 && b % gcd === 0) {\n        return gcd;\n      }\n      gcd--;\n    }\n    return gcd;\n  }\n\n  function simplifyFraction(numerator, denominator) {\n    const divisor = findLargestDivisor(numerator, denominator);\n    return [numerator / divisor, denominator / divisor];\n  }\n\n  let multipleNumerator = 1;\n  let multipleDenominator = 1;\n\n  for (let denominator = 11; denominator < 100; denominator++) {\n    for (let numerator = 10; numerator < denominator; numerator++) {\n      if (isCurious(numerator, denominator)) {\n        multipleNumerator *= numerator;\n        multipleDenominator *= denominator;\n      }\n    }\n  }\n\n  return simplifyFraction(multipleNumerator, multipleDenominator)[1];\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler33 === 'function', 'message: <code>euler33()</code> is a function.');",
        "assert.strictEqual(euler33(), 100, 'message: <code>euler33()</code> should return 100.');"
      ],
      "id": "5900f38d1000cf542c50fea0"
    },
    {
      "title": "Problem 34: Digit factorials",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">$145$ is a curious number, as $1! + 4! + 5! = 1 + 24 + 120 = 145$.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the sum of all numbers which are equal to the sum of the factorial of their digits.</p>",
        "<br>",
        "<p class=\"euler__paragraph\"><small>Note: as $1! = 1$ and $2! = 2$ are not sums they are not included.</small></p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler34() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler34();"
      ],
      "solutions": [
        "// noprotect\nfunction euler34() {\n  function factorial(num) {\n    if (num === 0 || num === 1) {\n      return 1;\n    }\n    return factorial(num - 1) * num;\n  }\n\n  // create factorial lookup\n  const factorialHash = {};\n  for (let i = 0; i < 10; i++) {\n    factorialHash[i] = factorial(i);\n  }\n\n  let sum = 0;\n  // finding the upper limit:\n  // n * 9! = {n-digit-number}\n  // for n > 7, we get a number with less than n digits\n  // so the upper limit = 7 * 9! = 2540160\n  for (let i = 10; i < 2540160; i++) {\n    let currNum = i;\n    let sumOfFactorialOfDigits = 0;\n    while (currNum > 0) {\n      sumOfFactorialOfDigits += factorialHash[currNum % 10];\n      currNum = Math.floor(currNum / 10);\n    }\n    if (sumOfFactorialOfDigits === i) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler34 === 'function', 'message: <code>euler34()</code> is a function.');",
        "assert.strictEqual(euler34(), 40730, 'message: <code>euler34()</code> should return 40730.');"
      ],
      "id": "5900f38e1000cf542c50fea1"
    },
    {
      "title": "Problem 35: Circular primes",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The number, 197, is called a circular prime because all rotations of the digits: 197, 971, and 719, are themselves prime.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">How many circular primes are there below one million?</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler35() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler35();"
      ],
      "solutions": [
        "// noprotect\nfunction euler35() {\n  function eSieve(max) {\n    // Find primes using the Sieve of Eratosthenes\n    const array = [];\n    const upperLimit = Math.sqrt(max);\n    const primes = [];\n\n    for (let i = 0; i < max; i++) {\n      array.push(true);\n    }\n\n    for (let i = 2; i <= upperLimit; i++) {\n      if (array[i]) {\n        for (let j = i * i; j < max; j += i) {\n          array[j] = false;\n        }\n      }\n    }\n\n    for (let i = 2; i < max; i++) {\n      if (array[i]) {\n        primes.push(i);\n      }\n    }\n    return primes;\n  }\n\n  function isPrime(num) {\n    if (num < 2) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function getRotations(num) {\n    let numStr = num.toString();\n    const rotations = [];\n    for (let i = 0; i < numStr.length; i++) {\n      rotations.push(parseInt(numStr, 10));\n      numStr = numStr.slice(1) + numStr[0];\n    }\n    return rotations;\n  }\n\n  function canHavePrimeRotations(num) {\n    if (num === 5 || num === 2) return true;\n    const numStr = num.toString();\n    for (let i = 0; i < numStr.length; i++) {\n      const c = numStr[i];\n      if ((c % 2 === 0 || c % 5 === 0)) return false;\n    }\n    return true;\n  }\n\n  const limit = 1000000;\n  // create array of prime numbers below limit\n  const primes = eSieve(limit);\n\n  let circularPrimesCount = 0;\n  for (let i = 0; i < primes.length; i++) {\n    if (canHavePrimeRotations(primes[i])) {\n      const rotations = getRotations(primes[i]);\n      let allArePrime = true;\n      for (let j = 0; j < rotations.length; j++) {\n        if (!isPrime(rotations[j])) allArePrime = false;\n      }\n      if (allArePrime) circularPrimesCount++;\n    }\n  }\n  return circularPrimesCount;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler35 === 'function', 'message: <code>euler35()</code> is a function.');",
        "assert.strictEqual(euler35(), 55, 'message: <code>euler35()</code> should return 55.');"
      ],
      "id": "5900f38f1000cf542c50fea2"
    },
    {
      "title": "Problem 36: Double-base palindromes",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The decimal number, 585 = 1001001001<sub>2</sub> (binary), is palindromic in both bases.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">(Please note that the palindromic number, in either base, may not include leading zeros.)</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler36() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler36();"
      ],
      "solutions": [
        "// noprotect\nfunction euler36() {\n  function isPalindromic(num) {\n    const numStr = num.toString();\n    for (let i = 0; i < numStr.length / 2; i++) {\n      if (numStr[i] !== numStr[numStr.length - 1 - i]) return false;\n    }\n    return true;\n  }\n\n  function getBinaryNumber(num) {\n    let binaryNum = '';\n    let largestPower = 1;\n    while (largestPower * 2 <= num) {\n      largestPower *= 2;\n    }\n    let currNum = num;\n    while (largestPower >= 1) {\n      if (largestPower <= currNum) {\n        binaryNum += '1';\n        currNum -= largestPower;\n      } else {\n        binaryNum += '0';\n      }\n      largestPower /= 2;\n    }\n    return binaryNum;\n  }\n\n  let sum = 0;\n  for (let i = 1; i < 1000000; i++) {\n    if (isPalindromic(i) && isPalindromic(getBinaryNumber(i))) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler36 === 'function', 'message: <code>euler36()</code> is a function.');",
        "assert.strictEqual(euler36(), 872187, 'message: <code>euler36()</code> should return 872187.');"
      ],
      "id": "5900f3901000cf542c50fea3"
    },
    {
      "title": "Problem 37: Truncatable primes",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The number 3797 has an interesting property. Being prime itself, it is possible to continuously remove digits from left to right, and remain prime at each stage: 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the sum of the only eleven primes that are both truncatable from left to right and right to left.</p>",
        "<br>",
        "<p class=\"euler__paragraph\"><small>NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.</small></p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler37() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler37();"
      ],
      "solutions": [
        "// noprotect\nfunction euler37() {\n  function isPrime(num) {\n    if (num <= 1) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let count = 0;\n  let sum = 0;\n  for (let num = 11; count < 11; num++) {\n    if (isPrime(num)) {\n      const numStr = num.toString();\n      let allTruncationsArePrime = true;\n      for (let i = 1; i < numStr.length; i++) {\n        if (!isPrime(parseInt(numStr.slice(i), 10))\n          || !isPrime(parseInt(numStr.slice(0, numStr.length - i), 10))) {\n          allTruncationsArePrime = false;\n        }\n      }\n      if (allTruncationsArePrime) {\n        sum += num;\n        count++;\n      }\n    }\n  }\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler37 === 'function', 'message: <code>euler37()</code> is a function.');",
        "assert.strictEqual(euler37(), 748317, 'message: <code>euler37()</code> should return 748317.');"
      ],
      "id": "5900f3911000cf542c50fea4"
    },
    {
      "title": "Problem 38: Pandigital multiples",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Take the number $192$ and multiply it by each of $1$, $2$, and $3$:</p>",
        "<p class=\"euler__paragraph euler__text--centered\">$192 × 1 = 192$</p>",
        "<p class=\"euler__paragraph euler__text--centered\">$192 × 2 = 384$</p>",
        "<p class=\"euler__paragraph euler__text--centered\">$192 × 3 = 576$</p>",
        "<br>",
        "<p class=\"euler__paragraph\">By concatenating each product we get the $1$ to $9$ pandigital, $192384576$. We will call $192384576$ the concatenated product of $192$ and $(1,2,3)$</p>",
        "<br>",
        "<p class=\"euler__paragraph\">The same can be achieved by starting with $9$ and multiplying by $1$, $2$, $3$, $4$, and $5$, giving the pandigital, $918273645$, which is the concatenated product of $9$ and $(1,2,3,4,5)$.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">What is the largest $1$ to $9$ pandigital $9$-digit number that can be formed as the concatenated product of an integer with $(1,2, ... , n)$ where $n > 1$?</p></div>"
      ],
      "challengeSeed": [
        "function euler38() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler38();"
      ],
      "solutions": [
        "function euler38() {\n  function get9DigitConcatenatedProduct(num) {\n    // returns false if concatenated product\n    // is not 9 digits\n    let concatenatedProduct = num.toString();\n    let i = 2;\n    while (concatenatedProduct.length < 9) {\n      concatenatedProduct += num * i;\n      i++;\n    }\n    return concatenatedProduct.length === 9 ? concatenatedProduct : false;\n  }\n\n  function is1to9Pandigital(num) {\n    const numStr = num.toString();\n\n    // check if length is 9\n    if (numStr.length !== 9) {\n      return false;\n    }\n\n    // check if pandigital\n    for (let i = 9; i > 0; i--) {\n      if (numStr.indexOf(i.toString()) === -1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  let largestNum = 0;\n  for (let i = 1; i < 9876; i++) {\n    const concatenatedProduct = get9DigitConcatenatedProduct(i);\n    if (is1to9Pandigital(concatenatedProduct)\n      && concatenatedProduct > largestNum) {\n      largestNum = concatenatedProduct;\n    }\n  }\n  return parseInt(largestNum, 10);\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler38 === 'function', 'message: <code>euler38()</code> is a function.');",
        "assert.strictEqual(euler38(), 932718654, 'message: <code>euler38()</code> should return 932718654.');"
      ],
      "id": "5900f3931000cf542c50fea5"
    },
    {
      "title": "Problem 39: Integer right triangles",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">If $p$ is the perimeter of a right angle triangle with integral length sides, ${a,b,c}$, there are exactly three solutions for $p = 120$.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">${20,48,52}$, ${24,45,51}$, ${30,40,50}$</p>",
        "<br>",
        "<p class=\"euler__paragraph\">For which value of $p ≤ 1000$, is the number of solutions maximised?</p></div>"
      ],
      "challengeSeed": [
        "function euler39() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler39();"
      ],
      "solutions": [
        "function euler39() {\n  function findSideLengthOptions(p) {\n    const options = [];\n    for (let a = 1; a < p / 2; a++) {\n      // Solving the equations for b and c:\n      // a + b + c = p\n      // a^2 + b^2 = c^2\n      // gives the following sollutions\n      const b = (p * ((a - p) / 2)) / (a - p);\n      const c = (((-1 * (a ** 2)) + (p * a)) - ((p ** 2) / 2)) / (a - p);\n      if (b % 1 === 0 && c % 1 === 0) {\n        options.push([a, b, c]);\n      }\n    }\n    return options;\n  }\n\n  let maxNum;\n  let maxOptions = 0;\n  for (let i = 0; i <= 1000; i++) {\n    const len = findSideLengthOptions(i).length;\n    if (len > maxOptions) {\n      maxNum = i;\n      maxOptions = len;\n    }\n  }\n  return maxNum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler39 === 'function', 'message: <code>euler39()</code> is a function.');",
        "assert.strictEqual(euler39(), 840, 'message: <code>euler39()</code> should return 840.');"
      ],
      "id": "5900f3931000cf542c50fea6"
    },
    {
      "title": "Problem 40: Champernowne's constant",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">An irrational decimal fraction is created by concatenating the positive integers:</p>",
        "<p class=\"euler__paragraph\">$0.123456789101112131415161718192021$...</p>",
        "<br>",
        "<p class=\"euler__paragraph\">It can be seen that the $12$th digit of the fractional part is $1$.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">If $d_n$ represents the $n$th digit of the fractional part, find the value of the following expression.</p>",
        "<p class=\"euler__paragraph\">$d_1 × d_{10} × d_{100} × d_{1000} × d_{10000}$ $× d_{100000} × d_{1000000}$</p></div>"
      ],
      "challengeSeed": [
        "function euler40() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler40();"
      ],
      "solutions": [
        "function euler40() {\n  let fractionalPart = ' ';\n  for (let i = 1; fractionalPart.length <= 1000000; i++) {\n    fractionalPart += i.toString();\n  }\n  let product = 1;\n  for (let i = 0; i < 7; i++) {\n    const index = 10 ** i;\n    product *= parseInt(fractionalPart[index], 10);\n  }\n  return product;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler40 === 'function', 'message: <code>euler40()</code> is a function.');",
        "assert.strictEqual(euler40(), 210, 'message: <code>euler40()</code> should return 210.');"
      ],
      "id": "5900f3941000cf542c50fea7"
    },
    {
      "title": "Problem 41: Pandigital prime",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">We shall say that an n-digit number is pandigital if it makes use of all the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital and is also prime.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">What is the largest n-digit pandigital prime that exists?</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler41() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler41();"
      ],
      "solutions": [
        "// noprotect\nfunction euler41() {\n  function isPrime(num) {\n    if (num < 2) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isPandigital(num) {\n    const digitStr = num.toString();\n\n    // check if pandigital\n    for (let i = digitStr.length; i > 0; i--) {\n      if (digitStr.indexOf(i.toString()) === -1) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function getPermutations(digitString) {\n    if (digitString.length === 1) {\n      return digitString;\n    }\n    const oldPerms = getPermutations(digitString.slice(1));\n    const newPerms = [];\n\n    for (let i = 0; i < oldPerms.length; i++) {\n      const ithPerm = oldPerms[i];\n      for (let j = 0; j < oldPerms[i].length + 1; j++) {\n        const newPerm = ithPerm.slice(0, j) + digitString[0] + ithPerm.slice(j);\n        newPerms.push(newPerm);\n      }\n    }\n    return newPerms;\n  }\n\n  // number has to be less than 9 digits to be pandigital\n  const maxPossible = '987654321';\n  let max = 0;\n  for (let i = 0; i < 9; i++) {\n    const currMax = maxPossible.slice(i);\n    const permutations = getPermutations(currMax);\n    for (let j = 0; j < permutations.length; j++) {\n      const num = permutations[j];\n      if (isPrime(num) && num > max) {\n        max = num;\n      }\n    }\n  }\n  return parseInt(max, 10);\n}\n"
      ],
      "tail": "const replaceThis = 3;",
      "tests": [
        "assert(typeof euler41 === 'function', 'message: <code>euler41()</code> is a function.');",
        "assert.strictEqual(euler41(), 7652413, 'message: <code>euler41()</code> should return 7652413.');"
      ],
      "id": "5900f3951000cf542c50fea8"
    },
    {
      "title": "Problem 43: Sub-string divisibility",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The number, 1406357289, is a 0 to 9 pandigital number because it is made up of each of the digits 0 to 9 in some order, but it also has a rather interesting sub-string divisibility property.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Let $d_1$ be the 1st digit, $d_2$ be the 2nd digit, and so on. In this way, we note the following:</p>",
        "<br>",
        "<p class=\"euler__paragraph\">$d_2d_3d_4=406$ is divisible by 2</p>",
        "<p class=\"euler__paragraph\">$d_3d_4d_5=063$ is divisible by 3</p>",
        "<p class=\"euler__paragraph\">$d_4d_5d_6=635$ is divisible by 5</p>",
        "<p class=\"euler__paragraph\">$d_5d_6d_7=357$ is divisible by 7</p>",
        "<p class=\"euler__paragraph\">$d_6d_7d_8=572$ is divisible by 11</p>",
        "<p class=\"euler__paragraph\">$d_7d_8d_9=728$ is divisible by 13</p>",
        "<p class=\"euler__paragraph\">$d_8d_9d_{10}=289$ is divisible by 17</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the sum of all 0 to 9 pandigital numbers with this property.</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler43() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler43();"
      ],
      "solutions": [
        "// noprotect\nfunction euler43() {\n  function getPermutations(digitString) {\n    if (digitString.length === 1) {\n      return digitString;\n    }\n    const oldPerms = getPermutations(digitString.slice(1));\n    const newPerms = [];\n\n    for (let i = 0; i < oldPerms.length; i++) {\n      const ithPerm = oldPerms[i];\n      for (let j = 0; j < oldPerms[i].length + 1; j++) {\n        const newPerm = ithPerm.slice(0, j) + digitString[0] + ithPerm.slice(j);\n        newPerms.push(newPerm);\n      }\n    }\n    return newPerms;\n  }\n\n  let pandigitalNums = getPermutations('0123456789');\n\n  pandigitalNums = pandigitalNums.filter(num =>\n    num[0] !== 0\n    && num.substring(7, 10) % 17 === 0\n    && num.substring(6, 9) % 13 === 0\n    && num.substring(5, 8) % 11 === 0\n    && num.substring(4, 7) % 7 === 0\n    && num[5] % 5 === 0\n    && num.substring(2, 5) % 3 === 0\n    && num[3] % 2 === 0);\n\n  const total = pandigitalNums.reduce((sum, num) =>\n    sum + parseInt(num, 10), 0);\n\n  return total;\n}\n"
      ],
      "tail": "const replaceThis = 3;",
      "tests": [
        "assert(typeof euler43 === 'function', 'message: <code>euler43()</code> is a function.');",
        "assert.strictEqual(euler43(), 16695334890, 'message: <code>euler43()</code> should return 16695334890.');"
      ],
      "id": "5900f3971000cf542c50feaa"
    },
    {
      "title": "Problem 44: Pentagon numbers",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Pentagonal numbers are generated by the formula, $P_n=n(3n−1)/2$. The first ten pentagonal numbers are:</p>",
        "<br>",
        "<p class=\"euler__paragraph\">1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...</p>",
        "<br>",
        "<p class=\"euler__paragraph\">It can be seen that $P_4 + P_7 = 22 + 70 = 92 = P_8$. However, their difference, $70 − 22 = 48$, is not pentagonal.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the pair of pentagonal numbers, $P_j$ and $P_k$, for which their sum and difference are pentagonal and $D = |Pk − Pj|$ is minimised; what is the value of $D$?</p></div>"
      ],
      "challengeSeed": [
        "function euler44() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler44();"
      ],
      "solutions": [
        "function euler44() {\n  function isPentagonal(num) {\n    // Formula found by solving pentagonal number\n    // equation for n.\n    const n = (Math.sqrt((24 * num) + 1) + 1) / 6;\n    return n % 1 === 0;\n  }\n\n  function pentagonal(num) {\n    return (num * ((3 * num) - 1)) / 2;\n  }\n\n  let result;\n  let i = 1;\n  while (!result) {\n    i++;\n    const num1 = (i * ((3 * i) - 1)) / 2; // Pentagonal num formula\n    const minDiff = num1 - (((i - 1) * ((3 * (i - 1)) - 1)) / 2);\n    let j = i - 1;\n    while (j > 0 && !result) {\n      const num2 = (j * ((3 * j) - 1)) / 2;\n      if (isPentagonal(num1 - num2) && isPentagonal(num1 + num2)) {\n        result = num1 - num2;\n      }\n      j--;\n    }\n  }\n  return result;\n}\n"
      ],
      "tail": "const replaceThis = 3;",
      "tests": [
        "assert(typeof euler44 === 'function', 'message: <code>euler44()</code> is a function.');",
        "assert.strictEqual(euler44(), 5482660, 'message: <code>euler44()</code> should return 5482660.');"
      ],
      "id": "5900f3981000cf542c50feab"
    },
    {
      "title": "Problem 45: Triangular, pentagonal, and hexagonal",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Triangle</p>",
        "<br>",
        "<p class=\"euler__paragraph\">$T_n=n(n+1)/2$</p>",
        "<p class=\"euler__paragraph\">1, 3, 6, 10, 15, ...</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Pentagonal</p>",
        "<br>",
        "<p class=\"euler__paragraph\">$P_n=n(3n−1)/2$</p>",
        "<p class=\"euler__paragraph\">1, 5, 12, 22, 35, ...</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Hexagonal</p>",
        "<br>",
        "<p class=\"euler__paragraph\">$H_n=n(2n−1)$</p>",
        "<p class=\"euler__paragraph\">1, 6, 15, 28, 45, ...</p>",
        "<br>",
        "<p class=\"euler__paragraph\">It can be verified that $T_{285} = P_{165} = H_{143} = 40755$.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the next triangle number that is also pentagonal and hexagonal.</p></div>"
      ],
      "challengeSeed": [
        "function euler45() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler45();"
      ],
      "solutions": [
        "function euler45() {\n  function triangular(num) {\n    return (num * (num + 1)) / 2;\n  }\n\n  function isPentagonal(num) {\n    // Formula found by completing the square and\n    // solving for n.\n    const n = (Math.sqrt((24 * num) + 1) + 1) / 6;\n    return n % 1 === 0;\n  }\n\n  function isHexagonal(num) {\n    // Formula found by completing the square and\n    // solving for n.\n    const n = Math.sqrt(0.5 * (num + (1 / 8))) + 0.25;\n    return n % 1 === 0;\n  }\n\n  let iTri = 40755;\n  let tri;\n  let found = false;\n  while (!found) {\n    iTri++;\n    tri = triangular(iTri);\n    if (isPentagonal(tri) && isHexagonal(tri)) {\n      found = true;\n    }\n  }\n  return tri;\n}\n"
      ],
      "tail": "const replaceThis = 3;",
      "tests": [
        "assert(typeof euler45 === 'function', 'message: <code>euler45()</code> is a function.');",
        "assert.strictEqual(euler45(), 1533776805, 'message: <code>euler45()</code> should return 1533776805.');"
      ],
      "id": "5900f3991000cf542c50feac"
    },
    {
      "title": "Problem 46: Goldbach's other conjecture",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">It was proposed by Christian Goldbach that every odd composite number can be written as the sum of a prime and twice a square.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">$9 = 7 + 2×12$</p>",
        "<p class=\"euler__paragraph\">$15 = 7 + 2×22$</p>",
        "<p class=\"euler__paragraph\">$21 = 3 + 2×32$</p>",
        "<p class=\"euler__paragraph\">$25 = 7 + 2×32$</p>",
        "<p class=\"euler__paragraph\">$27 = 19 + 2×22$</p>",
        "<p class=\"euler__paragraph\">$33 = 31 + 2×12$</p>",
        "<br>",
        "<p class=\"euler__paragraph\">It turns out that the conjecture was false.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">What is the smallest odd composite that cannot be written as the sum of a prime and twice a square?</p></div>"
      ],
      "challengeSeed": [
        "function euler46() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler46();"
      ],
      "solutions": [
        "function euler46() {\n  function isPrime(num) {\n    if (num < 2) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function isSquare(num) {\n    return Math.sqrt(num) % 1 === 0;\n  }\n\n  // construct a list of prime numbers\n  const primes = [];\n  for (let i = 2; primes.length < 1000; i++) {\n    if (isPrime(i)) primes.push(i);\n  }\n\n  let num = 3;\n  let answer;\n  while (!answer) {\n    num += 2;\n    if (!isPrime(num)) {\n      let found = false;\n      for (let primeI = 0; primeI < primes.length && !found; primeI++) {\n        const square = (num - primes[primeI]) / 2;\n        if (isSquare(square)) {\n          found = true;\n          break;\n        }\n      }\n      if (!found) answer = num;\n    }\n  }\n  return answer;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler46 === 'function', 'message: <code>euler46()</code> is a function.');",
        "assert.strictEqual(euler46(), 5777, 'message: <code>euler46()</code> should return 5777.');"
      ],
      "id": "5900f39a1000cf542c50fead"
    },
    {
      "title": "Problem 47: Distinct primes factors",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The first two consecutive numbers to have two distinct prime factors are:</p>",
        "<br>",
        "<p class=\"euler__paragraph\">$14 = 2 × 7$</p>",
        "<p class=\"euler__paragraph\">$15 = 3 × 5$</p>",
        "<br>",
        "<p class=\"euler__paragraph\">The first three consecutive numbers to have three distinct prime factors are:</p>",
        "<br>",
        "<p class=\"euler__paragraph\">$644 = 2^2 × 7 × 23$</p>",
        "<p class=\"euler__paragraph\">$645 = 3 × 5 × 43$</p>",
        "<p class=\"euler__paragraph\">$646 = 2 × 17 × 19$</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the first four consecutive integers to have four distinct prime factors each. What is the first of these numbers?</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler47() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler47();"
      ],
      "solutions": [
        "// noprotect\nfunction euler47() {\n  function isPrime(num) {\n    if (num < 2) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function getPrimeFactors(num) {\n    const factors = [];\n    for (let i = 1; i <= Math.sqrt(num); i++) {\n      if (num % i === 0) {\n        // Found a factor\n        if (isPrime(i)) factors.push(i);\n        if (isPrime(num / i) && i !== Math.sqrt(num)) {\n          factors.push(num / i);\n        }\n      }\n    }\n    return factors;\n  }\n\n  function findConsecutiveNumbers(targetNumPrimes, targetConsecutive) {\n    let number = 0;\n    let consecutive = 0;\n    while (consecutive < targetConsecutive) {\n      number++;\n      if (getPrimeFactors(number).length >= targetNumPrimes) {\n        consecutive++;\n      } else {\n        consecutive = 0;\n      }\n    }\n    return (number - targetConsecutive) + 1;\n  }\n\n  return findConsecutiveNumbers(4, 4);\n}\n"
      ],
      "tail": "const replaceThis = 3;",
      "tests": [
        "assert(typeof euler47 === 'function', 'message: <code>euler47()</code> is a function.');",
        "assert.strictEqual(euler47(), 134043, 'message: <code>euler47()</code> should return 134043.');"
      ],
      "id": "5900f39c1000cf542c50feae"
    },
    {
      "title": "Problem 48: Self powers",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The series, $1^1 + 2^2 + 3^3 + ... + 10^{10} = 10405071317$.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Find the last ten digits of the series, $1^1 + 2^2 + 3^3 + ... + 1000^{1000}$.</p></div>"
      ],
      "challengeSeed": [
        "function euler48() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler48();"
      ],
      "solutions": [
        "function euler48() {\n  let sum = 0;\n\n  // We'll use modulo to remove everything but the\n  // last 10 digits of our results.\n  const modulo = 10000000000;\n\n  for (let i = 1; i <= 1000; i++) {\n    let temp = i;\n    for (let j = 1; j < i; j++) {\n      // multiply by i\n      temp *= i;\n      // trim answer\n      temp %= modulo;\n    }\n    // add the trimmed i^i\n    sum += temp;\n    // trim the answer\n    sum %= modulo;\n  }\n  return sum;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler48 === 'function', 'message: <code>euler48()</code> is a function.');",
        "assert.strictEqual(euler48(), 9110846700, 'message: <code>euler48()</code> should return 9110846700.');"
      ],
      "id": "5900f39c1000cf542c50feaf"
    },
    {
      "title": "Problem 49: Prime permutations",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The arithmetic sequence, 1487, 4817, 8147, in which each of the terms increases by 3330, is unusual in two ways: (i) each of the three terms are prime, and, (ii) each of the 4-digit numbers are permutations of one another.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">There are no arithmetic sequences made up of three 1-, 2-, or 3-digit primes, exhibiting this property, but there is one other 4-digit increasing sequence.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">What 12-digit number do you form by concatenating the three terms in this sequence?</p></div>"
      ],
      "challengeSeed": [
        "function euler49() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler49();"
      ],
      "solutions": [
        "function euler49() {\n  function arePermutations(num1, num2) {\n    const numStr1 = num1.toString();\n    let numStr2 = num2.toString();\n    if (numStr1.length !== numStr2.length) {\n      return false;\n    }\n\n    for (let i = 0; i < numStr1.length; i++) {\n      const index = numStr2.indexOf(numStr1[i]);\n      if (index === -1) {\n        return false;\n      }\n      numStr2 = numStr2.slice(0, index) + numStr2.slice(index + 1);\n    }\n    return true;\n  }\n\n  function isPrime(num) {\n    if (num < 2) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  for (let num1 = 1000; num1 <= 9999; num1++) {\n    const num2 = num1 + 3330;\n    const num3 = num2 + 3330;\n    if (isPrime(num1) && isPrime(num2) && isPrime(num3)) {\n      if (arePermutations(num1, num2) && arePermutations(num1, num3)\n        && num1 !== 1487) {\n        // concatenate and return numbers\n        return (num1 * 100000000) + (num2 * 10000) + num3;\n      }\n    }\n  }\n  return 0;\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler49 === 'function', 'message: <code>euler49()</code> is a function.');",
        "assert.strictEqual(euler49(), 296962999629, 'message: <code>euler49()</code> should return 296962999629.');"
      ],
      "id": "5900f39d1000cf542c50feb0"
    },
    {
      "title": "Problem 50: Consecutive prime sum",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">The prime 41, can be written as the sum of six consecutive primes:</p>",
        "<br>",
        "<p class=\"euler__paragraph\">$41 = 2 + 3 + 5 + 7 + 11 + 13$</p>",
        "<br>",
        "<p class=\"euler__paragraph\">This is the longest sum of consecutive primes that adds to a prime below one-hundred.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">The longest sum of consecutive primes below one-thousand that adds to a prime, contains 21 terms, and is equal to 953.</p>",
        "<br>",
        "<p class=\"euler__paragraph\">Which prime, below one-million, can be written as the sum of the most consecutive primes?</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler50() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler50();"
      ],
      "solutions": [
        "// noprotect\nfunction euler50() {\n  function isPrime(num) {\n    if (num < 2) {\n      return false;\n    } else if (num === 2) {\n      return true;\n    }\n    const sqrtOfNum = Math.floor(num ** 0.5);\n    for (let i = 2; i <= sqrtOfNum + 1; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  function getPrimes(limit) {\n    const primes = [];\n    for (let i = 0; i <= limit; i++) {\n      if (isPrime(i)) primes.push(i);\n    }\n    return primes;\n  }\n\n  const limit = 1000000;\n  const primes = getPrimes(limit);\n\n  // Create a map of the cumulative sum of primes\n  const cumulativeSums = {};\n  let cumulativeSum = 0;\n  for (let i = 0; i < primes.length; i++) {\n    cumulativeSum += primes[i];\n    cumulativeSums[primes[i]] = cumulativeSum;\n  }\n\n  // Look for a set of 1000000 consecutive primes.\n  // If not found, decrease the number of consecutive primes\n  // and look again.\n  for (let consecPrimes = 1000000; consecPrimes > 0; consecPrimes--) {\n    for (let i = 0; i < primes.length - consecPrimes; i++) {\n      const sum = cumulativeSums[primes[i + consecPrimes]] - cumulativeSums[primes[i]];\n      if (sum > limit) break;\n      if (isPrime(sum)) return sum;\n    }\n  }\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler50 === 'function', 'message: <code>euler50()</code> is a function.');",
        "assert.strictEqual(euler50(), 997651, 'message: <code>euler50()</code> should return 997651.');"
      ],
      "id": "5900f39e1000cf542c50feb1"
    },
    {
      "title": "Problem 51: Prime digit replacements",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "?",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">By replacing the 1st digit of the 2-digit number *3, it turns out that six of the nine possible values: 13, 23, 43, 53, 73, and 83, are all prime.</p><br/>",
        "<p class=\"euler__paragraph\">By replacing the 3rd and 4th digits of 56**3 with the same digit, this 5-digit number is the first example having seven primes among the ten generated numbers, yielding the family: 56003, 56113, 56333, 56443, 56663, 56773, and 56993. Consequently 56003, being the first member of this family, is the smallest prime with this property.</p><br/>",
        "<p class=\"euler__paragraph\">Find the smallest prime which, by replacing part of the number (not necessarily adjacent digits) with the same digit, is part of an eight prime value family.</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler51() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler51();"
      ],
      "solutions": [
        "// noprotect\nfunction euler51() {\n  // Returns true if prime, false if non-prime\n  function isPrime(num) {\n    const sqrtNum = Math.sqrt(num);\n    for (let i = 3; i <= sqrtNum; i += 2) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return num !== 1;\n  }\n  // Given a number string, make digit replacements. The 1's in the binary\n  // code tell you where to make them. (ex. numStr='423' and binaryCode='110' means 423=>**3\n  // with the same digit replacements taking place at the asterisks.\n  // 113, 223, 333, 443, and so on.)\n  function howManyPrimeFamilyMembers(numStr, binaryCode) {\n    let primeFamilyMemberCount = 0;\n    let notPrimeCount = 0;\n    let locNumStr = numStr;\n    const primeFamilyArr = [];// Store all prime family members\n    // h will be a digit 0-9 that will be substituted into numStr based on\n    // the location of 1's in the binary code\n    for (let h = 0; h < 10; h += 1) {\n      // For every 1 in the binary code, replace the corresponding digit in numStr with h\n      for (let i = 0; i < binaryCode.length; i += 1) {\n        if (binaryCode.charAt(i) === '1') {\n          locNumStr = locNumStr.slice(0, i) + h + locNumStr.slice(i + 1);\n        }\n      }\n      // After inserting h into numStr based on the binary code, if the result is prime,\n      // store it as a prime family member and increment the count to keep track\n      // of how many prime family members.\n      if (locNumStr.charAt(0) !== '0' && isPrime(locNumStr)) {\n        primeFamilyArr.push(locNumStr);\n        primeFamilyMemberCount += 1;\n        // If, after insertion of h based on the binary code, the result is not prime, increment\n        // the not prime count. If there are more than 2 not prime members, than it is impossible\n        // to have the desired 8 family member set and thus not worth continuing to check the\n        // rest of the potential family members. This is done to lower code execution time.\n      } else {\n        notPrimeCount += 1;\n        if (notPrimeCount > 2) {\n          break;\n        }\n      }\n    }\n    // return the count so the calling function can know if 8 members were found, and the array\n    // storing the prime family members so that the calling function can access the first member\n    // of the array (i.e. the smallest number in the family).\n    return [primeFamilyMemberCount, primeFamilyArr];\n  }\n  // returns a binary string 0-padded to specified finalLength\n  function paddedBinary(unpadDecimal, finalLength) {\n    const unpadBinaryStr = unpadDecimal.toString(2);\n    let padBinaryStr = unpadBinaryStr;\n    for (let i = 0; i < finalLength - unpadBinaryStr.length; i += 1) {\n      padBinaryStr = `0${padBinaryStr}`;\n    }\n    return padBinaryStr;\n  }\n  // Generate binary codes which will be used by howManyPrimeFamilyMembers\n  // to see where to make substitutions. If an 8 member prime family is found\n  // return true and the first member of that family\n  function generatePrimeFamilies(num) {\n    const numStr = num.toString(10);\n    const numStrLength = numStr.length;\n    let result = [];\n    // the binary limit is the decimal number representing the largest binary number that\n    // can be represented with the same number of digits as num\n    // (ex. for num=3245, binary limit=2^4 - 1=31=b1111)\n    const binaryLimit = (2 ** numStrLength) - 1;\n    for (let i = 1; i <= binaryLimit; i += 1) {\n      // each binary number tells howManyPrimeFamilyMembers where to make digit replacements (1)\n      // and where to leave the digit alone (0)\n      // paddedBinary is called to make sure that the binary code is 0-padded to the same\n      // length as numStr\n      result = howManyPrimeFamilyMembers(numStr, paddedBinary(i, numStrLength));\n      if (result[0] >= 8) {\n        // If the result says we found an 8-member prime family, tell main we can stop searching\n        // and also send it the 8-member prime family\n        return [true, result[1]];\n      }\n    }\n    return [false, 0];\n  }\n  // Check all numbers up to limit for prime families. An 8-member prime family will end\n  // the function with a return of the smallest member of the 8-member prime family\n  function main(limit) {\n    let result = [];\n    for (let i = 11; i < limit; i += 2) {\n      if (isPrime(i)) {\n        result = generatePrimeFamilies(i);\n        if (result[0]) {\n          return parseInt(result[1][0], 10);\n        }\n      }\n    }\n    return 0;\n  }\n  return main(1000000);\n}"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler51 === 'function', 'message: <code>euler51()</code> is a function.');",
        "assert.strictEqual(euler51(), 121313, 'message: <code>euler51()</code> should return 121313.');"
      ],
      "id": "5900f39f1000cf542c50feb2"
    },
    {
      "title": "Problem 100: Arranged probability",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "3",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">If a box contains twenty-one coloured discs, composed of fifteen blue discs and six red discs, and two discs were taken at random, it can be seen that the probability of taking two blue discs, P(BB) = (15/21)×(14/20) = 1/2.</p>",
        "<p class=\"euler__paragraph\">The next such arrangement, for which there is exactly 50% chance of taking two blue discs at random, is a box containing eighty-five blue discs and thirty-five red discs.</p>",
        "<p class=\"euler__paragraph\">By finding the first arrangement to contain over 10<sup>12</sup> = 1,000,000,000,000 discs in total, determine the number of blue discs that the box would contain.</p></div>"
      ],
      "challengeSeed": [
        "function euler100() {",
        "  // Good luck!",
        "  return 1;",
        "}",
        "",
        "euler100();"
      ],
      "solutions": [
        "function euler100() {\n  const x0 = 3;\n  const y0 = 1;\n  let x = 3;\n  let y = 1;\n\n  while (true) {\n    const sqrt = Math.sqrt(y * y * 8 + 1);\n    if (sqrt % 2 === 1) {\n      const blue = Math.floor((sqrt + 1) / 2 + y);\n      if (blue + y > 10 ** 12) {\n        return blue;\n      }\n      const nextX = x * x0 + y * y0 * 8;\n      const nextY = x * y0 + y * x0;\n      x = nextX;\n      y = nextY;\n    }\n  }\n}\n"
      ],
      "tail": "const result = 756872327473;",
      "tests": [
        "assert(typeof euler100 === 'function', 'message: <code>euler100()</code> is a function.');",
        "assert.strictEqual(euler100(), 756872327473, 'message: <code>euler100()</code> should return 756872327473.');"
      ],
      "id": "5900f3d01000cf542c50fee3"
    },
    {
      "title": "Problem 112: Bouncy numbers",
      "type": "project-euler",
      "categories": "math",
      "difficulty": "4",
      "benchmark": "//replaceWithActualFunctionHere;",
      "description": [
        "<div class=\"euler\"><p class=\"euler__paragraph\">Working from left-to-right if no digit is exceeded by the digit to its left it is called an increasing number; for example, 134468.</p>",
        "<p class=\"euler__paragraph\">Similarly if no digit is exceeded by the digit to its right it is called a decreasing number; for example, 66420.</p>",
        "<p class=\"euler__paragraph\">We shall call a positive integer that is neither increasing nor decreasing a \"bouncy\" number; for example, 155349.</p>",
        "<p class=\"euler__paragraph\">Clearly there cannot be any bouncy numbers below one-hundred, but just over half of the numbers below one-thousand (525) are bouncy. In fact, the least number for which the proportion of bouncy numbers first reaches 50% is 538.</p>",
        "<p class=\"euler__paragraph\">Surprisingly, bouncy numbers become more and more common and by the time we reach 21780 the proportion of bouncy numbers is equal to 90%.</p>",
        "<p class=\"euler__paragraph\">Find the least number for which the proportion of bouncy numbers is exactly 99%.</p></div>"
      ],
      "challengeSeed": [
        "// noprotect",
        "function euler112() {",
        "  // Good luck!",
        "  return true;",
        "}",
        "",
        "euler112();"
      ],
      "solutions": [
        "// noprotect\nfunction euler112() {\n  const isBouncy = function(num) {\n    let increasing = true;\n    let decreasing = true;\n\n    let maxDigit = 0;\n    let minDigit = 9;\n    while (num >= 1 && (increasing || decreasing)) {\n      const bottomDigit = num % 10;\n      num = num / 10 | 0;\n\n      if (increasing) {\n        if (bottomDigit <= minDigit) {\n          minDigit = bottomDigit;\n        } else {\n          increasing = false;\n        }\n      }\n\n      if (decreasing) {\n        if (bottomDigit >= maxDigit) {\n          maxDigit = bottomDigit;\n        } else {\n          decreasing = false;\n        }\n      }\n    }\n\n    return !(increasing || decreasing);\n  };\n\n  let i = 1;\n  let numBouncy = 0;\n  let ratio = 0;\n  while (ratio < 0.99) {\n    if (isBouncy(i)) {\n      numBouncy++;\n    }\n\n    ratio = numBouncy / i;\n    i++;\n  }\n\n  return (i - 1);\n}\n"
      ],
      "tail": [],
      "tests": [
        "assert(typeof euler112 === 'function', 'message: <code>euler112()</code> is a function.');",
        "assert.strictEqual(euler112(), 1587000, 'message: <code>euler112()</code> should return 1587000.');"
      ],
      "id": "5900f3dd1000cf542c50feef"
    }
  ]
}