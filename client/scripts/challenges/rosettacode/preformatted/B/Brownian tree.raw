
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Brownian tree
/// type: rosetta-code

/// categories:
/// Raster graphics operations

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Generate and draw a  <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Brownian tree" title="wp: Brownian tree">Brownian Tree</a>.</p>
/// <br/><p class="rosetta__paragraph">A Brownian Tree is generated as a result of an initial seed, followed by the interaction of two processes.</p><br/><ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">The initial "seed" is placed somewhere within the field. Where is not particularly important; it could be randomized, or it could be a fixed point.</li>
/// <li class="rosetta__list-item--ordered">Particles are injected into the field, and are individually given a (typically random) motion pattern.</li>
/// <li class="rosetta__list-item--ordered">When a particle collides with the seed or tree, its position is fixed, and it's considered to be part of the tree.</li></ol>
/// <br>Because of the lax rules governing the random nature of the particle's placement and motion, no two resulting trees are really expected to be the same, or even necessarily have the same general shape. <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
