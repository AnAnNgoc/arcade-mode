
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Bitmap/Histogram
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">Extend the basic bitmap storage defined <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Basic_bitmap_storage" title="Basic_bitmap_storage">on this page</a> to support dealing with image histograms. The image histogram contains for each luminance the count of image pixels having this luminance. Choosing a histogram representation take care about the data type used for the counts. It must have range of at least 0..NxM, where N is the image width and M is the image height.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Test task</span></p><br/><p class="rosetta__paragraph">Histogram is useful for many image processing operations. As an example, use it to convert an image into black and white art. The method works as follows:</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Convert image to grayscale;</li>
/// <li class="rosetta__list-item--unordered">Compute the histogram</li>
/// <li class="rosetta__list-item--unordered">Find the median: defined as the luminance such that the image has an approximately equal number of pixels with lesser and greater luminance.</li>
/// <li class="rosetta__list-item--unordered">Replace each pixel of luminance lesser than the median to black, and others to white.</li></ul>Use <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/read ppm file " title="read ppm file "> read</a>/<a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/write ppm file" title="write ppm file">write ppm file</a>, and <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/grayscale image" title="grayscale image">grayscale image</a> solutions. <br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
