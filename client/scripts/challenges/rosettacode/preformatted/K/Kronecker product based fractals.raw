
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Kronecker product based fractals
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">This task is based on  <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Kronecker product" title="Kronecker product"> Kronecker product</a>  of two matrices. If your</p>
/// <p class="rosetta__paragraph">language has no a built-in function for such product then you need to implement it first.<br></p>
/// <p class="rosetta__paragraph">The essence of fractals is self-replication (at least, self-similar replications).</p>
/// <p class="rosetta__paragraph">So, using n times self-product of the matrix (filled with 0/1) we will have a fractal of the n-th order.<br><br></p>
/// <p class="rosetta__paragraph">Actually, "self-product" is a Kronecker power of the matrix. In other words: for a matrix <span class="rosetta__text--bold">M</span> and a power <span class="rosetta__text--bold">n</span> create a function like <span class="rosetta__text--bold">matkronpow(M, n)</span>, which returns MxMxMx... (n times product).<br></p>
/// <p class="rosetta__paragraph">A formal recurrent <i>algorithm</i> of creating Kronecker power of a matrix is the following:<br></p>
/// <p class="rosetta__paragraph"><b>Algorithm:</b></p>
/// <ul>
/// <p class="rosetta__paragraph"><li>Let M is an initial matrix, and Rn is a resultant block matrix  of the Kronecker power, where n is the power (a.k.a. order).</li></p>
/// <p class="rosetta__paragraph"><li>Self-product of M, i.e., M x M producing R2 (resultant matrix with order/power 2).</li></p>
/// <p class="rosetta__paragraph"><li>To receive the next order/power matrix use this recurrent formula: Rn = R(n-1) x M.</li></p>
/// <p class="rosetta__paragraph"><li>Plot this Rn matrix to produce the <i><b>n</b>th</i> order fractal.</li></p>
/// </ul><br>
/// <p class="rosetta__paragraph">Even just looking at the resultant matrix you can see what will be plotted.<br></p>
/// <p class="rosetta__paragraph">There are virtually infinitely many fractals of this type. You are limited only by your creativity and</p>
/// <p class="rosetta__paragraph">the power of your computer.<br></p>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Using <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Kronecker_product" title="Kronecker_product"> Kronecker product</a> implement and show two popular and well-known fractals, i.e.:</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Vicsek fractal" title="wp: Vicsek fractal"> Vicsek fractal</a>;</li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Sierpinski carpet" title="wp: Sierpinski carpet"> Sierpinski carpet fractal</a>.</li></ul>
/// <br>The last one (<a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Sierpinski carpet" title="Sierpinski carpet"> Sierpinski carpet</a>) is already here on RC, but built using different approaches.<br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Test cases:</dt></dl>
/// <p class="rosetta__paragraph">These 2 fractals (each order/power 4 at least) should be built using the following 2 simple matrices:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// |0 1 0|	and |1 1 1|
/// |1 1 1|	    |1 0 1|
/// |0 1 0|	    |1 1 1|
/// </pre></div>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Note:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Output could be a graphical or ASCII-art representation, but if an order is set > 4 then printing is not suitable.</li>
/// <li class="rosetta__list-item--unordered">The orientation and distortion of the fractal could be your language/tool specific.</li>
/// <li class="rosetta__list-item--unordered">It would be nice to see one additional fractal of your choice, e.g., based on using a single (double) letter(s) of an alphabet, any sign(s) or alredy made a resultant matrix of the Kronecker product.</li></ul>
/// <br>See implementations and results below in JavaScript, PARI/GP and R languages. They have additional samples of "H", "+" and checkerboard fractals.<br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:

// KPF.js 6/23/16 aev
// HFJS: Plot any matrix mat (filled with 0,1)
function pmat01(mat, color) {
  // DCLs
  var cvs = document.getElementById('canvId');
  var ctx = cvs.getContext("2d"); 
  var w = cvs.width; var h = cvs.height;
  var m = mat[0].length; var n = mat.length;
  // Cleaning canvas and setting plotting color 
  ctx.fillStyle="white"; ctx.fillRect(0,0,w,h);
  ctx.fillStyle=color;
  // MAIN LOOP
  for(var i=0; i<m; i++) {
    for(var j=0; j<n; j++) {
      if(mat[i][j]==1) { ctx.fillRect(i,j,1,1)};
    }//fend j
  }//fend i
}//func end
// Prime functions:
// Create Kronecker product based fractal matrix rm from matrix m (order=ord)
function ckpbfmat(m,ord) {
  var rm=m;
  for(var i=1; i<ord; i++) {rm=mkp(rm,m)};
  //matpp2doc('R 4 ordd',rm,'*'); // ASCII "plotting" - if you wish to try.
  return(rm);
}
// Create and plot Kronecker product based fractal from matrix m (filled with 0/1)
function cpmat(m,ord,color) {
  var kpr;
  kpr=ckpbfmat(m,ord);
  pmat01(kpr,color);
}
// Fractal matrix "pretty" printing to document. 
// mat should be filled with 0 and 1; chr is a char substituting 1.
function matpp2doc(title,mat,chr) {
  var i,j,re='',e; var m=mat.length; var n=mat[0].length;
  document.write('&nbsp;&nbsp;<b>'+title+'</b>:<pre>');
  for(var i=0; i<m; i++) {
    for(var j=0; j<n; j++) {
      e='&nbsp;'; if(mat[i][j]==1) {e=chr}; re+=e; 
    }//fend j
    document.write('&nbsp;&nbsp;'+re+'<br />'); re='';
  }//fend i
  document.write('</pre>');
}
// mkp function (exotic arrow function): Return the Kronecker product
// of the a and b matrices
mkp=(a,b)=>a.map(a=>b.map(b=>a.map(y=>b.map(x=>r.push(y*x)),t.push(r=[]))),t=[])&&t;


/// rawSolutions:
=={{header|JavaScript}}==
Using Version #1 of [[Kronecker_product| Kronecker product]] in JavaScript.
{{Works with|Chrome}}
[[File:VicsekFractaljs.png|200px|right|thumb|Output VicsekFractaljs.png]]
[[File:SierpCarpetFractaljs.png|200px|right|thumb|Output SierpCarpetFractaljs.png]]
[[File:CheckbrdFractaljs.png|200px|right|thumb|Output CheckbrdFractaljs.png]]
<lang javascript>
// KPF.js 6/23/16 aev
// HFJS: Plot any matrix mat (filled with 0,1)
function pmat01(mat, color) {
  // DCLs
  var cvs = document.getElementById('canvId');
  var ctx = cvs.getContext("2d"); 
  var w = cvs.width; var h = cvs.height;
  var m = mat[0].length; var n = mat.length;
  // Cleaning canvas and setting plotting color 
  ctx.fillStyle="white"; ctx.fillRect(0,0,w,h);
  ctx.fillStyle=color;
  // MAIN LOOP
  for(var i=0; i<m; i++) {
    for(var j=0; j<n; j++) {
      if(mat[i][j]==1) { ctx.fillRect(i,j,1,1)};
    }//fend j
  }//fend i
}//func end
// Prime functions:
// Create Kronecker product based fractal matrix rm from matrix m (order=ord)
function ckpbfmat(m,ord) {
  var rm=m;
  for(var i=1; i<ord; i++) {rm=mkp(rm,m)};
  //matpp2doc('R 4 ordd',rm,'*'); // ASCII "plotting" - if you wish to try.
  return(rm);
}
// Create and plot Kronecker product based fractal from matrix m (filled with 0/1)
function cpmat(m,ord,color) {
  var kpr;
  kpr=ckpbfmat(m,ord);
  pmat01(kpr,color);
}
// Fractal matrix "pretty" printing to document. 
// mat should be filled with 0 and 1; chr is a char substituting 1.
function matpp2doc(title,mat,chr) {
  var i,j,re='',e; var m=mat.length; var n=mat[0].length;
  document.write('&nbsp;&nbsp;<b>'+title+'</b>:<pre>');
  for(var i=0; i<m; i++) {
    for(var j=0; j<n; j++) {
      e='&nbsp;'; if(mat[i][j]==1) {e=chr}; re+=e; 
    }//fend j
    document.write('&nbsp;&nbsp;'+re+'<br />'); re='';
  }//fend i
  document.write('</pre>');
}
// mkp function (exotic arrow function): Return the Kronecker product
// of the a and b matrices
mkp=(a,b)=>a.map(a=>b.map(b=>a.map(y=>b.map(x=>r.push(y*x)),t.push(r=[]))),t=[])&&t;
</lang> 

;Required tests:
<lang html>
<!-- VicsekFractal.html -->
<html>
<head>
  <title>Vicsek fractal</title>
  <script src="KPF.js"></script>
</head>
<body onload="cpmat([[0,1,0],[1,1,1],[0,1,0]],6,'navy')">
   <h3>Vicsek fractal</h3>
   <a href="SierpCarpetFractal.html"> Next: Sierpinski carpet fractal</a><br />
   <canvas id="canvId" width="750" height="750" style="border: 1px outset;"></canvas>
</body></html>
</lang> 

<lang html>
<!-- SierpCarpetFractal.html -->
<html>
<head>
  <title>Sierpinski carpet fractal</title>
  <script src="KPF.js"></script>
</head>
<body onload="cpmat([[1,1,1],[1,0,1],[1,1,1]],6,'brown')">
   <h3>Sierpinski carpet fractal</h3>
   <a href="Checkerboard.html"/> Next: Checkerboard </a><br />
   <canvas id="canvId" width="750" height="750" style="border: 1px outset;"></canvas>
</body></html>

<lang html>
<!-- Checkerboard.html -->
<html>
<head>
  <title>Checkerboard</title>
  <script src="KPF.js"></script>
</head>
<body onload="cpmat([[0,1,0,1],[1,0,1,0],[0,1,0,1],[1,0,1,0]],5,'black')">
   <h3>Checkerboard</h3>
   <a href="VicsekFractal.html"/> Next: Vicsek fractal </a><br />
   <canvas id="canvId" width="750" height="750" style="border: 1px outset;"></canvas>
</body></html>
</lang> 

{{Output}} 
<pre>
Page VicsekFractal.html with VicsekFractaljs.png
Page SierpCarpetFractal.html with SierpCarpetFractaljs.png
Page Checkerboard.html with CheckbrdFractaljs.png
</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
