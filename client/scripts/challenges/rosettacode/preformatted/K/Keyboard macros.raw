
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Keyboard macros
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><p class="rosetta__paragraph">Show how to link user defined methods to user defined keys. An example of this is the facility provided by emacs for <a class="rosetta__link--wiki" href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html" title="link: http://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html">key bindings</a>. These key bindings may be application-specific or system-wide; state which you have done.</p>
/// </div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
document.onkeydown = function(evt) {
  if (evt.keyCode === 118) {
    alert("You pressed F7!");
    return false;
  }
}

/// rawSolutions:
=={{header|JavaScript}}==
The example below captures the F7 key when pressed, if the document (that is, the web page) has focus. If the function returns ''false'', the event processing is halted. If it returns any other value, including ''undefined'', the event continues up the DOM tree ('bubbling').

<lang javascript>document.onkeydown = function(evt) {
  if (evt.keyCode === 118) {
    alert("You pressed F7!");
    return false;
  }
}</lang>

See [http://www.quirksmode.org/js/keys.html quirksmode] for more information about key detection in JavaScript.



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
