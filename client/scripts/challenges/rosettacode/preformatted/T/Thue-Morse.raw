
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Thue-Morse
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Create a <a class="rosetta__link--wiki" href="http://en.wikipedia.org/wiki/Thue%E2%80%93Morse_sequence" title="link: http://en.wikipedia.org/wiki/Thue%E2%80%93Morse_sequence">Thue-Morse sequence</a>.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">See also</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"> YouTube entry: <a class="rosetta__link--wiki" href="https://www.youtube.com/watch?v=prh72BLNjIk" title="link: https://www.youtube.com/watch?v=prh72BLNjIk">The Fairest Sharing Sequence Ever</a></li></ul><br><br> <br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(() => {
    'use strict';

    // THUE MORSE

    // thueMorse :: Int -> String
    let thueMorse = nCycles => range(1, Math.abs(nCycles))
            .reduce(a => a.concat(a.map(x => 1 - x)), [0])
            .join('');


    // GENERIC FUNCTION

    // range :: Int -> Int  -> [Int]
    let range = (m, n) => Array.from({
        length: Math.floor((n - m)) + 1
    }, (_, i) => m + i);


    // TEST

    return thueMorse(6);

    // 0110100110010110100101100110100110010110011010010110100110010110

})();


/// rawSolutions:
=={{header|JavaScript}}==

===ES6===
<lang JavaScript>(() => {
    'use strict';

    // THUE MORSE

    // thueMorse :: Int -> String
    let thueMorse = nCycles => range(1, Math.abs(nCycles))
            .reduce(a => a.concat(a.map(x => 1 - x)), [0])
            .join('');


    // GENERIC FUNCTION

    // range :: Int -> Int  -> [Int]
    let range = (m, n) => Array.from({
        length: Math.floor((n - m)) + 1
    }, (_, i) => m + i);


    // TEST

    return thueMorse(6);

    // 0110100110010110100101100110100110010110011010010110100110010110

})();
</lang>

{{Out}}
<pre>0110100110010110100101100110100110010110011010010110100110010110</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
