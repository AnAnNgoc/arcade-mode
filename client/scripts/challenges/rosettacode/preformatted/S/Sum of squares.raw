
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Sum of squares
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Write a program to find the sum of squares of a numeric vector.</p><br/><p class="rosetta__paragraph">The program should work on a zero-length vector (with an answer of  <span class="rosetta__text--bold">0</span>).</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Related task:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"> <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Mean" title="Mean">Mean</a></li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function sumsq(array) {
  var sum = 0;
  var i, iLen;

  for (i = 0, iLen = array.length; i < iLen; i++) {
    sum += array[i] * array[i];
  }
  return sum;
}

alert(sumsq([1,2,3,4,5]));  // 55

/// rawSolutions:
=={{header|JavaScript}}==
===ES5===
<lang javascript>function sumsq(array) {
  var sum = 0;
  var i, iLen;

  for (i = 0, iLen = array.length; i < iLen; i++) {
    sum += array[i] * array[i];
  }
  return sum;
}

alert(sumsq([1,2,3,4,5]));  // 55</lang>

An alternative using a while loop and Math.pow

<lang javascript>function sumsq(array) {
  var sum = 0, 
      i = array.length;

  while (i--) sum += Math.pow(array[i], 2);

  return sum;
}

alert(sumsq([1,2,3,4,5])); // 55</lang>


{{libheader|Functional}}<lang javascript>Functional.reduce("x+y*y", 0, [1,2,3,4,5])</lang>

map (JS 1.6) and reduce (JS 1.8)

<lang javascript>[3,1,4,1,5,9].map(function (n) { return Math.pow(n,2); }).reduce(function (sum,n) { return sum+n; });</lang>

===ES6===

Two ways of composing a sumOfSquares function
<lang JavaScript>(() => {
    'use strict';

    // squared :: Num a => a -> a
    const squared = x => Math.pow(x, 2);

    // sum :: (Num a) => [a] -> a
    const sum = xs => xs.reduce((a, x) => a + x, 0);

    // sumOfSquares :: Num a => [a] -> a
    const sumOfSquares = xs => sum(xs.map(squared));

    // sumOfSquares2 :: Num a => [a] -> a
    const sumOfSquares2 = xs =>
        xs.reduce((a, x) => a + squared(x), 0);

    return [sumOfSquares, sumOfSquares2]
        .map(f => f([3, 1, 4, 1, 5, 9]))
        .join('\n');
})();</lang>

{{Out}}
<pre>133
133</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
