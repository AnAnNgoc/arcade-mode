
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Self-referential sequence
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">There are several ways to generate a self-referential sequence. One very common one (the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Look-and-say sequence" title="Look-and-say sequence">Look-and-say sequence</a>) is to start with a positive integer, then generate the next term by concatenating enumerated groups of adjacent alike digits:</p><br/><p class="rosetta__paragraph">0, 10, 1110, 3110, 132110, 1113122110, 311311222110 ...</p><br/><p class="rosetta__paragraph">The terms generated grow in length geometrically and never converge.</p><br/><p class="rosetta__paragraph">Another way to generate a self-referential sequence is to summarize the previous term.</p><br/><p class="rosetta__paragraph">Count how many of each alike digit there is, then concatenate the sum and digit for each of the sorted enumerated digits. Note that the first five terms are the same as for the previous sequence.</p><br/><p class="rosetta__paragraph">0, 10, 1110, 3110, 132110, 13123110, 23124110 ... see <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/oeis:A036058" title="oeis:A036058">The On-Line Encyclopedia of Integer Sequences</a></p><br/><p class="rosetta__paragraph">Sort the digits largest to smallest. Do not include counts of digits that do not appear in the previous term.</p><br/><p class="rosetta__paragraph">Depending on the seed value, series generated this way always either converge to a stable value or to a short cyclical pattern. (For our purposes, I'll use converge to mean an element matches a previously seen element.) The sequence shown, with a seed value of 0, converges to a stable value of 1433223110 after 11 iterations. The seed value that converges most quickly is 22. It goes stable after the first element. (The next element is 22, which has been seen before.)</p><br/><p class="rosetta__paragraph"><b>Task:</b></p><br/><p class="rosetta__paragraph">Find all the positive integer seed values under 1000000, for the above convergent self-referential sequence, that takes the largest number of iterations before converging. Then print out the number of iterations and the sequence they return. Note that different permutations of the digits of the seed will yield the same sequence. For this task, assume leading zeros are not permitted.</p><br/><div class="rosetta__pre-wrap"><pre class="rosetta__pre">Seed Value(s): 9009 9090 9900<br/>Iterations: 21 <br/>Sequence: (same for all three seeds except for first element)
/// 9009
/// 2920
/// 192210
/// 19222110
/// 19323110
/// 1923123110
/// 1923224110
/// 191413323110
/// 191433125110
/// 19151423125110
/// 19251413226110
/// 1916151413325110
/// 1916251423127110
/// 191716151413326110
/// 191726151423128110
/// 19181716151413327110
/// 19182716151423129110
/// 29181716151413328110
/// 19281716151423228110
/// 19281716151413427110
/// 19182716152413228110
/// </pre></div>
/// <p class="rosetta__paragraph">See also: <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Self-describing numbers" title="Self-describing numbers">Self-describing numbers</a> and <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Look-and-say sequence" title="Look-and-say sequence">Look-and-say sequence</a></p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
