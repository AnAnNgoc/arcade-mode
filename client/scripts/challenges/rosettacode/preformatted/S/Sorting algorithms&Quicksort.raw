
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Sorting algorithms/Quicksort
/// type: rosetta-code

/// categories:
/// Recursion

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Sort an array (or list) elements using the  <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Quicksort" title="link: https://en.wikipedia.org/wiki/Quicksort"><span class="rosetta__text--italic">quicksort</span></a>  algorithm.</p><br/><p class="rosetta__paragraph">The elements must have a  <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Weak_ordering" title="link: https://en.wikipedia.org/wiki/Weak_ordering">strict weak order</a>  and the index of the array can be of any discrete type.</p><br/><p class="rosetta__paragraph">For languages where this is not possible, sort an array of integers.</p>
/// <br/><p class="rosetta__paragraph">Quicksort, also known as  <span class="rosetta__text--italic">partition-exchange sort</span>,  uses these steps.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">:#  Choose any element of the array to be the pivot.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:#  Divide all other elements (except the pivot) into two partitions.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:#*  All elements less than the pivot must be in the first partition.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:#*  All elements greater than the pivot must be in the second partition.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:#  Use recursion to sort both partitions.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:#  Join the first sorted partition, the pivot, and the second sorted partition.</span></p><br/><br>
/// <p class="rosetta__paragraph">The best pivot creates partitions of equal length (or lengths differing by  <span class="rosetta__text--bold">1</span>).</p><br/><p class="rosetta__paragraph">The worst pivot creates an empty partition (for example, if the pivot is the first or last element of a sorted array).</p><br/><p class="rosetta__paragraph">The run-time of Quicksort ranges from  <big> <span class="rosetta__text--italic"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/O" title="O">O</a>(n </span>log<span class="rosetta__text--italic"> n)</span> </big>  with the best pivots, to  <big>  <span class="rosetta__text--italic"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/O" title="O">O</a>(n<sup>2</sup>)</span> </big>  with the worst pivots, where  <big> <span class="rosetta__text--italic">n</span> </big>  is the number of elements in the array.</p>
/// <br/><p class="rosetta__paragraph">This is a simple quicksort algorithm, adapted from Wikipedia.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">function</span> <span class="rosetta__text--italic">quicksort</span>(array)</p>
/// <p class="rosetta__paragraph">less, equal, greater <span class="rosetta__text--bold">:=</span> three empty arrays</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">if</span> length(array) > 1</p>
/// <p class="rosetta__paragraph">pivot <span class="rosetta__text--bold">:=</span> <span class="rosetta__text--italic">select any element of</span> array</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">for each</span> x <span class="rosetta__text--bold">in</span> array</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">if</span> x < pivot <span class="rosetta__text--bold">then add</span> x <span class="rosetta__text--bold">to</span> less</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">if</span> x = pivot <span class="rosetta__text--bold">then add</span> x <span class="rosetta__text--bold">to</span> equal</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">if</span> x > pivot <span class="rosetta__text--bold">then add</span> x <span class="rosetta__text--bold">to</span> greater</p>
/// <p class="rosetta__paragraph">quicksort(less)</p>
/// <p class="rosetta__paragraph">quicksort(greater)</p>
/// <p class="rosetta__paragraph">array <span class="rosetta__text--bold">:=</span> concatenate(less, equal, greater)</p><br/><p class="rosetta__paragraph">A better quicksort algorithm works in place, by swapping elements within the array, to avoid the memory allocation of more arrays.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">function</span> <span class="rosetta__text--italic">quicksort</span>(array)</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">if</span> length(array) > 1</p>
/// <p class="rosetta__paragraph">pivot <span class="rosetta__text--bold">:=</span> <span class="rosetta__text--italic">select any element of</span> array</p>
/// <p class="rosetta__paragraph">left <span class="rosetta__text--bold">:= first index of</span> array</p>
/// <p class="rosetta__paragraph">right <span class="rosetta__text--bold">:=</span> <span class="rosetta__text--bold">last index of</span> array</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">while</span> left ≤ right</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">while</span> array[left] < pivot</p>
/// <p class="rosetta__paragraph">left := left + 1</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">while</span> array[right] > pivot</p>
/// <p class="rosetta__paragraph">right := right - 1</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">if</span> left ≤ right</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">swap</span> array[left] <span class="rosetta__text--bold">with</span> array[right]</p>
/// <p class="rosetta__paragraph">left := left + 1</p>
/// <p class="rosetta__paragraph">right := right - 1</p>
/// <p class="rosetta__paragraph">quicksort(array <span class="rosetta__text--bold">from first index to</span> right)</p>
/// <p class="rosetta__paragraph">quicksort(array <span class="rosetta__text--bold">from</span> left <span class="rosetta__text--bold">to last index</span>)</p><br/><p class="rosetta__paragraph">Quicksort has a reputation as the fastest sort. Optimized variants of quicksort are common features of many languages and libraries. One often contrasts quicksort with  <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/../Merge sort" title="../Merge sort">merge sort</a>,  because both sorts have an average time of  <big> <span class="rosetta__text--italic"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/O" title="O">O</a>(n </span>log<span class="rosetta__text--italic"> n)</span>. </big></p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented"> <span class="rosetta__text--italic">"On average, mergesort does fewer comparisons than quicksort, so it may be better when complicated comparison routines are used. Mergesort also takes advantage of pre-existing order, so it would be favored for using sort() to merge several sorted arrays. On the other hand, quicksort is often faster for small arrays, and on arrays of a few distinct values, repeated many times."</span> — http://perldoc.perl.org/sort.html</span></p><br/><p class="rosetta__paragraph">Quicksort is at one end of the spectrum of divide-and-conquer algorithms, with merge sort at the opposite end.</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Quicksort is a conquer-then-divide algorithm, which does most of the work during the partitioning and the recursive calls. The subsequent reassembly of the sorted partitions involves trivial effort.</li>
/// <li class="rosetta__list-item--unordered">Merge sort is a divide-then-conquer algorithm. The partioning happens in a trivial way, by splitting the input array in half. Most of the work happens during the recursive calls and the merge phase.</li></ul>
/// <br>
/// <p class="rosetta__paragraph">With quicksort, every element in the first partition is less than or equal to every element in the second partition. Therefore, the merge phase of quicksort is so trivial that it needs no mention!</p><br/><p class="rosetta__paragraph">This task has not specified whether to allocate new arrays, or sort in place. This task also has not specified how to choose the pivot element. (Common ways to are to choose the first element, the middle element, or the median of three elements.) Thus there is a variety among the following implementations.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function sort(array, less) {

  function swap(i, j) {
    var t = array[i];
    array[i] = array[j];
    array[j] = t;
  }

  function quicksort(left, right) {

    if (left < right) {
      var pivot = array[left + Math.floor((right - right) / 2)],
          left_new = left,
          right_new = right;

      do {
        while (less(array[left_new], pivot)) {
          left_new += 1;
        }
        while (less(pivot, array[right_new])) {
          right_new -= 1;
        }
        if (left_new <= right_new) {
          swap(left_new, right_new);
          left_new += 1;
          right_new -= 1;
        }
      } while (left_new <= right_new);

      quicksort(left, right_new);
      quicksort(left_new, right);

    }
  }

  quicksort(0, array.length - 1);

  return array;
}

/// rawSolutions:
=={{header|JavaScript}}==

===Imperative===

<lang javascript>function sort(array, less) {

  function swap(i, j) {
    var t = array[i];
    array[i] = array[j];
    array[j] = t;
  }

  function quicksort(left, right) {

    if (left < right) {
      var pivot = array[left + Math.floor((right - right) / 2)],
          left_new = left,
          right_new = right;

      do {
        while (less(array[left_new], pivot)) {
          left_new += 1;
        }
        while (less(pivot, array[right_new])) {
          right_new -= 1;
        }
        if (left_new <= right_new) {
          swap(left_new, right_new);
          left_new += 1;
          right_new -= 1;
        }
      } while (left_new <= right_new);

      quicksort(left, right_new);
      quicksort(left_new, right);

    }
  }

  quicksort(0, array.length - 1);

  return array;
}</lang>

Example:<lang javascript>var test_array = [10, 3, 11, 15, 19, 1];
var sorted_array = sort(test_array, function(a,b) { return a<b; });</lang>

{{Out}}<lang javascript>[ 1, 3, 10, 11, 15, 19 ]</lang>

===Functional===


====ES5====

Emphasising clarity more than run-time optimisation (for which Array.sort() would be a better option)

<lang JavaScript>(function () {
    'use strict';

    // quickSort :: (Ord a) => [a] -> [a]  
    function quickSort(xs) {

        if (xs.length) {
            var h = xs[0],
                t = xs.slice(1),

                lessMore = partition(function (x) {
                    return x <= h;
                }, t),
                less = lessMore[0],
                more = lessMore[1];

            return [].concat.apply(
                [], [quickSort(less), h, quickSort(more)]
            );

        } else return [];
    }


    // partition :: Predicate -> List -> (Matches, nonMatches)
    // partition :: (a -> Bool) -> [a] -> ([a], [a])
    function partition(p, xs) {
        return xs.reduce(function (a, x) {
            return (
                a[p(x) ? 0 : 1].push(x),
                a
            );
        }, [[], []]);
    }

    return quickSort([11.8, 14.1, 21.3, 8.5, 16.7, 5.7])

})();</lang>

{{Out}}

<pre>[5.7, 8.5, 11.8, 14.1, 16.7, 21.3]</pre>

====ES6====

<lang javascript>Array.prototype.quick_sort = function () {
    if (this.length < 2) { return this; }

    var pivot = this[Math.round(this.length / 2)];

    return this.filter(x => x <  pivot)
               .quick_sort()
               .concat(this.filter(x => x == pivot))
               .concat(this.filter(x => x >  pivot).quick_sort());
};</lang>


Or, expressed in terms of a single partition, rather than two consecutive filters:

<lang JavaScript>(() => {
    'use strict';

    // QUICKSORT --------------------------------------------------------------

    // quickSort :: (Ord a) => [a] -> [a]
    const quickSort = xs =>
        xs.length > 1 ? (() => {
            const
                h = xs[0],
                [less, more] = partition(x => x <= h, xs.slice(1));
            return [].concat.apply(
                [], [quickSort(less), h, quickSort(more)]
            );
        })() : xs;


    // GENERIC ----------------------------------------------------------------

    // partition :: Predicate -> List -> (Matches, nonMatches)
    // partition :: (a -> Bool) -> [a] -> ([a], [a])
    const partition = (p, xs) =>
        xs.reduce((a, x) =>
            p(x) ? [a[0].concat(x), a[1]] : [a[0], a[1].concat(x)], [
                [],
                []
            ]);

    // TEST -------------------------------------------------------------------
    return quickSort([11.8, 14.1, 21.3, 8.5, 16.7, 5.7]);
})();</lang>
{{Out}}
<pre>[5.7, 8.5, 11.8, 14.1, 16.7, 21.3]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
