
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Subleq
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/eso:Subleq" title="eso:Subleq">Subleq</a> is an example of a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/One_instruction_set_computer" title="wp: One_instruction_set_computer">One-Instruction Set Computer (OISC)</a>.</p><br/><p class="rosetta__paragraph">It is named after its only instruction, which is <span class="rosetta__text--bold">SU</span>btract and <span class="rosetta__text--bold">B</span>ranch if <span class="rosetta__text--bold">L</span>ess than or <span class="rosetta__text--bold">EQ</span>ual to zero.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task</dt></dl><br/><p class="rosetta__paragraph">Your task is to create an interpreter which emulates such a machine.</p>
/// <br/><p class="rosetta__paragraph">The machine's memory consists of an array of signed integers.  Any reasonable word size is fine, but the memory must be able to hold negative as well as positive numbers.</p><br/><p class="rosetta__paragraph">Execution begins with the instruction pointer aimed at the first word, which is address 0.  It proceeds as follows:</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Let A, B, and C be the value stored in the three consecutive words in memory starting at the instruction pointer.</li></ul>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Advance the instruction pointer 3 words to point at the address after the one containing C.</li></ul>  
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">If A is -1, then a character is read from standard input and its code point stored in the address given by B. C is unused.</li></ul>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">If B is -1, then the number contained in the address given by A is interpreted as a code point and the corresponding character output. C is again unused.</li></ul>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Otherwise, both A and B are treated as the addresses of memory locations.  The number contained in the address given by A is subtracted from the number at the address given by B (and the result stored back in address B).  If the result is zero or negative, the value C becomes the new instruction pointer.</li></ul>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">If the instruction pointer becomes negative, execution halts.</li></ul>
/// <br>Other negative addresses besides -1 may be treated as equivalent to -1, or generate an error, as you see fit.<br/><p class="rosetta__paragraph">Your solution should accept a program to execute on the machine, separately from the input fed to the program itself.  This program should be in raw subleq "machine code" - whitespace-separated decimal numbers, with no symbolic names or other assembly-level extensions, to be loaded into memory starting at address 0.  Show the output of your solution when fed this "Hello, world!" program. (Note that the example assumes ASCII or a superset of it, such as any of the Latin-N character sets or Unicode. You may translate it into another character set if your implementation is on a non-ASCiI-compatible environment.)</p><br/><div class="rosetta__pre-wrap"><pre class="rosetta__pre">15 17 -1 17 -1 -1 16 1 -1 16 3 -1 15 15 0 0 -1 72 101 108 108 111 44 32 119 111 114 108 100 33 10 0</pre></div><br/><p class="rosetta__paragraph">Which corresponds to something like this in a hypothetical assembler language:</p><br/><div class="rosetta__pre-wrap"><pre class="rosetta__pre">start:
///     zero, message, -1
///     message, -1, -1
///     neg1, start+1, -1
///     neg1, start+3, -1
///     zero, zero, start
/// zero: 0
/// neg1: -1
/// message: "Hello, world!\n\0"</pre></div><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc8038
