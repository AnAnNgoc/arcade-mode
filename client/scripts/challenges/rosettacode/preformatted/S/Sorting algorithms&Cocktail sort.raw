
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Sorting algorithms/Cocktail sort
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">The cocktail shaker sort is an improvement on the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Bubble Sort" title="Bubble Sort">Bubble Sort</a>.</p>
/// <p class="rosetta__paragraph">The improvement is basically that values "bubble" both directions through the array, because on each iteration the cocktail shaker sort bubble sorts once forwards and once backwards. Pseudocode for the algorithm (from <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Cocktail sort" title="wp: Cocktail sort">wikipedia</a>):</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">function</span> <span class="rosetta__text--italic">cocktailSort</span>( A : list of sortable items )</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">do</span></p>
/// <p class="rosetta__paragraph">swapped := false</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">for each</span> i <span class="rosetta__text--bold">in</span> 0 <span class="rosetta__text--bold">to</span> length( A ) - 2 <span class="rosetta__text--bold">do</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">if</span> A[ i ] > A[ i+1 ] <span class="rosetta__text--bold">then</span> <span class="rosetta__text--italic">// test whether the two</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--italic">// elements are in the wrong</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--italic">// order</span></p>
/// <p class="rosetta__paragraph">swap( A[ i ], A[ i+1 ] ) <span class="rosetta__text--italic">// let the two elements</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--italic">// change places</span></p>
/// <p class="rosetta__paragraph">swapped := true;</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">if</span> swapped = false <span class="rosetta__text--bold">then</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--italic">// we can exit the outer loop here if no swaps occurred.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">break do-while loop</span>;</p>
/// <p class="rosetta__paragraph">swapped := false</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">for each</span> i <span class="rosetta__text--bold">in</span> length( A ) - 2 <span class="rosetta__text--bold">down to</span> 0 <span class="rosetta__text--bold">do</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">if</span> A[ i ] > A[ i+1 ] <span class="rosetta__text--bold">then</span></p>
/// <p class="rosetta__paragraph">swap( A[ i ], A[ i+1 ] )</p>
/// <p class="rosetta__paragraph">swapped := true;</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">while</span> swapped; <span class="rosetta__text--italic">// if no elements have been swapped,</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--italic">// then the list is sorted</span></p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:

  // Node 5.4.1 tested implementation (ES6)
"use strict";

let arr = [4, 9, 0, 3, 1, 5];
let isSorted = true;
while (isSorted){
    for (let i = 0; i< arr.length - 1;i++){
            if (arr[i] > arr[i + 1])
             {
                let temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i+1] = temp;
                isSorted = true;
             }
    }

    if (!isSorted)
        break;
    
    isSorted = false;

    for (let j = arr.length - 1; j > 0; j--){
            if (arr[j-1] > arr[j])
             {
                let temp = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = temp;
                isSorted = true;
             }
    }
}
console.log(arr);

}

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>
  // Node 5.4.1 tested implementation (ES6)
"use strict";

let arr = [4, 9, 0, 3, 1, 5];
let isSorted = true;
while (isSorted){
    for (let i = 0; i< arr.length - 1;i++){
            if (arr[i] > arr[i + 1])
             {
                let temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i+1] = temp;
                isSorted = true;
             }
    }

    if (!isSorted)
        break;
    
    isSorted = false;

    for (let j = arr.length - 1; j > 0; j--){
            if (arr[j-1] > arr[j])
             {
                let temp = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = temp;
                isSorted = true;
             }
    }
}
console.log(arr);

}</lang>


{{out}}
<pre>
 [0, 1, 3, 4, 5, 9]
</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc8004
