
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: String interpolation (included)
/// type: rosetta-code

/// categories:
/// String manipulation
/// Simple

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/><p class="rosetta__paragraph">Given a string and defined variables or values, <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/String literal#Variable_interpolation" title="wp: String literal#Variable_interpolation">string interpolation</a> is the replacement of defined character sequences in the string by values or variable values.</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented"> For example, given an original string of <code>"Mary had a X lamb."</code>, a value of "big", and if the language replaces X in its interpolation routine, then the result of its interpolation would be the string <code>"Mary had a big lamb"</code>.</span></p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">(Languages usually include an infrequently used character or sequence of characters to indicate what is to be replaced such as "%", or "#" rather than "X").</span></p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">The task is to: </dt></dl>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">Use your languages inbuilt string interpolation abilities to interpolate a string missing the text <code>"little"</code> which is held in a variable, to produce the output string <code>"Mary had a little lamb"</code>.</li>
/// <li class="rosetta__list-item--ordered">If possible, give links to further documentation on your languages string interpolation features.</li></ol>
/// <p class="rosetta__paragraph"><small>Note: The task is not to create a string interpolation routine, but to show a language's built-in capability.</small></p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var original = "Mary had a X lamb";
var little = "little";
var replaced = original.replace("X", little); //does not change the original string

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>var original = "Mary had a X lamb";
var little = "little";
var replaced = original.replace("X", little); //does not change the original string</lang>

Or,

<lang javascript>// ECMAScript 6
var X = "little";
var replaced = `Mary had a ${X} lamb`;</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
