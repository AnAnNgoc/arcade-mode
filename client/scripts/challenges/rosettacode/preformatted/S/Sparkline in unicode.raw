
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Sparkline in unicode
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">A <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Sparkline" title="wp: Sparkline">sparkline</a> is a graph of successive values laid out horizontally</p>
/// <p class="rosetta__paragraph">where the height of the line is proportional to the values in succession.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Use the following series of Unicode characters to create a program</p>
/// <p class="rosetta__paragraph">that takes a series of numbers separated by one or more whitespace or comma characters</p>
/// <p class="rosetta__paragraph">and generates a sparkline-type bar graph of the values on a single line of output.</p><br/><p class="rosetta__paragraph">The eight characters: '▁▂▃▄▅▆▇█'<br></p>
/// <p class="rosetta__paragraph">(Unicode values U+2581 through U+2588).</p><br/><p class="rosetta__paragraph">Use your program to show sparklines for the following input,</p>
/// <p class="rosetta__paragraph">here on this page:</p>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">1 2 3 4 5 6 7 8 7 6 5 4 3 2 1</li>
/// <li class="rosetta__list-item--ordered">1.5, 0.5 3.5, 2.5 5.5, 4.5 7.5, 6.5 </li></ol><span class="rosetta__text--indented">(note the mix of separators in this second case)!</span><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Notes: </dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">A space is not part of the generated sparkline.</li>
/// <li class="rosetta__list-item--unordered">The sparkline may be accompanied by simple statistics of the data such as its range.</li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(() => {
    'use strict';

    // sparkLine :: [Num] -> String
    let sparkLine = xs => {
            let min = minimumBy(numericOrdering, xs),
                max = maximumBy(numericOrdering, xs),
                range = max - min;

            return xs.map(x => ((x - min) * 7) / range)
                .map(
                    n => (n >= 0 && n < 8) ? '▁▂▃▄▅▆▇█'
                    .split('')[Math.round(n)] : undefined
                ).join('');
        },

        // maximumBy :: (a -> a -> Ordering) -> [a] -> a
        maximumBy = (f, xs) =>
            xs.reduce((a, x) =>
                a === undefined ? x : (
                    f(x, a) > 0 ? x : a
                ),
                undefined
            ),


        // minimumBy :: (a -> a -> Ordering) -> [a] -> a
        minimumBy = (f, xs) =>
            xs.reduce((a, x) =>
                a === undefined ? x : (
                    f(x, a) < 0 ? x : a
                ),
                undefined
            ),

        numericOrdering = (a, b) => a < b ? -1 : (a > b ? 1 : 0);

    // TEST

    return ["1 2 3 4 5 6 7 8 7 6 5 4 3 2 1",
        "1.5, 0.5 3.5, 2.5 5.5, 4.5 7.5, 6.5",
        "3 2 1 0 -1 -2 -3 -4 -3 -2 -1 0 1 2 3",
        "-1000 100 1000 500 200 -400 -700 621 -189 3"
    ].map(
        s => s.split(/[,\s]+/)
        .map(x => parseFloat(x, 10))
    ).map(sparkLine);

})();

/// rawSolutions:
=={{header|JavaScript}}==

===ES6===

<lang JavaScript>(() => {
    'use strict';

    // sparkLine :: [Num] -> String
    let sparkLine = xs => {
            let min = minimumBy(numericOrdering, xs),
                max = maximumBy(numericOrdering, xs),
                range = max - min;

            return xs.map(x => ((x - min) * 7) / range)
                .map(
                    n => (n >= 0 && n < 8) ? '▁▂▃▄▅▆▇█'
                    .split('')[Math.round(n)] : undefined
                ).join('');
        },

        // maximumBy :: (a -> a -> Ordering) -> [a] -> a
        maximumBy = (f, xs) =>
            xs.reduce((a, x) =>
                a === undefined ? x : (
                    f(x, a) > 0 ? x : a
                ),
                undefined
            ),


        // minimumBy :: (a -> a -> Ordering) -> [a] -> a
        minimumBy = (f, xs) =>
            xs.reduce((a, x) =>
                a === undefined ? x : (
                    f(x, a) < 0 ? x : a
                ),
                undefined
            ),

        numericOrdering = (a, b) => a < b ? -1 : (a > b ? 1 : 0);

    // TEST

    return ["1 2 3 4 5 6 7 8 7 6 5 4 3 2 1",
        "1.5, 0.5 3.5, 2.5 5.5, 4.5 7.5, 6.5",
        "3 2 1 0 -1 -2 -3 -4 -3 -2 -1 0 1 2 3",
        "-1000 100 1000 500 200 -400 -700 621 -189 3"
    ].map(
        s => s.split(/[,\s]+/)
        .map(x => parseFloat(x, 10))
    ).map(sparkLine);

})();</lang>


<pre>["▁▂▃▄▅▆▇█▇▆▅▄▃▂▁","▂▁▄▃▆▅█▇","█▇▆▅▄▃▂▁▂▃▄▅▆▇█","▁▅█▆▅▃▂▇▄▅"]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc8018
