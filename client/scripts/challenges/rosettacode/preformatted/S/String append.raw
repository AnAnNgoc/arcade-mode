
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: String append
/// type: rosetta-code

/// categories:
/// String manipulation
///  String manipulation
/// Simple

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <br/><p class="rosetta__paragraph">Most languages provide a way to concatenate two string values, but some languages also provide a convenient way to append in-place to an existing string variable without referring to the variable twice.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Create a string variable equal to any text value.</p><br/><p class="rosetta__paragraph">Append the string variable with another string literal in the most idiomatic way, without double reference if your language supports it.</p><br/><p class="rosetta__paragraph">Show the contents of the variable after the append operation.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var s1 = "Hello";
s1 += ", World!";
print(s1);

var s2 = "Goodbye";
// concat() returns the strings together, but doesn't edit existing string
// concat can also have multiple parameters
print(s2.concat(", World!"));

/// rawSolutions:
=={{header|JavaScript}}==
{{works with|Rhino}}
{{works with|SpiderMonkey}}
<lang JavaScript>var s1 = "Hello";
s1 += ", World!";
print(s1);

var s2 = "Goodbye";
// concat() returns the strings together, but doesn't edit existing string
// concat can also have multiple parameters
print(s2.concat(", World!"));</lang>
{{out}}
<pre>
"Hello, World!"
"Goodbye, World!"
</pre>


/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
