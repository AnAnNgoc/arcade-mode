
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Sorting algorithms/Bogosort
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Bogosort" title="wp: Bogosort">Bogosort</a> a list of numbers.</p>
/// <br/><p class="rosetta__paragraph">Bogosort simply shuffles a collection randomly until it is sorted.</p><br/><p class="rosetta__paragraph">"Bogosort" is a perversely inefficient algorithm only used as an in-joke.</p><br/><p class="rosetta__paragraph">Its average run-time is  O(n!)  because the chance that any given shuffle of a set will end up in sorted order is about one in  <span class="rosetta__text--italic">n</span>  factorial,  and the worst case is infinite since there's no guarantee that a random shuffling will ever produce a sorted sequence.</p><br/><p class="rosetta__paragraph">Its best case is  O(n)  since a single pass through the elements may suffice to order them.</p>
/// <br/><p class="rosetta__paragraph">Pseudocode:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">while not</span> InOrder(list) <span class="rosetta__text--bold">do</span></p>
/// <p class="rosetta__paragraph">Shuffle(list)</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">done</span></p><br/><br>
/// <p class="rosetta__paragraph">The <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Knuth shuffle" title="Knuth shuffle">Knuth shuffle</a> may be used to implement the shuffle part of this algorithm.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
shuffle = function(v) {
    for(var j, x, i = v.length; i; j = Math.floor(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x);
    return v;
};

isSorted = function(v){
    for(var i=1; i<v.length; i++) {
        if (v[i-1] > v[i]) { return false; }
    }
    return true;
}
		
bogosort = function(v){
    var sorted = false;
    while(sorted == false){
        v = shuffle(v);
        sorted = isSorted(v);
    }
    return v;
}

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>shuffle = function(v) {
    for(var j, x, i = v.length; i; j = Math.floor(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x);
    return v;
};

isSorted = function(v){
    for(var i=1; i<v.length; i++) {
        if (v[i-1] > v[i]) { return false; }
    }
    return true;
}
		
bogosort = function(v){
    var sorted = false;
    while(sorted == false){
        v = shuffle(v);
        sorted = isSorted(v);
    }
    return v;
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc8002
