
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Exceptions/Catch an exception thrown in a nested call
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <br/>
/// <p class="rosetta__paragraph">Show how to create a user-defined exception  and  show how to catch an exception raised from several nested calls away.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">#  Create two user-defined exceptions,  <span class="rosetta__text--bold">U0</span>  and  <span class="rosetta__text--bold">U1</span>. </span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">#  Have function  <span class="rosetta__text--bold">foo</span>  call function  <span class="rosetta__text--bold">bar</span>  twice.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">#  Have function  <span class="rosetta__text--bold">bar</span>  call function  <span class="rosetta__text--bold">baz</span>. </span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">#  Arrange for function  <span class="rosetta__text--bold">baz</span>  to raise, or throw exception  <span class="rosetta__text--bold">U0</span>  on its first call, then exception  <span class="rosetta__text--bold">U1</span>  on its second.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">#  Function  <span class="rosetta__text--bold">foo</span>  should catch only exception  <span class="rosetta__text--bold">U0</span>,  not  <span class="rosetta__text--bold">U1</span>.</span></p><br/><br>
/// <p class="rosetta__paragraph">Show/describe what happens when the program is run.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function U() {}
U.prototype.toString = function(){return this.className;}

function U0() { 
    this.className = arguments.callee.name; 
}
U0.prototype = new U();

function U1() {
    this.className = arguments.callee.name; 
}
U1.prototype = new U();

function foo() {
    for (var i = 1; i <= 2; i++) {
        try {
            bar();
        }
        catch(e if e instanceof U0) {
            print("caught exception " + e);
        }
    }
}

function bar() {
    baz();
}

function baz() {
    // during the first call, redefine the function for subsequent calls
    baz = function() {throw(new U1());}
    throw(new U0());
}

foo();

/// rawSolutions:
=={{header|JavaScript}}==
{{works with|Rhino}}

{{works with|SpiderMonkey}}

{{works with|Firefox}} except for the print() function

The <code>callee.name</code> property, and the <code>catch(e if ...)</code> statement are Mozilla JavaScript extensions.

<lang javascript>function U() {}
U.prototype.toString = function(){return this.className;}

function U0() { 
    this.className = arguments.callee.name; 
}
U0.prototype = new U();

function U1() {
    this.className = arguments.callee.name; 
}
U1.prototype = new U();

function foo() {
    for (var i = 1; i <= 2; i++) {
        try {
            bar();
        }
        catch(e if e instanceof U0) {
            print("caught exception " + e);
        }
    }
}

function bar() {
    baz();
}

function baz() {
    // during the first call, redefine the function for subsequent calls
    baz = function() {throw(new U1());}
    throw(new U0());
}

foo();</lang>
{{out}} from [[Rhino]]:
<pre>caught exception U0
js: "nested_calls.js", line 31: exception from uncaught JavaScript throw: U1</pre>
{{out}} from [[SpiderMonkey]]:
<pre>caught exception U0
uncaught exception: U1</pre>


/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
