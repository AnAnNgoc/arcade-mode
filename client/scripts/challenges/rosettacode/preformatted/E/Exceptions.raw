
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Exceptions
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <br/>
/// <p class="rosetta__paragraph">This task is to give an example of an exception handling routine</p>
/// <p class="rosetta__paragraph">and to "throw" a new exception.</p><br/><p class="rosetta__paragraph">Cf. <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Exceptions Through Nested Calls" title="Exceptions Through Nested Calls">Exceptions Through Nested Calls</a></p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function doStuff() {
  throw new Error('Not implemented!');
}

/// rawSolutions:
=={{header|JavaScript}}==

'''Throwing exceptions'''

<lang javascript>function doStuff() {
  throw new Error('Not implemented!');
}</lang>

'''Catching exceptions'''

<lang javascript>try {
  element.attachEvent('onclick', doStuff);
}
catch(e if e instanceof TypeError) {
  element.addEventListener('click', doStuff, false);
}
finally {
  eventSetup = true;
}</lang>


/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
