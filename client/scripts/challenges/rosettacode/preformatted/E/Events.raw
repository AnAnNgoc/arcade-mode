
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Events
/// type: rosetta-code

/// categories:
/// Encyclopedia

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">Event</span> is a synchronization object. An event has two states <span class="rosetta__text--italic">signaled</span> and <span class="rosetta__text--italic">reset</span>. A <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a> may await for the event to enter the desired state, usually the <span class="rosetta__text--italic">signaled</span> state. It is released once the state is entered. Releasing waiting tasks is called <span class="rosetta__text--italic">event notification</span>. Programmatically controlled events can be set by a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a> into one of its states.</p><br/><p class="rosetta__paragraph">In <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/concurrent programming" title="concurrent programming">concurrent programming</a> event also refers to a notification that some state has been reached through an asynchronous activity. The source of the event can be:</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><span class="rosetta__text--italic">internal</span>, from another <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a>, programmatically;</li>
/// <li class="rosetta__list-item--unordered"><span class="rosetta__text--italic">external</span>, from the hardware, such as user input, timer, etc. Signaling an event from the hardware is accomplished by means of hardware <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/interrupts" title="interrupts">interrupts</a>.</li></ul>
/// <p class="rosetta__paragraph">Event is a low-level synchronization mechanism. It neither identify the state that caused it signaled, nor the source of, nor who is the subject of notification. Events augmented by data and/or publisher-subscriber schemes are often referred as <span class="rosetta__text--bold">messages</span>, <span class="rosetta__text--bold">signals</span> etc.</p><br/><p class="rosetta__paragraph">In the context of general programming <span class="rosetta__text--bold">event-driven architecture</span> refers to a design that deploy events in order to synchronize <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a>s with the asynchronous activities they must be aware of. The opposite approach is <span class="rosetta__text--bold">polling</span> sometimes called <span class="rosetta__text--bold">busy waiting</span>, when the synchronization is achieved by an explicit periodic querying the state of the activity. As the name suggests busy waiting consumes system resources even when the external activity does not change its state.</p><br/><p class="rosetta__paragraph">Event-driven architectures are widely used in GUI design and SCADA systems. They are flexible and have relatively short response times. At the same time event-driven architectures suffer to the problems related to their unpredictability. They face <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/race condition" title="race condition">race condition</a>, deadlocking, live locks and priority inversion. For this reason <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/real-time computing" title="real-time computing">real-time</a> systems tend to polling schemes, trading performance for predictability in the worst case scenario.</p><br/><p class="rosetta__paragraph">=Variants of events=</p><br/><p class="rosetta__paragraph">==Manual-reset event==</p>
/// <p class="rosetta__paragraph">This event changes its state by an explicit request of a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a>. I.e. once signaled it remains in this state until it will be explicitly reset.</p><br/><p class="rosetta__paragraph">==Pulse event==</p>
/// <p class="rosetta__paragraph">A pulse event when signaled releases all <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a>s awaiting it and then is automatically reset.</p><br/><p class="rosetta__paragraph">=Sample implementations / APIs=</p>
/// <p class="rosetta__paragraph">Show how a manual-reset event can be implemented in the language or else use an API to a library that provides events. Write a program that waits 1s and then signals the event to a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a> waiting for the event.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
YUI().use('event-custom', function(Y) {
    // add a custom event:
    Y.on('my:event', function () {
        alert("Event fired");
    });
    // fire the event after one second:
    setTimeout(function () {
        Y.fire('my:event');
    }, 1000);
});

/// rawSolutions:
=={{header|JavaScript}}==
An example using the [[wp:Yahoo!_UI_Library|YUI]] library:
<lang javascript>YUI().use('event-custom', function(Y) {
    // add a custom event:
    Y.on('my:event', function () {
        alert("Event fired");
    });
    // fire the event after one second:
    setTimeout(function () {
        Y.fire('my:event');
    }, 1000);
});</lang>
An example simulating [[wp:Document_Object_Model|DOM]] events:
<lang javascript>YUI().use('node-event-simulate', function(Y) {
    // add a click event handler to a DOM node with id "button":
    Y.one("#button").on("click", function (e) {
        alert("Button clicked");
    });
    // simulate the click after one second:
    setTimeout(function () {
        Y.one("#button").simulate("click");
    }, 1000);
});</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
