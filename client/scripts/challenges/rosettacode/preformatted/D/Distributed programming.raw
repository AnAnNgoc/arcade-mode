
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Distributed programming
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">Write two programs (or one program with two modes) which run on networked computers, and send some messages between them.</p><br/><p class="rosetta__paragraph">The protocol used may be language-specific or not, and should be <span class="rosetta__text--bold">suitable for general distributed programming</span>; that is, the <span class="rosetta__text--italic">protocol</span> should be generic (not designed just for the particular example application), readily capable of handling the independent communications of many different components of a single application, and the transferring of arbitrary data structures natural for the language.</p><br/><p class="rosetta__paragraph">This task is intended to demonstrate high-level communication facilities beyond just creating <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/sockets" title="sockets">sockets</a>.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var net = require('net')

var server = net.createServer(function (c){
  c.write('hello\r\n')
  c.pipe(c) // echo messages back
})

server.listen(3000, 'localhost')


/// rawSolutions:
=={{header|JavaScript}}==

{{works with|node.js}}

===Server===

<lang javascript>var net = require('net')

var server = net.createServer(function (c){
  c.write('hello\r\n')
  c.pipe(c) // echo messages back
})

server.listen(3000, 'localhost')
</lang>

===Client===
<lang javascript>var net = require('net')

conn = net.createConnection(3000, '192.168.1.x')

conn.on('connect', function(){
	console.log('connected')
	conn.write('test')
})

conn.on('data', function(msg){
	console.log(msg.toString())
})</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
