
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Deepcopy
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Demonstrate how to copy data structures containing complex heterogeneous and cyclic semantics.</p><br/><p class="rosetta__paragraph">This is often referred to as <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Deep_copy#Deep_copy" title="wp: Deep_copy#Deep_copy">deep copying</a>, and is normally required where structures are mutable and to ensure that independent copies can be manipulated without side-effects.</p><br/><p class="rosetta__paragraph">If this facility is not built into the language, it is permissible to use functions from a common library, or a coded procedure.</p>
/// <br/><p class="rosetta__paragraph">The task should show:</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Relevant semantics of structures, such as their <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Homogeneity and heterogeneity" title="wp: Homogeneity and heterogeneity">homogeneous or heterogeneous</a> properties, or containment of (self- or mutual-reference) cycles.</li></ul>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Any limitations of the method.</li></ul>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">That the structure and its copy are different.</li></ul>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Suitable links to external documentation for common libraries.</li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:

var deepcopy = function(o){
  return JSON.parse(JSON.stringify(src));
};

var src = {foo:0,bar:[0,1]};
print(JSON.stringify(src));
var dst = deepcopy(src);
print(JSON.stringify(src));


/// rawSolutions:
=={{header|JavaScript}}==
You can use JSON for ordinary objects.
<lang JavaScript>
var deepcopy = function(o){
  return JSON.parse(JSON.stringify(src));
};

var src = {foo:0,bar:[0,1]};
print(JSON.stringify(src));
var dst = deepcopy(src);
print(JSON.stringify(src));
</lang>
You can go further if you have <code>uneval()</code>.  You can even deep copy objects with cyclic references.
<lang JavaScript>
var deepcopy = function(o){
  return eval(uneval(o));
};
var src = {foo:0,bar:[0,1]};
src['baz'] = src;
print(uneval(src));
var dst = deepcopy(src);
print(uneval(src));
</lang>


/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
