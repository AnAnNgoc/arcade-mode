
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Jaro distance
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">The Jaro distance is a measure of similarity between two strings.</p><br/><p class="rosetta__paragraph">The higher the Jaro distance for two strings is, the more similar the strings are.</p><br/><p class="rosetta__paragraph">The score is normalized such that  <span class="rosetta__text--bold">0</span>  equates to no similarity and  <span class="rosetta__text--bold">1</span>  is an exact match.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">;Definition</dt></dl><br/><p class="rosetta__paragraph">The Jaro distance  $d_j$  of two given strings  $s_1$  and  $s_2$  is</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented"> $d_j = \left\{</span></p><br/><p class="rosetta__paragraph">\begin{array}{l l}</p>
/// <p class="rosetta__paragraph">0 & \text{if }m = 0\\</p>
/// <p class="rosetta__paragraph">\frac{1}{3}\left(\frac{m}{|s_1|} + \frac{m}{|s_2|} + \frac{m-t}{m}\right) & \text{otherwise} \end{array} \right.$</p><br/><p class="rosetta__paragraph">Where:</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">$m$  is the number of <span class="rosetta__text--italic">matching characters</span>;</li>
/// <li class="rosetta__list-item--unordered">$t$  is half the number of <span class="rosetta__text--italic">transpositions</span>.</li></ul><br/><p class="rosetta__paragraph">Two characters from  $s_1$  and  $s_2$  respectively, are considered <span class="rosetta__text--italic">matching</span> only if they are the same and not farther than  $\left\lfloor\frac{\max(|s_1|,|s_2|)}{2}\right\rfloor-1$.</p><br/><p class="rosetta__paragraph">Each character of  $s_1$  is compared with all its matching</p>
/// <p class="rosetta__paragraph">characters in  $s_2$.</p><br/><p class="rosetta__paragraph">The number of matching (but different sequence order) characters</p>
/// <p class="rosetta__paragraph">divided by 2 defines the number of <span class="rosetta__text--italic">transpositions</span>.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">;Example</dt></dl><br/><p class="rosetta__paragraph">Given the strings  $s_1$  <span class="rosetta__text--italic">DWAYNE</span>  and  $s_2$  <span class="rosetta__text--italic">DUANE</span>  we find:</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">$m = 4$</li>
/// <li class="rosetta__list-item--unordered">$|s_1| = 6$</li>
/// <li class="rosetta__list-item--unordered">$|s_2| = 5$</li>
/// <li class="rosetta__list-item--unordered">$t = 0$</li></ul><br/><p class="rosetta__paragraph">We find a Jaro score of:</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented"> $d_j = \frac{1}{3}\left(\frac{4}{6} + \frac{4}{5} + \frac{4-0}{4}\right) = 0.822$</span></p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task</dt></dl><br/><p class="rosetta__paragraph">Implement the Jaro-distance algorithm and show the distances for each of the following pairs:</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">("MARTHA", "MARHTA")</li>
/// <li class="rosetta__list-item--unordered">("DIXON", "DICKSONX")</li>
/// <li class="rosetta__list-item--unordered">("JELLYFISH", "SMELLYFISH")</li></ul><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title"> See also</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Jaro-Winkler_distance" title="wp: Jaro-Winkler_distance">Jaroâ€“Winkler distance</a> on Wikipedia.</li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
