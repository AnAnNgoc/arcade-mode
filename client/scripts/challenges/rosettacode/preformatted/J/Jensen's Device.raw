
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Jensen's Device
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">This task is an exercise in <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Call-by-name#Call_by_name" title="wp: Call-by-name#Call_by_name">call by name</a>.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Jensen's Device</span> is a computer programming technique devised by Danish computer scientist <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Jørn_Jensen" title="wp: Jørn_Jensen">Jørn Jensen</a> after studying the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/ALGOL 60" title="ALGOL 60">ALGOL 60</a> Report.</p><br/><p class="rosetta__paragraph">The following program was proposed to illustrate the technique. It computes the 100th <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Harmonic_number" title="wp: Harmonic_number">harmonic number</a>:</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">begin</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">integer</span> i;</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">real procedure</span> sum (i, lo, hi, term);</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">value</span> lo, hi;</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">integer</span> i, lo, hi;</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">real</span> term;</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">comment</span> term is passed by-name, and so is i;</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">begin</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">real</span> temp;</p>
/// <p class="rosetta__paragraph">temp := 0;</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">for</span> i := lo <span class="rosetta__text--bold">step</span> 1 <span class="rosetta__text--bold">until</span> hi <span class="rosetta__text--bold">do</span></p>
/// <p class="rosetta__paragraph">temp := temp + term;</p>
/// <p class="rosetta__paragraph">sum := temp</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">end</span>;</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">comment</span> note the correspondence between the mathematical notation and the call to sum;</p>
/// <p class="rosetta__paragraph">print (sum (i, 1, 100, 1/i))</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">end</span></p><br/><p class="rosetta__paragraph">The above exploits <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Call-by-name#Call_by_name" title="wp: Call-by-name#Call_by_name">call by name</a> to produce the correct answer (5.187...). It depends on the assumption that an expression passed as an actual parameter to a procedure would be re-evaluated in the caller's context every time the corresponding formal parameter's value was required. If the last parameter to <span class="rosetta__text--italic">sum</span> had been passed by value, and assuming the initial value of <span class="rosetta__text--italic">i</span> were 1, the result would have been 100 &times; 1/1 = 100.</p><br/><p class="rosetta__paragraph">Moreover, the <span class="rosetta__text--italic">first</span> parameter to <span class="rosetta__text--italic">sum</span>, representing the "bound" variable of the summation, must also be passed by name (or at least by reference), otherwise changes to it (made within <span class="rosetta__text--italic">sum</span>) would not be visible in the caller's context when computing each of the values to be added.</p>
/// <p class="rosetta__paragraph">(On the other hand, the global variable does not have to use the same identifier, in this case <span class="rosetta__text--italic">i</span>, as the formal parameter.)</p><br/><p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Donald_Knuth" title="wp: Donald_Knuth">Donald Knuth</a> later proposed the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Man or boy test" title="Man or boy test">Man or Boy Test</a> as a more rigorous exercise.</p>
/// <br><br>
/// </div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var obj;

function sum(o, lo, hi, term) {
  var tmp = 0;
  for (o.val = lo; o.val <= hi; o.val++)
    tmp += term();
  return tmp;
}

obj = {val: 0};
alert(sum(obj, 1, 100, function() {return 1 / obj.val}));

/// rawSolutions:
=={{header|JavaScript}}==
{{trans|C}}

Uses an object ''o'' instead of integer pointer ''i'', as the C example does.

<lang javascript>var obj;

function sum(o, lo, hi, term) {
  var tmp = 0;
  for (o.val = lo; o.val <= hi; o.val++)
    tmp += term();
  return tmp;
}

obj = {val: 0};
alert(sum(obj, 1, 100, function() {return 1 / obj.val}));</lang>
The alert shows us '5.187377517639621'.



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
