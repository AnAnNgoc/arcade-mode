
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Jump anywhere
/// type: rosetta-code

/// categories:
/// Branches
/// Simple

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Imperative programming" title="Imperative programming">Imperative programs</a> like to jump around, but some languages restrict these jumps. Many structured languages restrict their <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/conditional structures" title="conditional structures">conditional structures</a> and <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/loops" title="loops">loops</a> to <span class="rosetta__text--italic">local jumps</span> within a function. Some assembly languages limit certain jumps or branches to a small range.</p><br/><p class="rosetta__paragraph">This task is demonstrate a local jump and a global jump and the various other types of jumps that the language supports.</p>
/// <p class="rosetta__paragraph">For the purpose of this task, the jumps need not be used for a single purpose and you have the freedom to use these jumps for different purposes.</p>
/// <p class="rosetta__paragraph">You may also defer to more specific tasks, like <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Exceptions" title="Exceptions">Exceptions</a> or <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Generator" title="Generator">Generator</a>.</p>
/// <p class="rosetta__paragraph">This task provides a "grab bag" for several types of jumps. There are <span class="rosetta__text--italic">non-local jumps</span> across function calls, or <span class="rosetta__text--italic">long jumps</span> to anywhere within a program. Anywhere means not only to the tops of functions!</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Some languages can <span class="rosetta__text--italic">go to</span> any global label in a program.</li>
/// <li class="rosetta__list-item--unordered">Some languages can break multiple function calls, also known as <span class="rosetta__text--italic">unwinding the call stack</span>.</li>
/// <li class="rosetta__list-item--unordered">Some languages can save a <span class="rosetta__text--italic">continuation</span>. The program can later continue from the same place. So you can jump anywhere, but only if you have a previous visit there (to save the continuation).</li></ul>
/// <br>These jumps are not all alike. 
/// <p class="rosetta__paragraph">A simple <span class="rosetta__text--italic">goto</span> never touches the call stack.</p>
/// <p class="rosetta__paragraph">A continuation saves the call stack, so you can continue a function call after it ends.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Use your language to demonstrate the various types of jumps that it supports.</p><br/><p class="rosetta__paragraph">Because the possibilities vary by language, this task is not specific.</p>
/// <p class="rosetta__paragraph">You have the freedom to use these jumps for different purposes.</p>
/// <p class="rosetta__paragraph">You may also defer to more specific tasks, like <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Exceptions" title="Exceptions">Exceptions</a> or <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Generator" title="Generator">Generator</a>.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
