
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Joystick position
/// type: rosetta-code

/// categories:
/// Hardware

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">The task is to determine the joystick position and represent this on the display via a crosshair.</p>
/// <p class="rosetta__paragraph">For a centred joystick, the crosshair should appear in the centre of the screen.</p>
/// <p class="rosetta__paragraph">If the joystick is pushed left or right, then the cross hair should move left or right according to the extent that the joystick is pushed.</p><br/><p class="rosetta__paragraph">If the joystick is pushed forward or pulled back, then the crosshair should move up or down according to the extent that that joystick is pushed or pulled.</p>
/// <p class="rosetta__paragraph">The edges of the display represent maximum extents for joystick movement.</p><br/><p class="rosetta__paragraph">For example, a joystick pushed fully forward would raise the crosshair to the top centre of the screen.</p><br/><p class="rosetta__paragraph">A joystick pulled backwards and to the right would move the crosshair to the bottom right of the screen (except for a small area reserved to show joystick status). Implementations can use a graphical display method to produce the crosshair, or alternatively represent the crosshair using a plus symbol on</p>
/// <p class="rosetta__paragraph">a terminal, and move the plus symbol position according to the joystick.</p>
/// <p class="rosetta__paragraph">The bottom part of the display can hide or show an alphanumeric sequence to represent the buttons pressed.</p><br/><p class="rosetta__paragraph">For example, if pushbuttons 1,4 and 10 are depressed, we could display "1 4 A".</p><br/><p class="rosetta__paragraph">The implemented code should continue to redraw the crosshair according to the joystick position and show the current pushbutton statuses until the task is terminated.</p>
/// <p class="rosetta__paragraph">Digital joysticks that produce no extent data, should have their position indicated as full extent movement of the crosshair.</p><br/><p class="rosetta__paragraph">For the purpose of this task, we assume that the joystick is calibrated and that the first joystick is being used. <br></p>
/// <p class="rosetta__paragraph">The task implementer could at their option provide a solution that includes a joystick selection facility, enabling the user to choose which joystick is to be used for this task.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
