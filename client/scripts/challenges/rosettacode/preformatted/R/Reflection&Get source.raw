
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Reflection/Get source
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">The goal is to get the source code or file path and line number where a programming object (e.g. module, class, function, method) is defined.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function foo() {...}
foo.toString();
// "function foo() {...}"


/// rawSolutions:
=={{header|JavaScript}}==
<code>Function.toString()</code> will return the source code for user-defined functions.

<lang javascript>function foo() {...}
foo.toString();
// "function foo() {...}"
</lang>

For native functions, the function body typically will be a syntactically invalid string indicating the function is native. This behavior isn't part of any ECMAScript standard, but is common practice.
<lang javascript>Math.sqrt.toString();
// "function sqrt() { [native code] }"
</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
