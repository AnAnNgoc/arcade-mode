
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Rate counter
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><p class="rosetta__paragraph">Counting the frequency at which something occurs is a common activity in measuring performance and managing resources. In this task, we assume that there is some job which we want to perform repeatedly, and we want to know how quickly these jobs are being performed.</p><br/><p class="rosetta__paragraph">Of interest is the code that performs the actual measurements. Any other code (such as job implementation or dispatching) that is required to demonstrate the rate tracking is helpful, but not the focus.</p><br/><p class="rosetta__paragraph">Multiple approaches are allowed (even preferable), so long as they can accomplish these goals:</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Run N seconds worth of jobs and/or Y jobs.</li>
/// <li class="rosetta__list-item--unordered">Report at least three distinct times.</li></ul>
/// <br>Be aware of the precision and accuracy limitations of your timing mechanisms, and document them if you can.<br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">See also:</span> <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/System time" title="System time">System time</a>, <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Time a function" title="Time a function">Time a function</a></p>
/// <br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function millis() { // Gets current time in milliseconds.
  return (new Date()).getTime();
}

/* Executes function 'func' n times, returns array of execution times. */
function benchmark(n, func, args) {
  var times = [];
  for (var i=0; i<n; i++) {
    var m = millis();
    func.apply(func, args);
    times.push(millis() - m);
  }
  return times;
}

/// rawSolutions:
=={{header|JavaScript}}==
The ''benchmark'' function below executes a given function n times, calling it with the specified arguments. After execution of all functions, it returns an array with the execution time of each execution, in milliseconds.

<lang javascript>function millis() { // Gets current time in milliseconds.
  return (new Date()).getTime();
}

/* Executes function 'func' n times, returns array of execution times. */
function benchmark(n, func, args) {
  var times = [];
  for (var i=0; i<n; i++) {
    var m = millis();
    func.apply(func, args);
    times.push(millis() - m);
  }
  return times;
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
