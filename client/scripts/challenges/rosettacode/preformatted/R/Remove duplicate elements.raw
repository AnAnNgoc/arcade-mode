
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Remove duplicate elements
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><p class="rosetta__paragraph">Given an Array, derive a sequence of elements in which all duplicates are removed.</p><br/><p class="rosetta__paragraph">There are basically three approaches seen here:</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Put the elements into a hash table which does not allow duplicates. The complexity is O(<span class="rosetta__text--italic">n</span>) on average, and O(<span class="rosetta__text--italic">n</span><sup>2</sup>) worst case. This approach requires a hash function for your type (which is compatible with equality), either built-in to your language, or provided by the user.</li>
/// <li class="rosetta__list-item--unordered">Sort the elements and remove consecutive duplicate elements. The complexity of the best sorting algorithms is O(<span class="rosetta__text--italic">n</span> log <span class="rosetta__text--italic">n</span>). This approach requires that your type be "comparable", i.e., have an ordering. Putting the elements into a self-balancing binary search tree is a special case of sorting.</li>
/// <li class="rosetta__list-item--unordered">Go through the list, and for each element, check the rest of the list to see if it appears again, and discard it if it does. The complexity is O(<span class="rosetta__text--italic">n</span><sup>2</sup>). The up-shot is that this always works on any type (provided that you can test for equality).</li></ul><br><br>
/// </div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function unique(ary) {
    // concat() with no args is a way to clone an array
    var u = ary.concat().sort();
    for (var i = 1; i < u.length; ) {
        if (u[i-1] === u[i])
            u.splice(i,1);
        else
            i++;
    }
    return u;
}

var ary = [1, 2, 3, "a", "b", "c", 2, 3, 4, "b", "c", "d", "4"];
var uniq = unique(ary);
for (var i = 0; i < uniq.length; i++) 
    print(uniq[i] + "\t" + typeof(uniq[i]));

/// rawSolutions:
=={{header|JavaScript}}==
This uses the <code>===</code> "strict equality" operator, which does no type conversions (<code>4 == "4"</code> is true but <code>4 === "4"</code> is false)
<lang javascript>function unique(ary) {
    // concat() with no args is a way to clone an array
    var u = ary.concat().sort();
    for (var i = 1; i < u.length; ) {
        if (u[i-1] === u[i])
            u.splice(i,1);
        else
            i++;
    }
    return u;
}

var ary = [1, 2, 3, "a", "b", "c", 2, 3, 4, "b", "c", "d", "4"];
var uniq = unique(ary);
for (var i = 0; i < uniq.length; i++) 
    print(uniq[i] + "\t" + typeof(uniq[i]));</lang>
<pre>1 - number
2 - number
3 - number
4 - number
4 - string
a - string
b - string
c - string
d - string</pre>

Or, extend the prototype for Array:
<lang javascript>Array.prototype.unique = function() {
    var u = this.concat().sort();
    for (var i = 1; i < u.length; ) {
        if (u[i-1] === u[i])
            u.splice(i,1);
        else
            i++;
    }
    return u;
}
var uniq = [1, 2, 3, "a", "b", "c", 2, 3, 4, "b", "c", "d"].unique();</lang>

With reduce and arrow functions (ES6):
<lang javascript>Array.prototype.unique = function() {
   return this.sort().reduce( (a,e) => e === a[a.length-1] ? a : (a.push(e), a), [] )
}</lang>

With sets and spread operator (ES6):
<lang javascript>Array.prototype.unique = function() {
    return [... new Set(this)]
}</lang>

If, however, the array is homogenous, or we wish to interpret it as such by using JavaScript's Abstract Equality comparison (as in '==', see http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3) then it proves significantly faster to use a hash table.

For example, in ES 5:

<lang JavaScript>function uniq(lst) {
  var u = [],
    dct = {},
    i = lst.length,
    v;

  while (i--) {
    v = lst[i], dct[v] || (
      dct[v] = u.push(v)
    );
  }
  u.sort(); // optional
  
  return u;
}</lang>

Or, to allow for customised definitions of equality and duplication, we can follow the Haskell prelude in defining a '''nub :: [a] -> [a] function''' which is a special case of '''nubBy :: (a -> a -> Bool) -> [a] -> [a]'''

{{trans|Haskell}}

<lang JavaScript>(function () {
    'use strict';

    // nub :: [a] -> [a]
    function nub(xs) {

        // Eq :: a -> a -> Bool
        function Eq(a, b) {
            return a === b;
        }

        // nubBy :: (a -> a -> Bool) -> [a] -> [a]
        function nubBy(fnEq, xs) {
            var x = xs.length ? xs[0] : undefined;

            return x !== undefined ? [x].concat(
                nubBy(fnEq, xs.slice(1)
                    .filter(function (y) {
                        return !fnEq(x, y);
                    }))
            ) : [];
        }

        return nubBy(Eq, xs);
    }


    // TEST
    
    return [
        nub('4 3 2 8 0 1 9 5 1 7 6 3 9 9 4 2 1 5 3 2'.split(' '))
        .map(function (x) {
            return Number(x);
        }),
        nub('chthonic eleemosynary paronomasiac'.split(''))
        .join('')
    ]

})();</lang>

{{Out}}

<pre>[[4, 3, 2, 8, 0, 1, 9, 5, 7, 6], "chtoni elmsyarp"]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7fac
