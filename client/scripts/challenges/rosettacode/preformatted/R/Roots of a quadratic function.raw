
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Roots of a quadratic function
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><p class="rosetta__paragraph">Write a program to find the roots of a quadratic equation, i.e., solve the equation $ax^2 + bx + c = 0$.</p>
/// <p class="rosetta__paragraph">Your program must correctly handle non-real roots, but it need not check that $a \neq 0$.</p><br/><p class="rosetta__paragraph">The problem of solving a quadratic equation is a good example of how dangerous it can be to ignore the peculiarities of floating-point arithmetic.</p>
/// <p class="rosetta__paragraph">The obvious way to implement the quadratic formula suffers catastrophic loss of accuracy when one of the roots to be found is much closer to 0 than the other.</p>
/// <p class="rosetta__paragraph">In their classic textbook on numeric methods <span class="rosetta__text--italic"><a class="rosetta__link--wiki" href="http://www.pdas.com/fmm.htm" title="link: http://www.pdas.com/fmm.htm">Computer Methods for Mathematical Computations</a></span>, George Forsythe, Michael Malcolm, and Cleve Moler suggest trying the naive algorithm with $a = 1$, $b = -10^5$, and $c = 1$.</p>
/// <p class="rosetta__paragraph">(For double-precision floats, set $b = -10^9$.)</p>
/// <p class="rosetta__paragraph">Consider the following implementation in <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Ada" title="Ada">Ada</a>:</p>
/// <p class="rosetta__paragraph"><lang ada>with Ada.Text_IO;                        use Ada.Text_IO;</p>
/// <p class="rosetta__paragraph">with Ada.Numerics.Elementary_Functions;  use Ada.Numerics.Elementary_Functions;</p><br/><p class="rosetta__paragraph">procedure Quadratic_Equation is</p>
/// <p class="rosetta__paragraph">type Roots is array (1..2) of Float;</p>
/// <p class="rosetta__paragraph">function Solve (A, B, C : Float) return Roots is</p>
/// <p class="rosetta__paragraph">SD : constant Float := sqrt (B**2 - 4.0 * A * C);</p>
/// <p class="rosetta__paragraph">AA : constant Float := 2.0 * A;</p>
/// <p class="rosetta__paragraph">begin</p>
/// <p class="rosetta__paragraph">return ((- B + SD) / AA, (- B - SD) / AA);</p>
/// <p class="rosetta__paragraph">end Solve;</p><br/><p class="rosetta__paragraph">R : constant Roots := Solve (1.0, -10.0E5, 1.0);</p>
/// <p class="rosetta__paragraph">begin</p>
/// <p class="rosetta__paragraph">Put_Line ("X1 =" & Float'Image (R (1)) & " X2 =" & Float'Image (R (2)));</p>
/// <p class="rosetta__paragraph">end Quadratic_Equation;</lang></p><br/><div class="rosetta__pre-wrap"><pre class="rosetta__pre">X1 = 1.00000E+06 X2 = 0.00000E+00</pre></div>
/// <p class="rosetta__paragraph">As we can see, the second root has lost all significant figures. The right answer is that <code>X2</code> is about $10^{-6}$. The naive method is numerically unstable.</p><br/><p class="rosetta__paragraph">Suggested by Middlebrook (D-OA), a better numerical method: to define two parameters $ q = \sqrt{a c} / b $ and $ f = 1/2 + \sqrt{1 - 4 q^2} /2 $</p><br/><p class="rosetta__paragraph">and the two roots of the quardratic are: $ \frac{-b}{a} f $ and $ \frac{-c}{b f} $</p>
/// <br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Task</span>: do it better. This means that given $a = 1$, $b = -10^9$, and $c = 1$, both of the roots your program returns should be greater than $10^{-11}$. Or, if your language can't do floating-point arithmetic any more precisely than single precision, your program should be able to handle $b = -10^6$. Either way, show what your program gives as the roots of the quadratic in question. See page 9 of</p>
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://web.archive.org/web/20080921074325/http://dlc.sun.com/pdf//800-7895/800-7895.pdf" title="link: https://web.archive.org/web/20080921074325/http://dlc.sun.com/pdf//800-7895/800-7895.pdf">"What Every Scientist Should Know About Floating-Point Arithmetic"</a> for a possible algorithm.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
