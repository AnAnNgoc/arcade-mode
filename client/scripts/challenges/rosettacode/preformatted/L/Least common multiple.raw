
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Least common multiple
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Compute the least common multiple of two integers.</p><br/><p class="rosetta__paragraph">Given  <span class="rosetta__text--italic">m</span>  and  <span class="rosetta__text--italic">n</span>,  the least common multiple is the smallest positive integer that has both  <span class="rosetta__text--italic">m</span>  and  <span class="rosetta__text--italic">n</span>  as factors.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Example:</dt></dl>
/// <p class="rosetta__paragraph">The least common multiple of 12 and 18 is 36, because 12 is a factor (12 &times; 3 = 36), and 18 is a factor (18 &times; 2 = 36), and there is no positive integer less than 36 that has both factors.  As a special case, if either  <span class="rosetta__text--italic">m</span>  or  <span class="rosetta__text--italic">n</span>  is zero, then the least common multiple is zero.</p><br/><p class="rosetta__paragraph">One way to calculate the least common multiple is to iterate all the multiples of  <span class="rosetta__text--italic">m</span>,  until you find one that is also a multiple of  <span class="rosetta__text--italic">n</span>.</p><br/><p class="rosetta__paragraph">If you already have  <span class="rosetta__text--italic">gcd</span>  for <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/greatest common divisor" title="greatest common divisor">greatest common divisor</a>,  then this formula calculates  <span class="rosetta__text--italic">lcm</span>.</p><br/><p class="rosetta__paragraph"><big></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::: $\operatorname{lcm}(m, n) = \frac{|m \times n|}{\operatorname{gcd}(m, n)}$</span></p>
/// </big><br/><p class="rosetta__paragraph">One can also find  <span class="rosetta__text--italic">lcm</span>  by merging the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/prime decomposition" title="prime decomposition">prime decomposition</a>s of both  <span class="rosetta__text--italic">m</span>  and  <span class="rosetta__text--italic">n</span>.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">References:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"> <a class="rosetta__link--wiki" href="http://mathworld.wolfram.com/LeastCommonMultiple.html" title="link: http://mathworld.wolfram.com/LeastCommonMultiple.html">MathWorld</a>.</li>
/// <li class="rosetta__list-item--unordered"> <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Least common multiple" title="wp: Least common multiple">Wikipedia</a>.</li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function LCM(A)  // A is an integer array (e.g. [-50,25,-45,-18,90,447])
{   
    var n = A.length, a = Math.abs(A[0]);
    for (var i = 1; i < n; i++)
     { var b = Math.abs(A[i]), c = a;
       while (a && b){ a > b ? a %= b : b %= a; } 
       a = Math.abs(c*A[i])/(a+b);
     }
    return a;
}

/* For example:
   LCM([-50,25,-45,-18,90,447]) -> 67050
*/

/// rawSolutions:
=={{header|JavaScript}}==

===ES5===
Computing the least common multiple of an integer array, using the associative law:

<math>\operatorname{lcm}(a,b,c)=\operatorname{lcm}(\operatorname{lcm}(a,b),c),</math>

<math>\operatorname{lcm}(a_1,a_2,\ldots,a_n) = \operatorname{lcm}(\operatorname{lcm}(a_1,a_2,\ldots,a_{n-1}),a_n).</math>

<lang javascript>function LCM(A)  // A is an integer array (e.g. [-50,25,-45,-18,90,447])
{   
    var n = A.length, a = Math.abs(A[0]);
    for (var i = 1; i < n; i++)
     { var b = Math.abs(A[i]), c = a;
       while (a && b){ a > b ? a %= b : b %= a; } 
       a = Math.abs(c*A[i])/(a+b);
     }
    return a;
}

/* For example:
   LCM([-50,25,-45,-18,90,447]) -> 67050
*/</lang>


===ES6===
{{Trans|Haskell}}
<lang JavaScript>(() => {
    'use strict';

    // gcd :: Integral a => a -> a -> a
    let gcd = (x, y) => {
        let _gcd = (a, b) => (b === 0 ? a : _gcd(b, a % b)),
            abs = Math.abs;
        return _gcd(abs(x), abs(y));
    }

    // lcm :: Integral a => a -> a -> a
    let lcm = (x, y) =>
        x === 0 || y === 0 ? 0 : Math.abs(Math.floor(x / gcd(x, y)) * y);

    // TEST
    return lcm(12, 18);

})();</lang>

{{Out}}
<pre>36</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7edf
