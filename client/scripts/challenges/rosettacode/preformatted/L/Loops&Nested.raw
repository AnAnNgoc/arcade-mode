
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Loops/Nested
/// type: rosetta-code

/// categories:
/// Loop modifiers

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">Show a nested loop which searches a two-dimensional array filled with random numbers uniformly distributed over $[1,\ldots,20]$.</p><br/><p class="rosetta__paragraph">The loops iterate rows and columns of the array printing the elements until the value $20$ is met.</p><br/><p class="rosetta__paragraph">Specifically, this task also shows how to <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Loop/Break" title="Loop/Break">break</a> out of nested loops.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
// a "random" 2-D array 
var a = [[2, 12, 10, 4], [18, 11, 9, 3], [14, 15, 7, 17], [6, 19, 8, 13], [1, 20, 16, 5]];

outer_loop:
for (var i in a) {
    print("row " + i);
    for (var j in a[i]) {
        print(" " + a[i][j]);
        if (a[i][j] == 20) 
            break outer_loop;
    }
}
print("done");

/// rawSolutions:
=={{header|JavaScript}}==
Demonstrates use of <code>break</code> with a label.
Uses <code>print()</code> function from [[Rhino]].
<lang javascript>// a "random" 2-D array 
var a = [[2, 12, 10, 4], [18, 11, 9, 3], [14, 15, 7, 17], [6, 19, 8, 13], [1, 20, 16, 5]];

outer_loop:
for (var i in a) {
    print("row " + i);
    for (var j in a[i]) {
        print(" " + a[i][j]);
        if (a[i][j] == 20) 
            break outer_loop;
    }
}
print("done");</lang>

In a functional idiom of JavaScript, however, we can not use a loop statement, as statements return no value and can not be composed within other functional expressions. Functional JavaScript often replaces a loop with a map or fold. In this case, we can achieve the same task by defining the standard list-processing function '''takeWhile''', which terminates when a condition returns true.

We can then search the groups in the nested array by nesting takeWhile inside itself, and finally terminate when the 20 is found by one further application of takeWhile.

Using the same data as above, and returning the trail of numbers up to twenty from a nested and composable expression:

<lang JavaScript>var lst = [[2, 12, 10, 4], [18, 11, 9, 3], [14, 15, 7, 17], [6, 19, 8, 13], [1,
  20, 16, 5]];

var takeWhile = function (lst, fnTest) {
    'use strict';
    var varHead = lst.length ? lst[0] : null;

    return varHead ? (
      fnTest(varHead) ? [varHead].concat(
        takeWhile(lst.slice(1), fnTest)
      ) : []
    ) : []
  },

  // The takeWhile function terminates when notTwenty(n) returns false
  notTwenty = function (n) {
    return n !== 20;
  },

  // Leftward groups containing no 20
  // takeWhile nested within takeWhile
  lstChecked = takeWhile(lst, function (group) {
    return takeWhile(
      group,
      notTwenty
    ).length === 4;
  });


// Return the trail of numbers preceding 20 from a composable expression

console.log(
  // Numbers before 20 in a group in which it was found
  lstChecked.concat(
    takeWhile(
      lst[lstChecked.length], notTwenty
    )
  )
  // flattened
  .reduce(function (a, x) {
    return a.concat(x);
  }).join('\n')
);</lang> 

Output:
<lang JavaScript>2
12
10
4
18
11
9
3
14
15
7
17
6
19
8
13
6
19
8
13
1</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7ef7
