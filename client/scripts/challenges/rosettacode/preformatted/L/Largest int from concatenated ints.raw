
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Largest int from concatenated ints
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task: </dt></dl>
/// <p class="rosetta__paragraph">Given a set of positive integers, write a function to order the integers in such a way that the concatenation of the numbers forms the largest possible integer and return this integer.</p><br/><p class="rosetta__paragraph">Use the following two sets of integers as tests  and  show your program output here.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">::::*  {1, 34, 3, 98, 9, 76, 45, 4}</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::::*  {54, 546, 548, 60}</span></p><br/><br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Possible algorithms:</dt></dl>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">A solution could be found by trying all combinations and return the best. </li>
/// <li class="rosetta__list-item--ordered">Another way to solve this is to note that in the best arrangement, for any two adjacent original integers <span class="rosetta__text--bold">X</span> and <span class="rosetta__text--bold">Y</span>, the concatenation <span class="rosetta__text--bold">X</span> followed by <span class="rosetta__text--bold">Y</span> will be numerically greater than or equal to the concatenation <span class="rosetta__text--bold">Y</span> followed by '''X.</li>
/// <li class="rosetta__list-item--ordered">Yet another way to solve this is to pad the integers to the same size by repeating the digits then sort using these repeated integers as a sort key.</li></ol><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">See also:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"> <a class="rosetta__link--wiki" href="http://www.quora.com/Algorithms/What-is-the-most-efficient-way-to-arrange-the-given-numbers-to-form-the-biggest-number" title="link: http://www.quora.com/Algorithms/What-is-the-most-efficient-way-to-arrange-the-given-numbers-to-form-the-biggest-number">Algorithms: What is the most efficient way to arrange the given numbers to form the biggest number?</a></li>
/// <li class="rosetta__list-item--unordered"> <a class="rosetta__link--wiki" href="http://stackoverflow.com/questions/14532105/constructing-the-largest-number-possible-by-rearranging-a-list/14539943#14539943" title="link: http://stackoverflow.com/questions/14532105/constructing-the-largest-number-possible-by-rearranging-a-list/14539943#14539943">Constructing the largest number possible by rearranging a list</a></li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
 (function () {
     'use strict';

     // maxCombine :: [Int] -> Int
     function maxCombine(xs) {
         return parseInt(
             xs.sort(
                 function (x, y) {
                     var a = x.toString(),
                         b = y.toString(),
                         ab = parseInt(a + b),
                         ba = parseInt(b + a);

                     return ab > ba ? -1 : (ab < ba ? 1 : 0);
                 }
             )
             .join(''), 10
         );
     }

     return [
        [1, 34, 3, 98, 9, 76, 45, 4],
        [54, 546, 548, 60]
     ].map(maxCombine);

 })();


/// rawSolutions:
=={{header|JavaScript}}==

===ES5===

<lang JavaScript> (function () {
     'use strict';

     // maxCombine :: [Int] -> Int
     function maxCombine(xs) {
         return parseInt(
             xs.sort(
                 function (x, y) {
                     var a = x.toString(),
                         b = y.toString(),
                         ab = parseInt(a + b),
                         ba = parseInt(b + a);

                     return ab > ba ? -1 : (ab < ba ? 1 : 0);
                 }
             )
             .join(''), 10
         );
     }

     return [
        [1, 34, 3, 98, 9, 76, 45, 4],
        [54, 546, 548, 60]
     ].map(maxCombine);

 })();
</lang>

{{Out}}

<pre>[998764543431, 6054854654]</pre>



===ES6===
<lang JavaScript>var maxCombine = (a) => +(a.sort((x, y) => +("" + y + x) - +("" + x + y)).join(''));

// test & output
console.log([
  [1, 34, 3, 98, 9, 76, 45, 4],
  [54, 546, 548, 60]
].map(maxCombine));</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7edb
