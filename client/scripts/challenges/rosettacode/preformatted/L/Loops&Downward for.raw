
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Loops/Downward for
/// type: rosetta-code

/// categories:
/// Simple

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Write a  <big><big> <span class="rosetta__text--italic">for</span> </big></big>  loop which writes a countdown from  <span class="rosetta__text--bold">10</span>  to  <span class="rosetta__text--bold">0</span>.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
for (var i=10; i>=0; --i) print(i);

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>for (var i=10; i>=0; --i) print(i);</lang>

Alternatively, remaining for the moment within an imperative idiom of JavaScript, in which programs are composed of statements, we could trim the computational costs over longer reversed iterations by moving the mutation into the test, and dropping the third term of a for() statement:

<lang JavaScript>for (var i = 11; i--;) console.log(i);</lang> 

and it sometimes might be more natural, especially at scales at which optimisation becomes an issue, to go one step further and express the same computation with the more economical while statement.

<lang JavaScript>var i = 11;
while (i--) console.log(i);</lang> 

In a functional idiom of JavaScript, however, we need an expression with a value (which can be composed within superordinate expressions), rather than a statement, which produces a side-effect but returns no information-bearing value.

If we have grown over-attached to the English morpheme 'for', we might think first of turning to '''Array.forEach()''',  and write something like:

<lang JavaScript>function range(m, n) {
  return Array.apply(null, Array(n - m + 1)).map(
    function (x, i) {
      return m + i;
    }
  );
}

range(0, 10).reverse().forEach(
  function (x) {
    console.log(x);
  }
);</lang> 


but this is still a statement with side-effects, rather than a composable expression with a value.

We can get an expression (assuming that the range() function (above) is defined) but replacing Array.forEach with '''Array.map()'''

<lang JavaScript>console.log(
  range(0, 10).reverse().map(
    function (x) {
      return x;
    }
  ).join('\n')
);</lang> 

but in this case, we are simply mapping an identity function over the values, so the expression simplifies down to:

<lang JavaScript>console.log(
    range(0, 10).reverse().join('\n')
);</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
