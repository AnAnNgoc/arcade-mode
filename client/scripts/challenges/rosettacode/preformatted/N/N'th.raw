
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: N'th
/// type: rosetta-code

/// categories:
/// String manipulation

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">Write a function/method/subroutine/... that when given an integer greater than or equal to zero returns a string of the number followed by an apostrophe then the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Ordinal number (linguistics)" title="wp: Ordinal number (linguistics)">ordinal suffix</a>.</p>
/// <br>Example returns would include <code>1'st 2'nd 3'rd 11'th 111'th 1001'st 1012'th</code><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Use your routine to show here the output for <span class="rosetta__text--italic">at least</span> the following (inclusive) ranges of integer inputs:</p>
/// <p class="rosetta__paragraph"><code>0..25, 250..265, 1000..1025</code></p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Note:</span> apostrophes are now <span class="rosetta__text--italic">optional</span> to allow correct apostrophe-less English.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
console.log(function () {

  var lstSuffix = 'th st nd rd th th th th th th'.split(' '),

    fnOrdinalForm = function (n) {
      return n.toString() + (
        11 <= n % 100 && 13 >= n % 100 ?
        "th" : lstSuffix[n % 10]
      );
    },

    range = function (m, n) {
      return Array.apply(
        null, Array(n - m + 1)
      ).map(function (x, i) {
        return m + i;
      });
    };

  return [[0, 25], [250, 265], [1000, 1025]].map(function (tpl) {
    return range.apply(null, tpl).map(fnOrdinalForm).join(' ');
  }).join('\n\n');
  
}());

/// rawSolutions:
=={{header|JavaScript}}==

===ES5===

<lang JavaScript>console.log(function () {

  var lstSuffix = 'th st nd rd th th th th th th'.split(' '),

    fnOrdinalForm = function (n) {
      return n.toString() + (
        11 <= n % 100 && 13 >= n % 100 ?
        "th" : lstSuffix[n % 10]
      );
    },

    range = function (m, n) {
      return Array.apply(
        null, Array(n - m + 1)
      ).map(function (x, i) {
        return m + i;
      });
    };

  return [[0, 25], [250, 265], [1000, 1025]].map(function (tpl) {
    return range.apply(null, tpl).map(fnOrdinalForm).join(' ');
  }).join('\n\n');
  
}());</lang>


{{Out}}

<lang JavaScript>0th 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd 23rd 24th 25th

250th 251st 252nd 253rd 254th 255th 256th 257th 258th 259th 260th 261st 262nd 263rd 264th 265th

1000th 1001st 1002nd 1003rd 1004th 1005th 1006th 1007th 1008th 1009th 1010th 1011th 1012th 1013th 1014th 1015th 1016th 1017th 1018th 1019th 1020th 1021st 1022nd 1023rd 1024th 1025th</lang>


===ES6===

<lang JavaScript>(function (lstTestRanges) {
    'use strict'

    let lstSuffix = 'th st nd rd th th th th th th'.split(' '),

        // ordinalString :: Int -> String
        ordinalString = n =>
            n.toString() + (
                11 <= n % 100 && 13 >= n % 100 ?
                "th" : lstSuffix[n % 10]
            ),
    
        // range :: Int -> Int -> [Int]
        range = (m, n) =>
            Array.from({
                length: (n - m) + 1
            }, (_, i) => m + i);
            

    return lstTestRanges
        .map(tpl => range
            .apply(null, tpl)
            .map(ordinalString)
        );

})([[0, 25], [250, 265], [1000, 1025]]);</lang>


{{Out}}
<pre>[["0th", "1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", 
"9th", "10th", "11th", "12th", "13th", "14th", "15th", "16th", 
"17th", "18th", "19th", "20th", "21st", "22nd", "23rd", "24th", "25th"], 
["250th", "251st", "252nd", "253rd", "254th", "255th", "256th", "257th", 
"258th", "259th", "260th", "261st", "262nd", "263rd", "264th", "265th"], 
["1000th", "1001st", "1002nd", "1003rd", "1004th", "1005th", "1006th", 
"1007th", "1008th", "1009th", "1010th", "1011th", "1012th", "1013th", 
"1014th", "1015th", "1016th", "1017th", "1018th", "1019th", "1020th", 
"1021st", "1022nd", "1023rd", "1024th", "1025th"]]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7f3c
