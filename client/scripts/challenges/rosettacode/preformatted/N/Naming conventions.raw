
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Naming conventions
/// type: rosetta-code

/// categories:
/// Simple

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">Many languages have either (or both) de-facto naming conventions or de-jure naming conventions for names used in the language and/or its libraries.</p>
/// <p class="rosetta__paragraph">These may take the form of prefixes, suffixes or a combination of upper-case and lower-case characters.</p>
/// <p class="rosetta__paragraph">Often the conventions are a bit haphazard, especially where the language and/or library has gone through a periods of evolution. (In this case: give a brief example and description).</p><br/><p class="rosetta__paragraph">Document as best you can (with simple examples where possible) the evolution and current status of these naming conventions.</p>
/// <p class="rosetta__paragraph">For example, name conventions for:</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Procedure and operator names.  (Intrinsic or external)</li>
/// <li class="rosetta__list-item--unordered">Class, Subclass and instance names.</li>
/// <li class="rosetta__list-item--unordered">Built-in versus libraries names.</li></ul>
/// <br>
/// <p class="rosetta__paragraph">If possible, indicate where the naming conventions are implicit, explicit, mandatory or discretionary.</p>
/// <p class="rosetta__paragraph">Any tools that enforced the the naming conventions.</p>
/// <p class="rosetta__paragraph">Any cases where the naming convention as commonly violated.</p><br/><p class="rosetta__paragraph">If possible, indicate where the convention wased use to hint at other issues, for example the C standard library uses a prefix of "_" to "hide" raw Operating System calls from the non systems-programmer.</p>
/// <p class="rosetta__paragraph">Whereas Python embeds member functions in between "__" to make a member function "private".</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">See also:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Wikipedia: <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Naming convention (programming)" title="wp: Naming convention (programming)">Naming convention (programming)</a></li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7f2f
