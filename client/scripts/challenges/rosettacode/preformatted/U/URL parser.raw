
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: URL parser
/// type: rosetta-code

/// categories:
/// String manipulation
/// Parser

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <p class="rosetta__paragraph">URLs are strings with a simple syntax:</p>
/// <p class="rosetta__paragraph">scheme://[username:password@]domain[:port]/path?query_string#fragment_id</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Parse a well-formed URL to retrieve the relevant information:  <span class="rosetta__text--bold">scheme</span>, <span class="rosetta__text--bold">domain</span>, <span class="rosetta__text--bold">path</span>, ...</p>
/// <br/><p class="rosetta__paragraph">Note:  this task has nothing to do with <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/URL encoding" title="URL encoding">URL encoding</a> or <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/URL decoding" title="URL decoding">URL decoding</a>.</p>
/// <br/><p class="rosetta__paragraph">According to the standards, the characters:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:::  <big><big>    ! * ' ( ) ; : @ & = + $ , / ? % # [ ]    </big></big></span></p>
/// <p class="rosetta__paragraph">only need to be percent-encoded  (<span class="rosetta__text--bold">%</span>)  in case of possible confusion.</p><br/><p class="rosetta__paragraph">Also note that the <span class="rosetta__text--bold">path</span>, <span class="rosetta__text--bold">query</span> and <span class="rosetta__text--bold">fragment</span> are case sensitive, even if the <span class="rosetta__text--bold">scheme</span> and <span class="rosetta__text--bold">domain</span> are not.</p><br/><p class="rosetta__paragraph">The way the returned information is provided (set of variables, array, structured, record, object,...)</p>
/// <p class="rosetta__paragraph">is language-dependent and left to the programmer, but the code should be clear enough to reuse.</p><br/><p class="rosetta__paragraph">Extra credit is given for clear error diagnostics.</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"> Here is the official standard:   https://tools.ietf.org/html/rfc3986, </li>
/// <li class="rosetta__list-item--unordered"> and here is a simpler  BNF:   http://www.w3.org/Addressing/URL/5_URI_BNF.html.</li></ul><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Test cases:</dt></dl>
/// <p class="rosetta__paragraph">According to T. Berners-Lee</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold"><nowiki>foo://example.com:8042/over/there?name=ferret#nose</nowiki></span>   should parse into:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  scheme = foo</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  domain = example.com</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  port = :8042</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  path = over/there</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  query = name=ferret</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  fragment = nose</span></p>
/// <br/><p class="rosetta__paragraph"><span class="rosetta__text--bold"><nowiki>urn:example:animal:ferret:nose</nowiki></span>   should parse into:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  scheme = urn</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  path = example:animal:ferret:nose</span></p>
/// <br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">other URLs that must be parsed include:</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <nowiki> jdbc:mysql://test_user:ouupppssss@localhost:3306/sakila?profileSQL=true </nowiki> </span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <nowiki> ftp://ftp.is.co.za/rfc/rfc1808.txt                                      </nowiki></span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <nowiki> http://www.ietf.org/rfc/rfc2396.txt#header1                             </nowiki></span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <nowiki> ldap://[2001:db8::7]/c=GB?objectClass=one&objectClass=two               </nowiki></span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <nowiki> mailto:John.Doe@example.com                                             </nowiki></span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <nowiki> news:comp.infosystems.www.servers.unix                                  </nowiki></span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <nowiki> tel:+1-816-555-1212                                                     </nowiki></span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <nowiki> telnet://192.0.2.16:80/                                                 </nowiki></span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <nowiki> urn:oasis:names:specification:docbook:dtd:xml:4.1.2                     </nowiki></span></p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(function (lstURL) {

    var e = document.createElement('a'),
        lstKeys = [
            'hash',
            'host',
            'hostname',
            'origin',
            'pathname',
            'port',
            'protocol',
            'search'
        ],

        fnURLParse = function (strURL) {
            e.href = strURL;

            return lstKeys.reduce(
                function (dct, k) {
                    dct[k] = e[k];
                    return dct;
                }, {}
            );
        };

    return JSON.stringify(
        lstURL.map(fnURLParse),
        null, 2
    );

})([
  "foo://example.com:8042/over/there?name=ferret#nose",
  "urn:example:animal:ferret:nose",
  "jdbc:mysql://test_user:ouupppssss@localhost:3306/sakila?profileSQL=true",
  "ftp://ftp.is.co.za/rfc/rfc1808.txt",
  "http://www.ietf.org/rfc/rfc2396.txt#header1",
  "ldap://[2001:db8::7]/c=GB?objectClass=one&objectClass=two",
  "mailto:John.Doe@example.com",
  "news:comp.infosystems.www.servers.unix",
  "tel:+1-816-555-1212",
  "telnet://192.0.2.16:80/",
  "urn:oasis:names:specification:docbook:dtd:xml:4.1.2",
  "ssh://alice@example.com",
  "https://bob:pass@example.com/place",
  "http://example.com/?a=1&b=2+2&c=3&c=4&d=%65%6e%63%6F%64%65%64"
]);

/// rawSolutions:
=={{header|JavaScript}}==

As JavaScript is (at the time of writing) still the native language of the DOM, the simplest first-pass approach will be to set the ''href'' property of  a DOM element, and read off the various components of the DOM parse from that element. 

Here is an example, tested against the JavaScript engines of current versions of Chrome and Safari, of taking this 'Gordian knot' approach to the task:

<lang JavaScript>(function (lstURL) {

    var e = document.createElement('a'),
        lstKeys = [
            'hash',
            'host',
            'hostname',
            'origin',
            'pathname',
            'port',
            'protocol',
            'search'
        ],

        fnURLParse = function (strURL) {
            e.href = strURL;

            return lstKeys.reduce(
                function (dct, k) {
                    dct[k] = e[k];
                    return dct;
                }, {}
            );
        };

    return JSON.stringify(
        lstURL.map(fnURLParse),
        null, 2
    );

})([
  "foo://example.com:8042/over/there?name=ferret#nose",
  "urn:example:animal:ferret:nose",
  "jdbc:mysql://test_user:ouupppssss@localhost:3306/sakila?profileSQL=true",
  "ftp://ftp.is.co.za/rfc/rfc1808.txt",
  "http://www.ietf.org/rfc/rfc2396.txt#header1",
  "ldap://[2001:db8::7]/c=GB?objectClass=one&objectClass=two",
  "mailto:John.Doe@example.com",
  "news:comp.infosystems.www.servers.unix",
  "tel:+1-816-555-1212",
  "telnet://192.0.2.16:80/",
  "urn:oasis:names:specification:docbook:dtd:xml:4.1.2",
  "ssh://alice@example.com",
  "https://bob:pass@example.com/place",
  "http://example.com/?a=1&b=2+2&c=3&c=4&d=%65%6e%63%6F%64%65%64"
]);</lang>

Results of applying this approach in the JavaScript of Safari 8
<lang JSON>[
  {
    "hash": "#nose",
    "host": "example.com:8042",
    "hostname": "example.com",
    "origin": "foo://example.com:8042",
    "pathname": "/over/there",
    "port": "8042",
    "protocol": "foo:",
    "search": "?name=ferret"
  },
  {
    "hash": "",
    "host": "",
    "hostname": "",
    "origin": "urn://",
    "pathname": "example:animal:ferret:nose",
    "port": "",
    "protocol": "urn:",
    "search": ""
  },
  {
    "hash": "",
    "host": "",
    "hostname": "",
    "origin": "jdbc://",
    "pathname": "mysql://test_user:ouupppssss@localhost:3306/sakila",
    "port": "",
    "protocol": "jdbc:",
    "search": "?profileSQL=true"
  },
  {
    "hash": "",
    "host": "ftp.is.co.za",
    "hostname": "ftp.is.co.za",
    "origin": "ftp://ftp.is.co.za",
    "pathname": "/rfc/rfc1808.txt",
    "port": "",
    "protocol": "ftp:",
    "search": ""
  },
  {
    "hash": "#header1",
    "host": "www.ietf.org",
    "hostname": "www.ietf.org",
    "origin": "http://www.ietf.org",
    "pathname": "/rfc/rfc2396.txt",
    "port": "",
    "protocol": "http:",
    "search": ""
  },
  {
    "hash": "",
    "host": "[2001:db8::7]",
    "hostname": "[2001:db8::7]",
    "origin": "ldap://[2001:db8::7]",
    "pathname": "/c=GB",
    "port": "",
    "protocol": "ldap:",
    "search": "?objectClass=one&objectClass=two"
  },
  {
    "hash": "",
    "host": "",
    "hostname": "",
    "origin": "mailto://",
    "pathname": "John.Doe@example.com",
    "port": "",
    "protocol": "mailto:",
    "search": ""
  },
  {
    "hash": "",
    "host": "",
    "hostname": "",
    "origin": "news://",
    "pathname": "comp.infosystems.www.servers.unix",
    "port": "",
    "protocol": "news:",
    "search": ""
  },
  {
    "hash": "",
    "host": "",
    "hostname": "",
    "origin": "tel://",
    "pathname": "+1-816-555-1212",
    "port": "",
    "protocol": "tel:",
    "search": ""
  },
  {
    "hash": "",
    "host": "192.0.2.16:80",
    "hostname": "192.0.2.16",
    "origin": "telnet://192.0.2.16:80",
    "pathname": "/",
    "port": "80",
    "protocol": "telnet:",
    "search": ""
  },
  {
    "hash": "",
    "host": "",
    "hostname": "",
    "origin": "urn://",
    "pathname": "oasis:names:specification:docbook:dtd:xml:4.1.2",
    "port": "",
    "protocol": "urn:",
    "search": ""
  },
  {
    "hash": "",
    "host": "example.com",
    "hostname": "example.com",
    "origin": "ssh://example.com",
    "pathname": "",
    "port": "",
    "protocol": "ssh:",
    "search": ""
  },
  {
    "hash": "",
    "host": "example.com",
    "hostname": "example.com",
    "origin": "https://example.com",
    "pathname": "/place",
    "port": "",
    "protocol": "https:",
    "search": ""
  },
  {
    "hash": "",
    "host": "example.com",
    "hostname": "example.com",
    "origin": "http://example.com",
    "pathname": "/",
    "port": "",
    "protocol": "http:",
    "search": "?a=1&b=2+2&c=3&c=4&d=%65%6e%63%6F%64%65%64"
  }
]</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84352665b21eecc807f
