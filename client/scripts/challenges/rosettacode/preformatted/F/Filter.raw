
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Filter
/// type: rosetta-code

/// categories:
/// Iteration

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Select certain elements from an Array into a new Array in a generic way.</p>
/// <br/><p class="rosetta__paragraph">To demonstrate, select all even numbers from an Array.</p><br/><p class="rosetta__paragraph">As an option, give a second solution which filters destructively,</p>
/// <p class="rosetta__paragraph">by modifying the original Array rather than creating a new Array.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var arr = [1,2,3,4,5];
var evens = arr.filter(function(a) {return a % 2 == 0});

/// rawSolutions:
=={{header|JavaScript}}==
===ES5===
The standard way is to use the [https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Array/filter Array.prototype.filter] function ({{works with|JavaScript|1.6}}):
<lang javascript>var arr = [1,2,3,4,5];
var evens = arr.filter(function(a) {return a % 2 == 0});</lang>

Other ways:
<lang javascript>var arr = [1,2,3,4,5];
var evens = [];
for (var i=0, ilen=arr.length; i<ilen; i++)
      if (arr[i] % 2 == 0)
              evens.push(arr[i]);</lang>

{{works with|Firefox|2.0}}

<lang javascript>var numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
var evens = [i for (i in numbers) if (i % 2 == 0)];

function range(limit) {
  for(var i = 0; i < limit; i++) {
    yield i;
  }
}

var evens2 = [i for (i in range(100)) if (i % 2 == 0)];</lang>

{{libheader|Functional}}
<lang javascript>Functional.select("+1&1", [1,2,3,4])   // [2, 4]</lang>

===ES6===

<lang JavaScript>(() => {
    'use strict';

    // isEven :: Int -> Bool
    const isEven = n => n % 2 === 0;


    // TEST
    
    return [1,2,3,4,5,6,7,8,9]
        .filter(isEven);

    // [2, 4, 6, 8]
})();</lang>

{{Out}}
<lang JavaScript>[2, 4, 6, 8]</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
