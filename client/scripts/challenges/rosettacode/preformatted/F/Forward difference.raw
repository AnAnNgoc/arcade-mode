
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Forward difference
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Provide code that produces a list of numbers which is the  <big>n<sup>th</sup></big> order forward difference, given a non-negative integer (specifying the order) and a list of numbers.</p>
/// <br/><p class="rosetta__paragraph">The first-order forward difference of a list of numbers  <big><span class="rosetta__text--bold">A</span></big>  is a new list  <big><span class="rosetta__text--bold">B</span></big>,  where  <big><b>B</b><sub>n</sub> = <b>A</b><sub>n+1</sub> - <b>A</b><sub>n</sub></big>.</p><br/><p class="rosetta__paragraph">List  <big><span class="rosetta__text--bold">B</span></big>  should have one fewer element as a result.</p><br/><p class="rosetta__paragraph">The second-order forward difference of  <big><span class="rosetta__text--bold">A</span></big>  will be:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// tdefmodule Diff do
/// 	def forward(arr,i\\1) do
/// 		forward(arr,[],i)
/// 	end<br/>	def forward([_|[]],diffs,i) do
/// 		if i == 1 do
/// 			IO.inspect diffs
/// 		else 
/// 			forward(diffs,[],i-1)
/// 		end
/// 	end<br/>	def forward([val1|[val2|vals]],diffs,i) do
/// 		forward([val2|vals],diffs++[val2-val1],i) 
/// 	end
/// end 
/// </pre></div>
/// <p class="rosetta__paragraph">The same as the first-order forward difference of  <big><span class="rosetta__text--bold">B</span></big>.</p><br/><p class="rosetta__paragraph">That new list will have two fewer elements than  <big><span class="rosetta__text--bold">A</span></big>  and one less than  <big><span class="rosetta__text--bold">B</span></big>.</p><br/><p class="rosetta__paragraph">The goal of this task is to repeat this process up to the desired order.</p><br/><p class="rosetta__paragraph">For a more formal description, see the related  <a class="rosetta__link--wiki" href="http://mathworld.wolfram.com/ForwardDifference.html" title="link: http://mathworld.wolfram.com/ForwardDifference.html">Mathworld article</a>.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Algorithmic options:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Iterate through all previous forward differences and re-calculate a new array each time.</li>
/// <li class="rosetta__list-item--unordered">Use this formula (from <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Forward difference" title="wp: Forward difference">Wikipedia</a>):</li></ul><big><big>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:: $\Delta^n [f](x)= \sum_{k=0}^n {n \choose k} (-1)^{n-k} f(x+k)$</span></p>
/// </big></big>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:: (<a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Pascal's Triangle" title="Pascal's Triangle">Pascal's Triangle</a>  may be useful for this option.)</span></p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(() => {
    'use strict';

    // forwardDifference :: [Int] -> [Int]
    const forwardDifference = (n, xs) => {
        const fd = xs => zipWith((a, b) => a - b, tail(xs), xs);
        return until(
                m => m.index < 1,
                m => ({
                    index: m.index - 1,
                    list: fd(m.list)
                }), {
                    index: n,
                    list: xs
                }
            )
            .list;
    };


    // GENERIC FUNCTIONS ---------------------------------------

    // zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
    const zipWith = (f, xs, ys) => {
        const ny = ys.length;
        return (xs.length <= ny ? xs : xs.slice(0, ny))
            .map((x, i) => f(x, ys[i]));
    };

    // until :: (a -> Bool) -> (a -> a) -> a -> a
    const until = (p, f, x) => {
        const go = x => p(x) ? x : go(f(x));
        return go(x);
    };

    // tail :: [a] -> [a]
    const tail = xs => xs.length ? xs.slice(1) : undefined;


    // TEST ----------------------------------------------------

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // show :: a -> String
    const show = x => JSON.stringify(x);

    // Sample
    const test = [90, 47, 58, 29, 22, 32, 55, 5, 55, 73];

    return range(1, 9)
        .map(x => `${x}    ${show(forwardDifference(x, test))}`)
        .join('\n');
})();

/// rawSolutions:
=={{header|JavaScript}}==

===ES6===

<lang JavaScript>(() => {
    'use strict';

    // forwardDifference :: [Int] -> [Int]
    const forwardDifference = (n, xs) => {
        const fd = xs => zipWith((a, b) => a - b, tail(xs), xs);
        return until(
                m => m.index < 1,
                m => ({
                    index: m.index - 1,
                    list: fd(m.list)
                }), {
                    index: n,
                    list: xs
                }
            )
            .list;
    };


    // GENERIC FUNCTIONS ---------------------------------------

    // zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
    const zipWith = (f, xs, ys) => {
        const ny = ys.length;
        return (xs.length <= ny ? xs : xs.slice(0, ny))
            .map((x, i) => f(x, ys[i]));
    };

    // until :: (a -> Bool) -> (a -> a) -> a -> a
    const until = (p, f, x) => {
        const go = x => p(x) ? x : go(f(x));
        return go(x);
    };

    // tail :: [a] -> [a]
    const tail = xs => xs.length ? xs.slice(1) : undefined;


    // TEST ----------------------------------------------------

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // show :: a -> String
    const show = x => JSON.stringify(x);

    // Sample
    const test = [90, 47, 58, 29, 22, 32, 55, 5, 55, 73];

    return range(1, 9)
        .map(x => `${x}    ${show(forwardDifference(x, test))}`)
        .join('\n');
})();</lang>

{{Out}}
<pre>1    [-43,11,-29,-7,10,23,-50,50,18]
2    [54,-40,22,17,13,-73,100,-32]
3    [-94,62,-5,-4,-86,173,-132]
4    [156,-67,1,-82,259,-305]
5    [-223,68,-83,341,-564]
6    [291,-151,424,-905]
7    [-442,575,-1329]
8    [1017,-1904]
9    [-2921]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
