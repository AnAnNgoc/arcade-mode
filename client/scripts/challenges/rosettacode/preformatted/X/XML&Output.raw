
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: XML/Output
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">Create a function that takes a list of character names and a list of corresponding remarks and returns an XML document of <code><Character></code> elements each with a name attributes and each enclosing its remarks.</p>
/// <p class="rosetta__paragraph">All <code><Character></code> elements are to be enclosed in turn, in an outer <code><CharacterRemarks></code> element.</p><br/><p class="rosetta__paragraph">As an example, calling the function with the three names of:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// April
/// Tam O'Shanter
/// Emily</pre></div>
/// <p class="rosetta__paragraph">And three remarks of:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// Bubbly: I'm > Tam and <= Emily
/// Burns: "When chapman billies leave the street ..."
/// Short & shrift</pre></div>
/// <p class="rosetta__paragraph">Should produce the XML (but not necessarily with the indentation):</p>
/// <p class="rosetta__paragraph"><lang xml><CharacterRemarks></p>
/// <p class="rosetta__paragraph"><Character name="April">Bubbly: I'm &gt; Tam and &lt;= Emily</Character></p>
/// <p class="rosetta__paragraph"><Character name="Tam O'Shanter">Burns: "When chapman billies leave the street ..."</Character></p>
/// <p class="rosetta__paragraph"><Character name="Emily">Short &amp; shrift</Character></p>
/// </CharacterRemarks></lang><br/><p class="rosetta__paragraph">The document may include an <tt><?xml?></tt> declaration and document type declaration, but these are optional. If attempting this task by direct string manipulation, the implementation <span class="rosetta__text--italic">must</span> include code to perform entity substitution for the characters that have entities defined in the XML 1.0 specification.</p><br/><p class="rosetta__paragraph">Note: the example is chosen to show correct escaping of XML strings.</p>
/// <p class="rosetta__paragraph">Note too that although the task is written to take two lists of corresponding data, a single mapping/hash/dictionary of names to remarks is also acceptable.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Note to editors:</span> Program output with escaped characters will be viewed as the character on the page so you need to 'escape-the-escapes' to make the RC entry display what would be shown in a plain text viewer (See <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Talk:XML_Creation#Escaping_Escapes" title="Talk:XML_Creation#Escaping_Escapes">this</a>).</p>
/// <p class="rosetta__paragraph">Alternately, output can be placed in <nowiki><lang xml></lang></nowiki> tags without any special treatment.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
