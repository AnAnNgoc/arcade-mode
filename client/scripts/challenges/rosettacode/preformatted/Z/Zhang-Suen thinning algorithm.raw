
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Zhang-Suen thinning algorithm
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">This is an algorithm used to thin a black and white i.e. one bit per pixel images.</p><br/><p class="rosetta__paragraph">For example, with an input image of:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">                                                           
///  #################                   #############         
///  ##################               ################         
///  ###################            ##################         
///  ########     #######          ###################         
///    ######     #######         #######       ######         
///    ######     #######        #######                       
///    #################         #######                       
///    ################          #######                       
///    #################         #######                       
///    ######     #######        #######                       
///    ######     #######        #######                       
///    ######     #######         #######       ######         
///  ########     #######          ###################         
///  ########     ####### ######    ################## ######  
///  ########     ####### ######      ################ ######  
///  ########     ####### ######         ############# ######  
///                                                            </pre></div>
/// <p class="rosetta__paragraph">It produces the thinned output:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">                                                           

///     # ##########                       #######             
///      ##        #                   ####       #            
///      #          #                 ##                       
///      #          #                #                         
///      #          #                #                         
///      #          #                #                         
///      ############               #                          
///      #          #               #                          
///      #          #                #                         
///      #          #                #                         
///      #          #                #                         
///      #                            ##                       
///      #                             ############            
///                        ###                          ###    

///                                                            </pre></div><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Algorithm:</dt></dl>
/// <p class="rosetta__paragraph">Assume black pixels are one and white pixels zero, and that the input image is a rectangular N by M array of ones and zeroes.</p><br/><p class="rosetta__paragraph">The algorithm operates on all black pixels P1 that can have eight neighbours. The neighbours are, in order, arranged as:</p>
/// <p class="rosetta__paragraph"><table border="1"></p>
/// <p class="rosetta__paragraph"><tr><td>P9</td><td>P2</td><td>P3</td></tr></p>
/// <p class="rosetta__paragraph"><tr><td>P8</td><td><b>P1</b></td><td>P4</td></tr></p>
/// <p class="rosetta__paragraph"><tr><td>P7</td><td>P6</td><td>P5</td></tr></p>
/// </table><br/><p class="rosetta__paragraph">Obviously the boundary pixels of the image cannot have the full eight neighbours.</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Define $A(P1)$ = the number of transitions from white to black, (0 -> 1) in the sequence P2,P3,P4,P5,P6,P7,P8,P9,P2. (Note the extra P2 at the end - it is circular).</li>
/// <li class="rosetta__list-item--unordered">Define $B(P1)$ = The number of black pixel neighbours of P1. ( = sum(P2 .. P9) )</li></ul>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Step 1:</dt></dl>
/// <p class="rosetta__paragraph">All pixels are tested and pixels satisfying all the following conditions (simultaneously) are just noted at this stage.</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">(0) The pixel is black and has eight neighbours</li>
/// <li class="rosetta__list-item--unordered">(1) $2 <= B(P1) <= 6$</li>
/// <li class="rosetta__list-item--unordered">(2) A(P1) = 1</li>
/// <li class="rosetta__list-item--unordered">(3) At least one of P2 and P4 and P6 is white</li>
/// <li class="rosetta__list-item--unordered">(4) At least one of P4 and P6 and P8 is white</li></ul>After iterating over the image and collecting all the pixels satisfying all step 1 conditions, all these condition satisfying pixels are set to white.<br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Step 2:</dt></dl>
/// <p class="rosetta__paragraph">All pixels are again tested and pixels satisfying all the following conditions are just noted at this stage.</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">(0) The pixel is black and has eight neighbours</li>
/// <li class="rosetta__list-item--unordered">(1) $2 <= B(P1) <= 6$</li>
/// <li class="rosetta__list-item--unordered">(2) A(P1) = 1</li>
/// <li class="rosetta__list-item--unordered">(3) At least one of P2 and P4 and <span class="rosetta__text--bold">P8</span> is white</li>
/// <li class="rosetta__list-item--unordered">(4) At least one of <span class="rosetta__text--bold">P2</span> and P6 and P8 is white</li></ul>After iterating over the image and collecting all the pixels satisfying all step 2 conditions, all these condition satisfying pixels are again set to white.<br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Iteration:</dt></dl>
/// <p class="rosetta__paragraph">If any pixels were set in this round of either step 1 or step 2 then all steps are repeated until no image pixels are so changed.</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">Write a routine to perform Zhang-Suen thinning on an image matrix of ones and zeroes.</li>
/// <li class="rosetta__list-item--ordered">Use the routine to thin the following image and show the output here on this page as either a matrix of ones and zeroes, an image, or an ASCII-art image of space/non-space characters.</li></ol><div class="rosetta__pre-wrap"><pre class="rosetta__pre">00000000000000000000000000000000
/// 01111111110000000111111110000000
/// 01110001111000001111001111000000
/// 01110000111000001110000111000000
/// 01110001111000001110000000000000
/// 01111111110000001110000000000000
/// 01110111100000001110000111000000
/// 01110011110011101111001111011100
/// 01110001111011100111111110011100
/// 00000000000000000000000000000000</pre></div><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Reference:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--wiki" href="http://nayefreza.wordpress.com/2013/05/11/zhang-suen-thinning-algorithm-java-implementation/" title="link: http://nayefreza.wordpress.com/2013/05/11/zhang-suen-thinning-algorithm-java-implementation/">Zhang-Suen Thinning Algorithm, Java Implementation</a> by Nayef Reza.</li>
/// <li class="rosetta__list-item--unordered">"Character Recognition Systems: A Guide for Students and Practitioners" By Mohamed Cheriet, Nawwaf Kharma, Cheng-Lin Liu, Ching Suen</li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function Point(x, y) {
    this.x = x;
    this.y = y;
}
var ZhangSuen = (function () {
    function ZhangSuen() {
    }
    ZhangSuen.image = 
    ["                                                          ",
     " #################                   #############        ",
     " ##################               ################        ",
     " ###################            ##################        ",
     " ########     #######          ###################        ",
     "   ######     #######         #######       ######        ",
     "   ######     #######        #######                      ",
     "   #################         #######                      ",
     "   ################          #######                      ",
     "   #################         #######                      ",
     "   ######     #######        #######                      ",
     "   ######     #######        #######                      ",
     "   ######     #######         #######       ######        ",
     " ########     #######          ###################        ",
     " ########     ####### ######    ################## ###### ",
     " ########     ####### ######      ################ ###### ",
     " ########     ####### ######         ############# ###### ",
     "                                                          "];

    ZhangSuen.nbrs = [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1]];

    ZhangSuen.nbrGroups = [[[0, 2, 4], [2, 4, 6]], [[0, 2, 6], [0, 4, 6]]];

    ZhangSuen.toWhite = new Array();
    ;
    ZhangSuen.main = function (args) {
        ZhangSuen.grid = new Array(ZhangSuen.image.length);
        for (var r = 0; r < ZhangSuen.image.length; r++)
            ZhangSuen.grid[r] = (ZhangSuen.image[r]).split('');
        ZhangSuen.thinImage();
    };
    ZhangSuen.thinImage = function () {
        var firstStep = false;
        var hasChanged;
        do {
            hasChanged = false;
            firstStep = !firstStep;
            for (var r = 1; r < ZhangSuen.grid.length - 1; r++) {
                for (var c = 1; c < ZhangSuen.grid[0].length - 1; c++) {
                    if (ZhangSuen.grid[r][c] !== '#')
                        continue;
                    var nn = ZhangSuen.numNeighbors(r, c);
                    if (nn < 2 || nn > 6)
                        continue;
                    if (ZhangSuen.numTransitions(r, c) !== 1)
                        continue;
                    if (!ZhangSuen.atLeastOneIsWhite(r, c, firstStep ? 0 : 1))
                        continue;
                    ZhangSuen.toWhite.push(new Point(c, r));
                    hasChanged = true;
                }
            }
            for (let i = 0; i < ZhangSuen.toWhite.length; i++) {
                var p = ZhangSuen.toWhite[i];
                ZhangSuen.grid[p.y][p.x] = ' ';
            }
            ZhangSuen.toWhite = new Array();
        } while ((firstStep || hasChanged));
        ZhangSuen.printResult();
    };
    ZhangSuen.numNeighbors = function (r, c) {
        var count = 0;
        for (var i = 0; i < ZhangSuen.nbrs.length - 1; i++)
            if (ZhangSuen.grid[r + ZhangSuen.nbrs[i][1]][c + ZhangSuen.nbrs[i][0]] === '#')
                count++;
        return count;
    };
    ZhangSuen.numTransitions = function (r, c) {
        var count = 0;
        for (var i = 0; i < ZhangSuen.nbrs.length - 1; i++)
            if (ZhangSuen.grid[r + ZhangSuen.nbrs[i][1]][c + ZhangSuen.nbrs[i][0]] === ' ') {
                if (ZhangSuen.grid[r + ZhangSuen.nbrs[i + 1][1]][c + ZhangSuen.nbrs[i + 1][0]] === '#')
                    count++;
            }
        return count;
    };
    ZhangSuen.atLeastOneIsWhite = function (r, c, step) {
        var count = 0;
        var group = ZhangSuen.nbrGroups[step];
        for (var i = 0; i < 2; i++)
            for (var j = 0; j < group[i].length; j++) {
                var nbr = ZhangSuen.nbrs[group[i][j]];
                if (ZhangSuen.grid[r + nbr[1]][c + nbr[0]] === ' ') {
                    count++;
                    break;
                }
            }
        return count > 1;
    };
    ZhangSuen.printResult = function () {
        for (var i = 0; i < ZhangSuen.grid.length; i++) {
            var row = ZhangSuen.grid[i];
            console.log(row.join(''));
        }
    };
    return ZhangSuen;
}());
ZhangSuen.main(null);

/// rawSolutions:
=={{header|JavaScript}}==
{{trans|Java}}
<lang javascript>function Point(x, y) {
    this.x = x;
    this.y = y;
}
var ZhangSuen = (function () {
    function ZhangSuen() {
    }
    ZhangSuen.image = 
    ["                                                          ",
     " #################                   #############        ",
     " ##################               ################        ",
     " ###################            ##################        ",
     " ########     #######          ###################        ",
     "   ######     #######         #######       ######        ",
     "   ######     #######        #######                      ",
     "   #################         #######                      ",
     "   ################          #######                      ",
     "   #################         #######                      ",
     "   ######     #######        #######                      ",
     "   ######     #######        #######                      ",
     "   ######     #######         #######       ######        ",
     " ########     #######          ###################        ",
     " ########     ####### ######    ################## ###### ",
     " ########     ####### ######      ################ ###### ",
     " ########     ####### ######         ############# ###### ",
     "                                                          "];

    ZhangSuen.nbrs = [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1], [0, -1]];

    ZhangSuen.nbrGroups = [[[0, 2, 4], [2, 4, 6]], [[0, 2, 6], [0, 4, 6]]];

    ZhangSuen.toWhite = new Array();
    ;
    ZhangSuen.main = function (args) {
        ZhangSuen.grid = new Array(ZhangSuen.image.length);
        for (var r = 0; r < ZhangSuen.image.length; r++)
            ZhangSuen.grid[r] = (ZhangSuen.image[r]).split('');
        ZhangSuen.thinImage();
    };
    ZhangSuen.thinImage = function () {
        var firstStep = false;
        var hasChanged;
        do {
            hasChanged = false;
            firstStep = !firstStep;
            for (var r = 1; r < ZhangSuen.grid.length - 1; r++) {
                for (var c = 1; c < ZhangSuen.grid[0].length - 1; c++) {
                    if (ZhangSuen.grid[r][c] !== '#')
                        continue;
                    var nn = ZhangSuen.numNeighbors(r, c);
                    if (nn < 2 || nn > 6)
                        continue;
                    if (ZhangSuen.numTransitions(r, c) !== 1)
                        continue;
                    if (!ZhangSuen.atLeastOneIsWhite(r, c, firstStep ? 0 : 1))
                        continue;
                    ZhangSuen.toWhite.push(new Point(c, r));
                    hasChanged = true;
                }
            }
            for (let i = 0; i < ZhangSuen.toWhite.length; i++) {
                var p = ZhangSuen.toWhite[i];
                ZhangSuen.grid[p.y][p.x] = ' ';
            }
            ZhangSuen.toWhite = new Array();
        } while ((firstStep || hasChanged));
        ZhangSuen.printResult();
    };
    ZhangSuen.numNeighbors = function (r, c) {
        var count = 0;
        for (var i = 0; i < ZhangSuen.nbrs.length - 1; i++)
            if (ZhangSuen.grid[r + ZhangSuen.nbrs[i][1]][c + ZhangSuen.nbrs[i][0]] === '#')
                count++;
        return count;
    };
    ZhangSuen.numTransitions = function (r, c) {
        var count = 0;
        for (var i = 0; i < ZhangSuen.nbrs.length - 1; i++)
            if (ZhangSuen.grid[r + ZhangSuen.nbrs[i][1]][c + ZhangSuen.nbrs[i][0]] === ' ') {
                if (ZhangSuen.grid[r + ZhangSuen.nbrs[i + 1][1]][c + ZhangSuen.nbrs[i + 1][0]] === '#')
                    count++;
            }
        return count;
    };
    ZhangSuen.atLeastOneIsWhite = function (r, c, step) {
        var count = 0;
        var group = ZhangSuen.nbrGroups[step];
        for (var i = 0; i < 2; i++)
            for (var j = 0; j < group[i].length; j++) {
                var nbr = ZhangSuen.nbrs[group[i][j]];
                if (ZhangSuen.grid[r + nbr[1]][c + nbr[0]] === ' ') {
                    count++;
                    break;
                }
            }
        return count > 1;
    };
    ZhangSuen.printResult = function () {
        for (var i = 0; i < ZhangSuen.grid.length; i++) {
            var row = ZhangSuen.grid[i];
            console.log(row.join(''));
        }
    };
    return ZhangSuen;
}());
ZhangSuen.main(null);</lang>

Output:

<pre>                                                          
    # ##########                       #######            
     ##        #                   ####       #           
     #          #                 ##                      
     #          #                #                        
     #          #                #                        
     #          #                #                        
     ############               #                         
     #          #               #                         
     #          #                #                        
     #          #                #                        
     #          #                #                        
     #                            ##                      
     #                             ############           
                       ###                          ###    </pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84352665b21eecc80af
