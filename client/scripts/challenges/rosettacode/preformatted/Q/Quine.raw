
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Quine
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">A <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Quine_%28computing%29" title="wp: Quine_%28computing%29">Quine</a> is a self-referential program that can,</p>
/// <p class="rosetta__paragraph">without any external access, output its own source.</p><br/><p class="rosetta__paragraph">It is named after the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Willard_Van_Orman_Quine" title="wp: Willard_Van_Orman_Quine">philosopher and logician</a></p>
/// <p class="rosetta__paragraph">who studied self-reference and quoting in natural language,</p>
/// <p class="rosetta__paragraph">as for example in the paradox "'Yields falsehood when preceded by its quotation' yields falsehood when preceded by its quotation."</p><br/><p class="rosetta__paragraph">"Source" has one of two meanings. It can refer to the text-based program source.</p>
/// <p class="rosetta__paragraph">For languages in which program source is represented as a data structure, "source" may refer to the data structure: quines in these languages fall into two categories: programs which print a textual representation of themselves, or expressions which evaluate to a data structure which is equivalent to that expression.</p><br/><p class="rosetta__paragraph">The usual way to code a Quine works similarly to this paradox: The program consists of two identical parts, once as plain code and once <span class="rosetta__text--italic">quoted</span> in some way (for example, as a character string, or a literal data structure). The plain code then accesses the quoted code and prints it out twice, once unquoted and once with the proper quotation marks added. Often, the plain code and the quoted code have to be nested.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Write a program that outputs its own source code in this way. If the language allows it, you may add a variant that accesses the code directly. You are not allowed to read any external files with the source code. The program should also contain some sort of self-reference, so constant expressions which return their own value which some top-level interpreter will print out.  Empty programs producing no output are not allowed.</p><br/><p class="rosetta__paragraph">There are several difficulties that one runs into when writing a quine, mostly dealing with quoting:</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Part of the code usually needs to be stored as a string or structural literal in the language, which needs to be quoted somehow. However, including quotation marks in the string literal itself would be troublesome because it requires them to be escaped, which then necessitates the escaping character (e.g. a backslash) in the string, which itself usually needs to be escaped, and so on.</li>
/// <li class="rosetta__list-item--unordered">* Some languages have a function for getting the "source code representation" of a string (i.e. adds quotation marks, etc.); in these languages, this can be used to circumvent the quoting problem.</li>
/// <li class="rosetta__list-item--unordered">* Another solution is to construct the quote character from its <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/character code" title="character code">character code</a>, without having to write the quote character itself. Then the character is inserted into the string at the appropriate places. The ASCII code for double-quote is 34, and for single-quote is 39.</li>
/// <li class="rosetta__list-item--unordered">Newlines in the program may have to be reproduced as newlines in the string, which usually requires some kind of escape sequence (e.g. "\n"). This causes the same problem as above, where the escaping character needs to itself be escaped, etc.</li>
/// <li class="rosetta__list-item--unordered">* If the language has a way of getting the "source code representation", it usually handles the escaping of characters, so this is not a problem.</li>
/// <li class="rosetta__list-item--unordered">* Some languages allow you to have a string literal that spans multiple lines, which embeds the newlines into the string without escaping.</li>
/// <li class="rosetta__list-item--unordered">* Write the entire program on one line, for free-form languages (as you can see for some of the solutions here, they run off the edge of the screen), thus removing the need for newlines. However, this may be unacceptable as some languages require a newline at the end of the file; and otherwise it is still generally good style to have a newline at the end of a file. (The task is not clear on whether a newline is required at the end of the file.) Some languages have a print statement that appends a newline; which solves the newline-at-the-end issue; but others do not.</li></ul>
/// <br>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">Next to the Quines presented here, many other versions can be found on the <a class="rosetta__link--wiki" href="http://www.nyx.net/~gthompso/quine.htm" title="link: http://www.nyx.net/~gthompso/quine.htm">Quine</a> page.</span></p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(function(){print("("+arguments.callee.toString().replace(/\s/g,'')+")()");})()

/// rawSolutions:
=={{header|JavaScript}}==
{{works with|SpiderMonkey}} 1.7.0
<lang javascript>(function(){print("("+arguments.callee.toString().replace(/\s/g,'')+")()");})()</lang>

=== Using eval ===
{{works with|SpiderMonkey}} 1.7.0
This version doesn't use arguments.callee.toString() to return the string representation of itself. Instead, it relies on eval().
<lang javascript>var code='var q=String.fromCharCode(39);print("var code="+q+code+q+";eval(code)")';eval(code)</lang>

=== Replacing String ===
<lang JavaScript>(function(){str=["(function(){str=[F].join(String.fromCharCode(34));str=str.replace(/F/,String.fromCharCode(34)+str+String.fromCharCode(34));console.log(str)})()"].join(String.fromCharCode(34));str=str.replace(/F/,String.fromCharCode(34)+str+String.fromCharCode(34));console.log(str)})()</lang>

===Another Method===
<lang javascript>var a=function () {var b="var a="+a.toString()+"\;a()";alert(b)};a()</lang>

===A simple module which simply evaluates to itself===

<lang javascript>(function f() {
 
    return '(' + f.toString() + ')();';
    
})();</lang>

{{Out}}

<lang javascript>(function f() {

    return '(' + f.toString() + ')();';
    
})();</lang>

===Or logs itself to the console===
<lang javascript>(function f() {

    console.log('(' + f.toString() + ')();');

})();</lang>

{{Out}}
<pre>(function f() {

    console.log('(' + f.toString() + ')();');

})();</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
