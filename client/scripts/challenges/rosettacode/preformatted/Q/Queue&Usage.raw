
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Queue/Usage
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Create a queue data structure and demonstrate its operations.</p><br/><p class="rosetta__paragraph">(For implementations of queues, see the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/FIFO" title="FIFO">FIFO</a> task.)</p>
/// <br/><p class="rosetta__paragraph">Operations:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  push             (aka <span class="rosetta__text--italic">enqueue</span>) - add element</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  pop        (aka <span class="rosetta__text--italic">dequeue</span>) - pop first element</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  empty                  - return truth value when empty</span></p><br/><br><br/><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var f = new Array();
print(f.length);
f.push(1,2);         // can take multiple arguments
f.push(3);
f.shift();
f.shift();
print(f.length);
print(f.shift())
print(f.length == 0);
print(f.shift());

/// rawSolutions:
=={{header|JavaScript}}==
JavaScript arrays can be used as FIFOs.
<lang javascript>var f = new Array();
print(f.length);
f.push(1,2);         // can take multiple arguments
f.push(3);
f.shift();
f.shift();
print(f.length);
print(f.shift())
print(f.length == 0);
print(f.shift());</lang>

outputs:
<pre>0
1
3
true
undefined</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
