
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Hofstadter Figure-Figure sequences
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">These two sequences of positive integers are defined as:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::: <big>$\begin{align}</span></p>
/// <p class="rosetta__paragraph">R(1)&=1\ ;\ S(1)=2 \\</p>
/// <p class="rosetta__paragraph">R(n)&=R(n-1)+S(n-1), \quad n>1.</p>
/// <p class="rosetta__paragraph">\end{align}$</big></p><br/><br>
/// <p class="rosetta__paragraph">The sequence <big>$S(n)$</big> is further defined as the sequence of positive integers <span class="rosetta__text--bold"><span class="rosetta__text--italic">not</span></span> present in <big>$R(n)$</big>.</p><br/><p class="rosetta__paragraph">Sequence <big>$R$</big> starts:</p>
/// <p class="rosetta__paragraph">1, 3, 7, 12, 18, ...</p>
/// <p class="rosetta__paragraph">Sequence <big>$S$</big> starts:</p>
/// <p class="rosetta__paragraph">2, 4, 5, 6, 8, ...</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">Create two functions named <span class="rosetta__text--bold">ffr</span> and <span class="rosetta__text--bold">ffs</span> that when given <span class="rosetta__text--bold">n</span> return <span class="rosetta__text--bold">R(n)</span> or <span class="rosetta__text--bold">S(n)</span> respectively.<br>(Note that R(1) = 1 and S(1) = 2 to avoid off-by-one errors).</li>
/// <li class="rosetta__list-item--ordered">No maximum value for <span class="rosetta__text--bold">n</span> should be assumed.</li>
/// <li class="rosetta__list-item--ordered">Calculate and show that the first ten values of <span class="rosetta__text--bold">R</span> are:<br> 1, 3, 7, 12, 18, 26, 35, 45, 56, and 69</li>
/// <li class="rosetta__list-item--ordered">Calculate and show that the first 40 values of <span class="rosetta__text--bold">ffr</span> plus the first 960 values of <span class="rosetta__text--bold">ffs</span> include all the integers from 1 to 1000 exactly once.</li></ol><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">References:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Sloane's <a class="rosetta__link--wiki" href="http://oeis.org/A005228" title="link: http://oeis.org/A005228">A005228</a> and <a class="rosetta__link--wiki" href="http://oeis.org/A030124" title="link: http://oeis.org/A030124">A030124</a>.</li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--wiki" href="http://mathworld.wolfram.com/HofstadterFigure-FigureSequence.html" title="link: http://mathworld.wolfram.com/HofstadterFigure-FigureSequence.html">Wolfram MathWorld</a></li>
/// <li class="rosetta__list-item--unordered">Wikipedia: <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Hofstadter_sequence#Hofstadter_Figure-Figure_sequences" title="wp: Hofstadter_sequence#Hofstadter_Figure-Figure_sequences">Hofstadter Figure-Figure sequences</a>.</li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var R = [null, 1];
var S = [null, 2];

var extend_sequences = function (n) {
	var current = Math.max(R[R.length-1],S[S.length-1]);
	var i;
	while (R.length <= n || S.length <= n) {
		i = Math.min(R.length, S.length) - 1;
		current += 1;
		if (current === R[i] + S[i]) {
			R.push(current);
		} else {
			S.push(current);
		}
	}
}

var ffr = function(n) {
	extend_sequences(n);
	return R[n];
};

var ffs = function(n) {
	extend_sequences(n);
	return S[n];
};

for (var i = 1; i <=10; i += 1) {
   console.log('R('+ i +') = ' + ffr(i));
}

var int_array = [];

for (var i = 1; i <= 40; i += 1) {
	int_array.push(ffr(i));
}
for (var i = 1; i <= 960; i += 1) {
	int_array.push(ffs(i));
}

int_array.sort(function(a,b){return a-b;});

for (var i = 1; i <= 1000; i += 1) {
	if (int_array[i-1] !== i) { 
		throw "Something's wrong!" 
	} else { console.log("1000 integer check ok."); }
}

/// rawSolutions:
=={{header|JavaScript}}==
{{trans|Ruby}}
<lang JavaScript>var R = [null, 1];
var S = [null, 2];

var extend_sequences = function (n) {
	var current = Math.max(R[R.length-1],S[S.length-1]);
	var i;
	while (R.length <= n || S.length <= n) {
		i = Math.min(R.length, S.length) - 1;
		current += 1;
		if (current === R[i] + S[i]) {
			R.push(current);
		} else {
			S.push(current);
		}
	}
}

var ffr = function(n) {
	extend_sequences(n);
	return R[n];
};

var ffs = function(n) {
	extend_sequences(n);
	return S[n];
};

for (var i = 1; i <=10; i += 1) {
   console.log('R('+ i +') = ' + ffr(i));
}

var int_array = [];

for (var i = 1; i <= 40; i += 1) {
	int_array.push(ffr(i));
}
for (var i = 1; i <= 960; i += 1) {
	int_array.push(ffs(i));
}

int_array.sort(function(a,b){return a-b;});

for (var i = 1; i <= 1000; i += 1) {
	if (int_array[i-1] !== i) { 
		throw "Something's wrong!" 
	} else { console.log("1000 integer check ok."); }
}</lang>
Output:
<pre>R(1) = 1
R(2) = 3
R(3) = 7
R(4) = 12
R(5) = 18
R(6) = 26
R(7) = 35
R(8) = 45
R(9) = 56
R(10) = 69
1000 integer check ok.</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7ea1
