
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Hash join
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">An <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Join_(SQL)#Inner_join" title="wp: Join_(SQL)#Inner_join">inner join</a> is an operation that combines two data tables into one table, based on matching column values. The simplest way of implementing this operation is the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Nested loop join" title="wp: Nested loop join">nested loop join</a> algorithm, but a more scalable alternative is the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/hash join" title="wp: hash join">hash join</a> algorithm.</p>
/// <br/>
/// <p class="rosetta__paragraph">Implement the "hash join" algorithm, and demonstrate that it passes the test-case listed below.</p><br/><p class="rosetta__paragraph">You should represent the tables as data structures that feel natural in your programming language.</p>
/// <br/>
/// <p class="rosetta__paragraph">The "hash join" algorithm consists of two steps:</p><br/><ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered"><span class="rosetta__text--bold">Hash phase:</span> Create a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Multimap" title="wp: Multimap">multimap</a> from one of the two tables, mapping from each join column value to all the rows that contain it.<br></li>
/// <li class="rosetta__list-item--ordered">* The multimap must support hash-based lookup which scales better than a simple linear search, because that's the whole point of this algorithm.</li>
/// <li class="rosetta__list-item--ordered">* Ideally we should create the multimap for the <span class="rosetta__text--italic">smaller</span> table, thus minimizing its creation time and memory size.</li>
/// <li class="rosetta__list-item--ordered"><span class="rosetta__text--bold">Join phase:</span> Scan the other table, and find matching rows by looking in the multimap created before.</li></ol>
/// <br>
/// <p class="rosetta__paragraph">In pseudo-code, the algorithm could be expressed as follows:</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">let</span> <span class="rosetta__text--italic">A</span> = the first input table (or ideally, the larger one)</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">let</span> <span class="rosetta__text--italic">B</span> = the second input table (or ideally, the smaller one)</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">let</span> <span class="rosetta__text--italic">j<sub>A</sub></span> = the join column ID of table <span class="rosetta__text--italic">A</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">let</span> <span class="rosetta__text--italic">j<sub>B</sub></span> = the join column ID of table <span class="rosetta__text--italic">B</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">let</span> <span class="rosetta__text--italic">M<sub>B</sub></span> = a multimap for mapping from single values to multiple rows of table <span class="rosetta__text--italic">B</span> (starts out empty)</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">let</span> <span class="rosetta__text--italic">C</span> = the output table (starts out empty)</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">for each</span> row <span class="rosetta__text--italic">b</span> <span class="rosetta__text--bold">in</span> table <span class="rosetta__text--italic">B<span class="rosetta__text--bold"></span>:</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">place</span> <span class="rosetta__text--italic">b</span> <span class="rosetta__text--bold">in</span> multimap <span class="rosetta__text--italic">M<sub>B</sub></span> under key <span class="rosetta__text--italic">b</span>(<span class="rosetta__text--italic">j<sub>B</sub></span>)</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">for each</span> row <span class="rosetta__text--italic">a</span> <span class="rosetta__text--bold">in</span> table <span class="rosetta__text--italic">A<span class="rosetta__text--bold"></span>:</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">for each</span> row <span class="rosetta__text--italic">b</span> <span class="rosetta__text--bold">in</span> multimap <span class="rosetta__text--italic">M<sub>B</sub></span> under key <span class="rosetta__text--italic">a</span>(<span class="rosetta__text--italic">j<sub>A</sub></span>)<span class="rosetta__text--bold">:</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">let</span> <span class="rosetta__text--italic">c</span> = the concatenation of row <span class="rosetta__text--italic">a</span> and row <span class="rosetta__text--italic">b</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">place</span> row <span class="rosetta__text--italic">c</span> in table <span class="rosetta__text--italic">C</span></p>
/// <br/>
/// <p class="rosetta__paragraph">{| class="wikitable"</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">! Input</p>
/// <p class="rosetta__paragraph">! Output</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">|</p><br/><p class="rosetta__paragraph">{| style="border:none; border-collapse:collapse;"</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| style="border:none" | <span class="rosetta__text--italic">A</span> =</p>
/// <p class="rosetta__paragraph">| style="border:none" |</p><br/><p class="rosetta__paragraph">{| class="wikitable"</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">! Age !! Name</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 27 || Jonah</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 18 || Alan</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 28 || Glory</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 18 || Popeye</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 28 || Alan</p>
/// <p class="rosetta__paragraph">|}</p><br/><p class="rosetta__paragraph">| style="border:none; padding-left:1.5em;" rowspan="2" |</p>
/// <p class="rosetta__paragraph">| style="border:none" | <span class="rosetta__text--italic">B</span> =</p>
/// <p class="rosetta__paragraph">| style="border:none" |</p><br/><p class="rosetta__paragraph">{| class="wikitable"</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">! Character !! Nemesis</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| Jonah || Whales</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| Jonah || Spiders</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| Alan || Ghosts</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| Alan || Zombies</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| Glory || Buffy</p>
/// <p class="rosetta__paragraph">|}</p><br/><p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| style="border:none" | <span class="rosetta__text--italic">j<sub>A</sub></span> =</p>
/// <p class="rosetta__paragraph">| style="border:none" | <code>Name</code> (i.e. column 1)</p><br/><p class="rosetta__paragraph">| style="border:none" | <span class="rosetta__text--italic">j<sub>B</sub></span> =</p>
/// <p class="rosetta__paragraph">| style="border:none" | <code>Character</code> (i.e. column 0)</p>
/// <p class="rosetta__paragraph">|}</p><br/><p class="rosetta__paragraph">|</p><br/><p class="rosetta__paragraph">{| class="wikitable" style="margin-left:1em"</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">! A.Age !! A.Name !! B.Character !! B.Nemesis</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 27 || Jonah || Jonah || Whales</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 27 || Jonah || Jonah || Spiders</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 18 || Alan || Alan || Ghosts</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 18 || Alan || Alan || Zombies</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 28 || Glory || Glory || Buffy</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 28 || Alan || Alan || Ghosts</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 28 || Alan || Alan || Zombies</p>
/// <p class="rosetta__paragraph">|}</p><br/><p class="rosetta__paragraph">|}</p><br/><p class="rosetta__paragraph">The order of the rows in the output table is not significant.<br></p>
/// <p class="rosetta__paragraph">If you're using numerically indexed arrays to represent table rows (rather than referring to columns by name), you could represent the output rows in the form <code style="white-space:nowrap"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/27, "Jonah"], ["Jonah", "Whales"" title="27, "Jonah"], ["Jonah", "Whales"">27, "Jonah"], ["Jonah", "Whales"</a></code>.</p><br/><br><hr><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(() => {
    'use strict';

    // hashJoin :: [Dict] -> [Dict] -> String -> [Dict]
    let hashJoin = (tblA, tblB, strJoin) => {

        let [jA, jB] = strJoin.split('='),
            M = tblB.reduce((a, x) => {
                let id = x[jB];
                return (
                    a[id] ? a[id].push(x) : a[id] = [x],
                    a
                );
            }, {});

        return tblA.reduce((a, x) => {
            let match = M[x[jA]];
            return match ? (
                a.concat(match.map(row => dictConcat(x, row)))
            ) : a;
        }, []);
    },

    // dictConcat :: Dict -> Dict -> Dict
    dictConcat = (dctA, dctB) => {
        let ok = Object.keys;
        return ok(dctB).reduce(
            (a, k) => (a['B_' + k] = dctB[k]) && a,
            ok(dctA).reduce(
                (a, k) => (a['A_' + k] = dctA[k]) && a, {}
            )
        );
    };


    // TEST
    let lstA = [
        { age: 27, name: 'Jonah' },
        { age: 18, name: 'Alan' },
        { age: 28, name: 'Glory' },
        { age: 18, name: 'Popeye' },
        { age: 28, name: 'Alan' }
    ],
    lstB = [
        { character: 'Jonah', nemesis: 'Whales' },
        { character: 'Jonah', nemesis: 'Spiders' },
        { character: 'Alan', nemesis: 'Ghosts' },
        { character:'Alan', nemesis: 'Zombies' },
        { character: 'Glory', nemesis: 'Buffy' },
        { character: 'Bob', nemesis: 'foo' }
    ];

    return hashJoin(lstA, lstB, 'name=character');
    
})();


/// rawSolutions:
=={{header|JavaScript}}==
===ES6===

<lang JavaScript>(() => {
    'use strict';

    // hashJoin :: [Dict] -> [Dict] -> String -> [Dict]
    let hashJoin = (tblA, tblB, strJoin) => {

        let [jA, jB] = strJoin.split('='),
            M = tblB.reduce((a, x) => {
                let id = x[jB];
                return (
                    a[id] ? a[id].push(x) : a[id] = [x],
                    a
                );
            }, {});

        return tblA.reduce((a, x) => {
            let match = M[x[jA]];
            return match ? (
                a.concat(match.map(row => dictConcat(x, row)))
            ) : a;
        }, []);
    },

    // dictConcat :: Dict -> Dict -> Dict
    dictConcat = (dctA, dctB) => {
        let ok = Object.keys;
        return ok(dctB).reduce(
            (a, k) => (a['B_' + k] = dctB[k]) && a,
            ok(dctA).reduce(
                (a, k) => (a['A_' + k] = dctA[k]) && a, {}
            )
        );
    };


    // TEST
    let lstA = [
        { age: 27, name: 'Jonah' },
        { age: 18, name: 'Alan' },
        { age: 28, name: 'Glory' },
        { age: 18, name: 'Popeye' },
        { age: 28, name: 'Alan' }
    ],
    lstB = [
        { character: 'Jonah', nemesis: 'Whales' },
        { character: 'Jonah', nemesis: 'Spiders' },
        { character: 'Alan', nemesis: 'Ghosts' },
        { character:'Alan', nemesis: 'Zombies' },
        { character: 'Glory', nemesis: 'Buffy' },
        { character: 'Bob', nemesis: 'foo' }
    ];

    return hashJoin(lstA, lstB, 'name=character');
    
})();
</lang>

{{Out}}
<pre>[{"A_age":27,"A_name":"Jonah","B_character":"Jonah","B_nemesis":"Whales"},
{"A_age":27,"A_name":"Jonah","B_character":"Jonah","B_nemesis":"Spiders"},
{"A_age":18,"A_name":"Alan","B_character":"Alan","B_nemesis":"Ghosts"},
{"A_age":18,"A_name":"Alan","B_character":"Alan","B_nemesis":"Zombies"},
{"A_age":28,"A_name":"Glory","B_character":"Glory","B_nemesis":"Buffy"},
{"A_age":28,"A_name":"Alan","B_character":"Alan","B_nemesis":"Ghosts"},
{"A_age":28,"A_name":"Alan","B_character":"Alan","B_nemesis":"Zombies"}]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7e92
