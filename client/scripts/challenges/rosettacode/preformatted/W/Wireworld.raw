
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Wireworld
/// type: rosetta-code

/// categories:
/// Cellular automata

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Wireworld" title="wp: Wireworld">Wireworld</a> is a cellular automaton with some similarities to <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Conway's Game of Life" title="Conway's Game of Life">Conway's Game of Life</a>.</p><br/><p class="rosetta__paragraph">It is capable of doing sophisticated computations with appropriate programs</p>
/// <p class="rosetta__paragraph">(it is actually <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Turing-complete" title="wp: Turing-complete">Turing complete</a>),</p>
/// <p class="rosetta__paragraph">and is much simpler to program for.</p><br/><p class="rosetta__paragraph">A Wireworld arena consists of a Cartesian grid of cells,</p>
/// <p class="rosetta__paragraph">each of which can be in one of four states.</p>
/// <p class="rosetta__paragraph">All cell transitions happen simultaneously.</p><br/><p class="rosetta__paragraph">The cell transition rules are this:</p>
/// <p class="rosetta__paragraph">{| class=wikitable</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">! Input State</p>
/// <p class="rosetta__paragraph">! Output State</p>
/// <p class="rosetta__paragraph">! Condition</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| <tt>empty</tt></p>
/// <p class="rosetta__paragraph">| <tt>empty</tt></p>
/// <p class="rosetta__paragraph">|</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| <tt>electronhead</tt></p>
/// <p class="rosetta__paragraph">| <tt>electrontail</tt></p>
/// <p class="rosetta__paragraph">|</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| <tt>electrontail</tt></p>
/// <p class="rosetta__paragraph">| <tt>conductor</tt></p>
/// <p class="rosetta__paragraph">|</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| valign=top | <tt>conductor</tt></p>
/// <p class="rosetta__paragraph">| valign=top | <tt>electronhead</tt></p>
/// <p class="rosetta__paragraph">| if 1 or 2 cells in the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Moore neighborhood" title="wp: Moore neighborhood">neighborhood</a> of the cell are in the state “<tt>electron head</tt>”</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| <tt>conductor</tt></p>
/// <p class="rosetta__paragraph">| <tt>conductor</tt></p>
/// <p class="rosetta__paragraph">| otherwise</p>
/// <p class="rosetta__paragraph">|}</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Create a program that reads a Wireworld program from a file and displays an animation of the processing. Here is a sample description file (using "<tt>H</tt>" for an electron head, "<tt>t</tt>" for a tail, "<tt>.</tt>" for a conductor and a space for empty) you may wish to test with, which demonstrates two cycle-3 generators and an inhibit gate:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// tH.........
/// .   .
///    ...
/// .   .
/// Ht.. ......
/// </pre></div>
/// <p class="rosetta__paragraph">While text-only implementations of this task are possible, mapping cells to pixels is advisable if you wish to be able to display large designs. The logic is not significantly more complex.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:

var ctx, sizeW, sizeH, scl = 10, map, tmp;
function getNeighbour( i, j ) {
    var ii, jj, c = 0;
    for( var b = -1; b < 2; b++ ) {
        for( var a = -1; a < 2; a++ ) {
            ii = i + a; jj = j + b;
            if( ii < 0 || ii >= sizeW || jj < 0 || jj >= sizeH ) continue;
            if( map[ii][jj] == 1 ) c++;
        }
    }
    return ( c == 1 || c == 2 );
}
function simulate() {
    drawWorld();
    for( var j = 0; j < sizeH; j++ ) {
        for( var i = 0; i < sizeW; i++ ) {
            switch( map[i][j] ) {
                case 0: tmp[i][j] = 0; break;
                case 1: tmp[i][j] = 2; break;
                case 2: tmp[i][j] = 3; break;
                case 3: 
                    if( getNeighbour( i, j ) ) tmp[i][j] = 1;
                    else tmp[i][j] = 3;
                break;
            }
        }
    }
    [tmp, map] = [map, tmp]; 
    setTimeout( simulate, 200 );
}
function drawWorld() {
    ctx.fillStyle = "#000"; ctx.fillRect( 0, 0, sizeW * scl, sizeH * scl );
    for( var j = 0; j < sizeH; j++ ) {
        for( var i = 0; i < sizeW; i++ ) {
            switch( map[i][j] ) {
                case 0: continue;
                case 1: ctx.fillStyle = "#03f"; break;
                case 2: ctx.fillStyle = "#f30"; break;
                case 3: ctx.fillStyle = "#ff3"; break;
            }
            ctx.fillRect( i, j, 1, 1 );
        }
    }
}
function openFile( event ) {
    var input = event.target;
    var reader = new FileReader();
    reader.onload = function() {
        createWorld( reader.result );
    };
    reader.readAsText(input.files[0]);
}
function createWorld( txt ) {
    var l = txt.split( "\n" );
    sizeW = parseInt( l[0] );
    sizeH = parseInt( l[1] );
    map = new Array( sizeW );
    tmp = new Array( sizeW );
    for( var i = 0; i < sizeW; i++ ) {
        map[i] = new Array( sizeH );
        tmp[i] = new Array( sizeH );
        for( var j = 0; j < sizeH; j++ ) {
            map[i][j] = tmp[i][j] = 0;
        }
    }
    var t;
    for( var j = 0; j < sizeH; j++ ) {
        for( var i = 0; i < sizeW; i++ ) {
            switch( l[j + 2][i] ) {
                case " ": t = 0; break;
                case "H": t = 1; break;
                case "t": t = 2; break;
                case ".": t = 3; break;
            }
            map[i][j] = t;
        }
    }
    init();
}
function init() {
    var canvas = document.createElement( "canvas" );
    canvas.width = sizeW * scl;
    canvas.height = sizeH * scl;
    ctx = canvas.getContext( "2d" );
    ctx.scale( scl, scl );
    document.body.appendChild( canvas );
    simulate();
}


/// rawSolutions:
=={{header|JavaScript}}==
You have to search and open the file manually.<br />
This is the HTML you need to test.
<pre>
<!DOCTYPE html><html><head><meta charset="UTF-8">
<title>Wireworld</title>
<script src="wireworld.js"></script></head><body>
<input type='file' accept='text/plain' onchange='openFile( event )' />
<br /></body></html></pre>
<lang javascript>
var ctx, sizeW, sizeH, scl = 10, map, tmp;
function getNeighbour( i, j ) {
    var ii, jj, c = 0;
    for( var b = -1; b < 2; b++ ) {
        for( var a = -1; a < 2; a++ ) {
            ii = i + a; jj = j + b;
            if( ii < 0 || ii >= sizeW || jj < 0 || jj >= sizeH ) continue;
            if( map[ii][jj] == 1 ) c++;
        }
    }
    return ( c == 1 || c == 2 );
}
function simulate() {
    drawWorld();
    for( var j = 0; j < sizeH; j++ ) {
        for( var i = 0; i < sizeW; i++ ) {
            switch( map[i][j] ) {
                case 0: tmp[i][j] = 0; break;
                case 1: tmp[i][j] = 2; break;
                case 2: tmp[i][j] = 3; break;
                case 3: 
                    if( getNeighbour( i, j ) ) tmp[i][j] = 1;
                    else tmp[i][j] = 3;
                break;
            }
        }
    }
    [tmp, map] = [map, tmp]; 
    setTimeout( simulate, 200 );
}
function drawWorld() {
    ctx.fillStyle = "#000"; ctx.fillRect( 0, 0, sizeW * scl, sizeH * scl );
    for( var j = 0; j < sizeH; j++ ) {
        for( var i = 0; i < sizeW; i++ ) {
            switch( map[i][j] ) {
                case 0: continue;
                case 1: ctx.fillStyle = "#03f"; break;
                case 2: ctx.fillStyle = "#f30"; break;
                case 3: ctx.fillStyle = "#ff3"; break;
            }
            ctx.fillRect( i, j, 1, 1 );
        }
    }
}
function openFile( event ) {
    var input = event.target;
    var reader = new FileReader();
    reader.onload = function() {
        createWorld( reader.result );
    };
    reader.readAsText(input.files[0]);
}
function createWorld( txt ) {
    var l = txt.split( "\n" );
    sizeW = parseInt( l[0] );
    sizeH = parseInt( l[1] );
    map = new Array( sizeW );
    tmp = new Array( sizeW );
    for( var i = 0; i < sizeW; i++ ) {
        map[i] = new Array( sizeH );
        tmp[i] = new Array( sizeH );
        for( var j = 0; j < sizeH; j++ ) {
            map[i][j] = tmp[i][j] = 0;
        }
    }
    var t;
    for( var j = 0; j < sizeH; j++ ) {
        for( var i = 0; i < sizeW; i++ ) {
            switch( l[j + 2][i] ) {
                case " ": t = 0; break;
                case "H": t = 1; break;
                case "t": t = 2; break;
                case ".": t = 3; break;
            }
            map[i][j] = t;
        }
    }
    init();
}
function init() {
    var canvas = document.createElement( "canvas" );
    canvas.width = sizeW * scl;
    canvas.height = sizeH * scl;
    ctx = canvas.getContext( "2d" );
    ctx.scale( scl, scl );
    document.body.appendChild( canvas );
    simulate();
}
</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
