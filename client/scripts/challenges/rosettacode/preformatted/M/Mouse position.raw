
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Mouse position
/// type: rosetta-code

/// categories:
/// Testing
/// Hardware
/// Pointing devices

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <br/>
/// <br/>
/// <br/>
/// <br/>
/// <br/><br/><p class="rosetta__paragraph">Get the current location of the mouse cursor relative to the active window.</p>
/// <p class="rosetta__paragraph">Please specify if the window may be externally created.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
document.addEventListener('mousemove', function(e){
  var position = { x: e.clientX, y: e.clientY }
}

/// rawSolutions:
=={{header|JavaScript}}==

In a browser environment, it's impossible to actually get the cursor position 
at the specific moment. 
You must wait for user input (movement, click, etc). 
One of many ways to add an event listener:

<lang javascript>document.addEventListener('mousemove', function(e){
  var position = { x: e.clientX, y: e.clientY }
}</lang>

In the above example, the window may not be external. 
It must in fact be a web browser window, which runs the script.



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
