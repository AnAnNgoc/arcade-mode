
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Move-to-front algorithm
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">Given a symbol table of a <span class="rosetta__text--italic">zero-indexed</span> array of all possible input symbols</p>
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Move-to-front transform" title="wp: Move-to-front transform">this algorithm</a> reversibly transforms a sequence</p>
/// <p class="rosetta__paragraph">of input symbols into an array of output numbers (indices).<br></p>
/// <p class="rosetta__paragraph">The transform in many cases acts to give frequently repeated input symbols</p>
/// <p class="rosetta__paragraph">lower indices which is <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Move-to-front_transform#Use_in_practical_data_compression_algorithms" title="wp: Move-to-front_transform#Use_in_practical_data_compression_algorithms"> useful in some compression algorithms</a>.</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Encoding algorithm:</dt></dl>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">
///     for each symbol of the input sequence:
///         output the index of the symbol in the symbol table
///         move that symbol to the front of the symbol table
/// </pre></div><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Decoding algorithm:</dt></dl>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">
///     # Using the same starting symbol table
///     for each index of the input sequence:
///         output the symbol at that index of the symbol table
///         move that symbol to the front of the symbol table
/// </pre></div><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Example:</dt></dl>
/// <p class="rosetta__paragraph">Encoding the string of character symbols 'broood' using a symbol table of</p>
/// <p class="rosetta__paragraph">the characters 'a'-to-'z'</p><br/><p class="rosetta__paragraph">{| class="wikitable" border="1"</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">! Input</p>
/// <p class="rosetta__paragraph">! Output</p>
/// <p class="rosetta__paragraph">! SymbolTable</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| <span class="rosetta__text--bold">b</span>roood</p>
/// <p class="rosetta__paragraph">| 1</p>
/// <p class="rosetta__paragraph">| 'abcdefghijklmnopqrstuvwxyz'</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| b<span class="rosetta__text--bold">r</span>oood</p>
/// <p class="rosetta__paragraph">| 1 17</p>
/// <p class="rosetta__paragraph">| 'bacdefghijklmnopqrstuvwxyz'</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| br<span class="rosetta__text--bold">o</span>ood</p>
/// <p class="rosetta__paragraph">| 1 17 15</p>
/// <p class="rosetta__paragraph">| 'rbacdefghijklmnopqstuvwxyz'</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| bro<span class="rosetta__text--bold">o</span>od</p>
/// <p class="rosetta__paragraph">| 1 17 15 0</p>
/// <p class="rosetta__paragraph">| 'orbacdefghijklmnpqstuvwxyz'</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| broo<span class="rosetta__text--bold">o</span>d</p>
/// <p class="rosetta__paragraph">| 1 17 15 0 0</p>
/// <p class="rosetta__paragraph">| 'orbacdefghijklmnpqstuvwxyz'</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| brooo<span class="rosetta__text--bold">d</span></p>
/// <p class="rosetta__paragraph">| 1 17 15 0 0 5</p>
/// <p class="rosetta__paragraph">| 'orbacdefghijklmnpqstuvwxyz'</p>
/// <p class="rosetta__paragraph">|}</p><br/><p class="rosetta__paragraph">Decoding the indices back to the original symbol order:</p>
/// <p class="rosetta__paragraph">{| class="wikitable" border="1"</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">! Input</p>
/// <p class="rosetta__paragraph">! Output</p>
/// <p class="rosetta__paragraph">! SymbolTable</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">|  <span class="rosetta__text--bold">1</span> 17 15 0 0 5</p>
/// <p class="rosetta__paragraph">| b</p>
/// <p class="rosetta__paragraph">| 'abcdefghijklmnopqrstuvwxyz'</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 1 <span class="rosetta__text--bold">17</span> 15 0 0 5</p>
/// <p class="rosetta__paragraph">| br</p>
/// <p class="rosetta__paragraph">| 'bacdefghijklmnopqrstuvwxyz'</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 1 17 <span class="rosetta__text--bold">15</span> 0 0 5</p>
/// <p class="rosetta__paragraph">| bro</p>
/// <p class="rosetta__paragraph">| 'rbacdefghijklmnopqstuvwxyz'</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 1 17 15 <span class="rosetta__text--bold">0</span> 0 5</p>
/// <p class="rosetta__paragraph">| broo</p>
/// <p class="rosetta__paragraph">| 'orbacdefghijklmnpqstuvwxyz'</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 1 17 15 0 <span class="rosetta__text--bold">0</span> 5</p>
/// <p class="rosetta__paragraph">| brooo</p>
/// <p class="rosetta__paragraph">| 'orbacdefghijklmnpqstuvwxyz'</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| 1 17 15 0 0 <span class="rosetta__text--bold">5</span></p>
/// <p class="rosetta__paragraph">| broood</p>
/// <p class="rosetta__paragraph">| 'orbacdefghijklmnpqstuvwxyz'</p>
/// <p class="rosetta__paragraph">|}</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Encode and decode the following three strings of characters using the symbol table of the characters 'a'-to-'z' as above. </li>
/// <li class="rosetta__list-item--unordered">Show the strings and their encoding here.</li>
/// <li class="rosetta__list-item--unordered">Add a check to ensure that the decoded string is the same as the original.</li></ul>
/// <br>
/// <p class="rosetta__paragraph">The strings are:</p><br/><p class="rosetta__paragraph"><big> broood       </big></p>
/// <p class="rosetta__paragraph"><big> bananaaa     </big></p>
/// <p class="rosetta__paragraph"><big> hiphophiphop </big></p><br/><p class="rosetta__paragraph">(Note the spellings.)</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var encodeMTF = function (word) {
  var init = {wordAsNumbers: [], charList: 'abcdefghijklmnopqrstuvwxyz'.split('')};

  return word.split('').reduce(function (acc, char) {
    var charNum = acc.charList.indexOf(char); //get index of char
    acc.wordAsNumbers.push(charNum); //add original index to acc
    acc.charList.unshift(acc.charList.splice(charNum, 1)[0]); //put at beginning of list
    return acc;
  }, init).wordAsNumbers; //return number list
};

var decodeMTF = function (numList) {
  var init = {word: '', charList: 'abcdefghijklmnopqrstuvwxyz'.split('')};

  return numList.reduce(function (acc, num) {
    acc.word += acc.charList[num];
    acc.charList.unshift(acc.charList.splice(num, 1)[0]); //put at beginning of list
    return acc;
  }, init).word;
};

//test our algorithms
var words = ['broood', 'bananaaa', 'hiphophiphop'];
var encoded = words.map(encodeMTF);
var decoded = encoded.map(decodeMTF);

//print results
console.log("from encoded:");
console.log(encoded);
console.log("from decoded:");
console.log(decoded);

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>var encodeMTF = function (word) {
  var init = {wordAsNumbers: [], charList: 'abcdefghijklmnopqrstuvwxyz'.split('')};

  return word.split('').reduce(function (acc, char) {
    var charNum = acc.charList.indexOf(char); //get index of char
    acc.wordAsNumbers.push(charNum); //add original index to acc
    acc.charList.unshift(acc.charList.splice(charNum, 1)[0]); //put at beginning of list
    return acc;
  }, init).wordAsNumbers; //return number list
};

var decodeMTF = function (numList) {
  var init = {word: '', charList: 'abcdefghijklmnopqrstuvwxyz'.split('')};

  return numList.reduce(function (acc, num) {
    acc.word += acc.charList[num];
    acc.charList.unshift(acc.charList.splice(num, 1)[0]); //put at beginning of list
    return acc;
  }, init).word;
};

//test our algorithms
var words = ['broood', 'bananaaa', 'hiphophiphop'];
var encoded = words.map(encodeMTF);
var decoded = encoded.map(decodeMTF);

//print results
console.log("from encoded:");
console.log(encoded);
console.log("from decoded:");
console.log(decoded);</lang>
{{out}}
<pre>from encoded:
[
  [1, 17, 15, 0, 0, 5],
  [1, 1, 13, 1, 1, 1, 0, 0],
  [7, 8, 15, 2, 15, 2, 2, 3, 2, 2, 3, 2]
]
from decoded:
['broood', 'bananaaa', 'hiphophiphop']</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
