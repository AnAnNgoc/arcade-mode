
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Map range
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">Given two <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Interval (mathematics)" title="wp: Interval (mathematics)">ranges</a>:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::*  <big>$[a_1,a_2]$</big>  and </span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::*  <big>$[b_1,b_2]$</big>;  </span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::*  then a value  <big>$s$</big>  in range  <big>$[a_1,a_2]$</big></span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::*  is linearly mapped to a value  <big>$t$</big>  in range  <big>$[b_1,b_2]$</span></p>
/// </big>  where: 
/// <br><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">::*  <big><big>$t = b_1 + {(s - a_1)(b_2 - b_1) \over (a_2 - a_1)}$</big></big></span></p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Write a function/subroutine/... that takes two ranges and a real number, and returns the mapping of the real number from the first to the second range.</p><br/><p class="rosetta__paragraph">Use this function to map values from the range  <big><code> [0, 10] </code></big>  to the range  <big><code> [-1, 0]. </code></big></p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Extra credit:</dt></dl>
/// <p class="rosetta__paragraph">Show additional idiomatic ways of performing the mapping, using tools available to the language.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
// Javascript doesn't have built-in support for ranges
// Insted we use arrays of two elements to represent ranges
var mapRange = function(from, to, s) {
  return to[0] + (s - from[0]) * (to[1] - to[0]) / (from[1] - from[0]);
};

var range = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
for (var i = 0; i < range.length; i++) {
  range[i] = mapRange([0, 10], [-1, 0], range[i]);
}

console.log(range);

/// rawSolutions:
=={{header|JavaScript}}==
<lang JavaScript>// Javascript doesn't have built-in support for ranges
// Insted we use arrays of two elements to represent ranges
var mapRange = function(from, to, s) {
  return to[0] + (s - from[0]) * (to[1] - to[0]) / (from[1] - from[0]);
};

var range = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
for (var i = 0; i < range.length; i++) {
  range[i] = mapRange([0, 10], [-1, 0], range[i]);
}

console.log(range);</lang>
{{out}}
<pre>[-1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.30000000000000004, -0.19999999999999996, -0.09999999999999998, 0]</pre>

=== Extra credit ===
Here we will use the [https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map ECMAScript 5 support for map] and the [http://underscorejs.org/#range _.range] function from Underscore.js.
{{libheader|Underscore.js}}
<lang JavaScript>var mapRange = function(from, to, s) {
  // mapRange expects ranges generated by _.range
  var a1 = from[0];
  var a2 = from[from.length - 1];
  var b1 = to[0];
  var b2 = to[to.length - 1];
  return b1 + (s - a1) * (b2 - b1) / (a2 - a1);
};

// The range function is exclusive
var fromRange = _.range(0, 11);
var toRange = _.range(-1, 1);

// .map constructs a new array
fromRange = fromRange.map(function(s) {
  return mapRange(fromRange, toRange, s);
});

console.log(fromRange);</lang>
{{out}}
<pre>[-1, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.30000000000000004, -0.19999999999999996, -0.09999999999999998, 0]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7f0a
