
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Constrained genericity
/// type: rosetta-code

/// categories:
/// Type System

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Constrained genericity</span> or <span class="rosetta__text--bold">bounded quantification</span> means</p>
/// <p class="rosetta__paragraph">that a parametrized type or function (see <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/parametric polymorphism" title="parametric polymorphism">parametric polymorphism</a>)</p>
/// <p class="rosetta__paragraph">can only be instantiated on types fulfilling some conditions,</p>
/// <p class="rosetta__paragraph">even if those conditions are not used in that function.</p><br/><p class="rosetta__paragraph">Say a type is called "eatable" if you can call the function <tt>eat</tt> on it.</p>
/// <p class="rosetta__paragraph">Write a generic type <tt>FoodBox</tt> which contains a collection of objects of</p>
/// <p class="rosetta__paragraph">a type given as parameter, but can only be instantiated on eatable types.</p>
/// <p class="rosetta__paragraph">The FoodBox shall not use the function eat in any way (i.e. without the explicit restriction, it could be instantiated on any type).</p>
/// <p class="rosetta__paragraph">The specification of a type being eatable should be as generic as possible</p>
/// <p class="rosetta__paragraph">in your language (i.e. the restrictions on the implementation of eatable types</p>
/// <p class="rosetta__paragraph">should be as minimal as possible).</p>
/// <p class="rosetta__paragraph">Also explain the restrictions, if any, on the implementation of eatable types,</p>
/// <p class="rosetta__paragraph">and show at least one example of an eatable type.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
