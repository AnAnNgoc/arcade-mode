
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Color quantization
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/file:quantum_frog.png" title="file:quantum_frog.png">full color|thumb|left|192px</a><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/file:quantum_frog_16.png" title="file:quantum_frog_16.png">Example: Gimp 16 color|thumb|left|192px</a></p>
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Color_quantization" title="wp: Color_quantization">Color quantization</a> is the process of reducing number of colors used in an image while trying to maintain the visual appearance of the original image.  In general, it is a form of <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Cluster_analysis" title="wp: Cluster_analysis">cluster analysis</a>, if each RGB color value is considered as a coordinate triple in the 3D colorspace.  There are some well know algorithms [http://web.cs.wpi.edu/~matt/courses/cs563/talks/color_quant/CQindex.html], each with its own advantages and drawbacks.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Task</span>: Take an RGB color image and reduce its colors to some smaller number (< 256).  For this task, use the frog as input and reduce colors to 16, and output the resulting colors.  The chosen colors should be adaptive to the input image, meaning you should <span class="rosetta__text--italic">not</span> use a fixed palette such as Web colors or Windows system palette.  Dithering is not required.</p><br/><p class="rosetta__paragraph">Note: the funny color bar on top of the frog image is intentional.</p>
/// <br clear=left>
/// </div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
