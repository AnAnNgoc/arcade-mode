
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Count occurrences of a substring
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Create a function,  or show a built-in function,  to count the number of non-overlapping occurrences of a substring inside a string.</p><br/><p class="rosetta__paragraph">The function should take two arguments:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::*  the first argument being the string to search,  and </span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::*  the second a substring to be searched for. </span></p>
/// <br/><p class="rosetta__paragraph">It should return an integer count.</p>
/// <p class="rosetta__paragraph"><lang pseudocode>print countSubstring("the three truths","th")</p>
/// <p class="rosetta__paragraph">3</p><br/><p class="rosetta__paragraph">// do not count substrings that overlap with previously-counted substrings:</p>
/// <p class="rosetta__paragraph">print countSubstring("ababababab","abab")</p>
/// <p class="rosetta__paragraph">2</lang></p><br/><p class="rosetta__paragraph">The matching should yield the highest number of non-overlapping matches.</p><br/><p class="rosetta__paragraph">In general, this essentially means matching from left-to-right or right-to-left  (see proof on talk page).</p>
/// <br/>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function countSubstring(str, subStr) {
    var matches = str.match(new RegExp(subStr, "g"));
    return matches ? matches.length : 0;
}

/// rawSolutions:
=={{header|JavaScript}}==
Using regexes:
<lang javascript>function countSubstring(str, subStr) {
    var matches = str.match(new RegExp(subStr, "g"));
    return matches ? matches.length : 0;
}</lang>

Using 'split' and ES6 notation:
<lang javascript>const countSubString = (str, subStr) => str.split(subStr).length - 1;
</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
