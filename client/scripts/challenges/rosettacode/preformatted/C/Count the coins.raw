
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Count the coins
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">There are four types of common coins in  <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/United_States" title="link: https://en.wikipedia.org/wiki/United_States">US</a>  currency:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::#  quarters  (25 cents)</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::#  dimes  (10 cents)</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::#  nickels  (5 cents),  and </span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::#  pennies  (1 cent)  </span></p>
/// <br/><p class="rosetta__paragraph">There are six ways to make change for 15 cents:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::#  A dime and a nickel </span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::#  A dime and 5 pennies</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::#  3 nickels</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::#  2 nickels and 5 pennies</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::#  A nickel and 10 pennies</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::#  15 pennies</span></p>
/// <br><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">How many ways are there to make change for a dollar using these common coins?   (1 dollar = 100 cents).</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Optional:</dt></dl>
/// <p class="rosetta__paragraph">Less common are dollar coins (100 cents);  and very rare are half dollars (50 cents).  With the addition of these two coins, how many ways are there to make change for $1000?</p><br/><p class="rosetta__paragraph">(Note:  the answer is larger than  2<sup>32</sup>).</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Reference:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"> <a class="rosetta__link--wiki" href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_Temp_52" title="link: http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_Temp_52">an algorithm from MIT Press</a>. </li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function countcoins(t, o) {
    'use strict';
    var targetsLength = t + 1;
    var operandsLength = o.length;
    t = [1];

    for (var a = 0; a < operandsLength; a++) {
        for (var b = 1; b < targetsLength; b++) {

            // initialise undefined target
            t[b] = t[b] ? t[b] : 0;

            // accumulate target + operand ways
            t[b] += (b < o[a]) ? 0 : t[b - o[a]];
        }
    }

    return t[targetsLength - 1];
}

/// rawSolutions:
=={{header|JavaScript}}==

===Iterative===

Efficient iterative algorithm (cleverly calculates number of combinations without permuting them)

<lang Javascript>function countcoins(t, o) {
    'use strict';
    var targetsLength = t + 1;
    var operandsLength = o.length;
    t = [1];

    for (var a = 0; a < operandsLength; a++) {
        for (var b = 1; b < targetsLength; b++) {

            // initialise undefined target
            t[b] = t[b] ? t[b] : 0;

            // accumulate target + operand ways
            t[b] += (b < o[a]) ? 0 : t[b - o[a]];
        }
    }

    return t[targetsLength - 1];
}</lang>

{{out}}
JavaScript hits integer limit for optional task
<lang JavaScript>countcoins(100, [1,5,10,25]);
242</lang>

===Recursive===

Inefficient recursive algorithm (naively calculates number of combinations by actually permuting them)

<lang Javascript>function countcoins(t, o) {
    'use strict';
    var operandsLength = o.length;
    var solutions = 0;

    function permutate(a, x) {

        // base case
        if (a === t) {
            solutions++;
        }

        // recursive case
        else if (a < t) {
            for (var i = 0; i < operandsLength; i++) {
                if (i >= x) {
                    permutate(o[i] + a, i);
                }
            }
        }
    }

    permutate(0, 0);
    return solutions;
}</lang>
{{Out}}
Too slow for optional task

<lang JavaScript>countcoins(100, [1,5,10,25]);
242</lang>

===Iterative again===

{{Trans|C#}}
<lang javascript>var amount = 100,
    coin = [1, 5, 10, 25]
var t = [1];
for (t[amount] = 0, a = 1; a < amount; a++) t[a] = 0 // initialise t[0..amount]=[1,0,...,0]
for (var i = 0, e = coin.length; i < e; i++)
    for (var ci = coin[i], a = ci; a <= amount; a++)
        t[a] += t[a - ci]
document.write(t[amount])</lang>
{{Out}}
<pre>242</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
