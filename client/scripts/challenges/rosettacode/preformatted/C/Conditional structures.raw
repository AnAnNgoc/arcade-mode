
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Conditional structures
/// type: rosetta-code

/// categories:
/// Simple

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">List the  <span class="rosetta__text--italic">conditional structures</span>  offered by a programming language.</p><br/><p class="rosetta__paragraph">Common conditional structures are   <span class="rosetta__text--bold">if-then-else</span>   and   <span class="rosetta__text--bold">switch</span>.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
if( s == "Hello World" ) {
    foo();
} else if( s == "Bye World" ) {
    bar();
} else {
    deusEx();
}

/// rawSolutions:
=={{header|JavaScript}}==

===if-then-else===

<lang javascript>if( s == "Hello World" ) {
    foo();
} else if( s == "Bye World" ) {
    bar();
} else {
    deusEx();
}</lang>

===switch===

<lang javascript>switch(object) {
    case 1:
        one();
        break;
    case 2:
    case 3:
    case 4:
        twoThreeOrFour();
        break;
    case 5:
        five();
        break;
    default:
        everythingElse();
}</lang>

===conditional (ternary) operator (?:)===

<lang javascript>var num = window.obj ? obj.getNumber() : null;</lang>

The distinctive feature of the ternary operator (compared to JavaScript's other conditional structures) is that it evaluates as an expression rather than a statement, and can therefore be composed within larger expressions, making it a valuable resource of program structure in a functional idiom of JavaScript.

<lang JavaScript>function takeWhile(lst, fnTest) {
    'use strict';
    var varHead = lst.length ? lst[0] : null;

    return varHead ? (
        fnTest(varHead) ? [varHead].concat(
            takeWhile(lst.slice(1), fnTest)
        ) : []
    ) : [];
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7dec
