
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Compiler/syntax analyzer
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><p class="rosetta__paragraph">Syntax Analyzer</p><br/><p class="rosetta__paragraph">A Syntax analyzer transforms a token stream (from the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/lexical_analyzer" title="Compiler/lexical_analyzer">Lexical analyzer</a>)</p>
/// <p class="rosetta__paragraph">into a Syntax tree, based on a grammar.</p>
/// <br/>
/// <p class="rosetta__paragraph">Take the output from the Lexical analyzer <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/lexical_analyzer" title="Compiler/lexical_analyzer">task</a>,</p>
/// <p class="rosetta__paragraph">and convert it to an <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Abstract_syntax_tree" title="link: https://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree (AST)</a>,</p>
/// <p class="rosetta__paragraph">based on the grammar below.  The output should be in a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Flatten_a_list" title="Flatten_a_list">flattened format.</a></p><br/><p class="rosetta__paragraph">The program should read input from a file and/or stdin, and write output to a file and/or</p>
/// <p class="rosetta__paragraph">stdout.  If the language being used has a parser module/library/class, it would be great</p>
/// <p class="rosetta__paragraph">if two versions of the solution are provided:  One without the parser module, and one</p>
/// <p class="rosetta__paragraph">with.</p>
/// <br/>
/// <p class="rosetta__paragraph">The simple programming language to be analyzed is more or less a (very tiny) subset of</p>
/// <p class="rosetta__paragraph"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/C" title="C">C</a>. The formal grammar in</p>
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form" title="link: https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form">Extended Backus-Naur Form (EBNF)</a>:</p><br/><p class="rosetta__paragraph"><lang EBNF></p>
/// <p class="rosetta__paragraph">stmt_list           =   {stmt} ;</p><br/><p class="rosetta__paragraph">stmt                =   ';'</p>
/// <p class="rosetta__paragraph">| Identifier '=' expr ';'</p>
/// <p class="rosetta__paragraph">| 'while' paren_expr stmt</p>
/// <p class="rosetta__paragraph">| 'if' paren_expr stmt ['else' stmt]</p>
/// <p class="rosetta__paragraph">| 'print' '(' prt_list ')' ';'</p>
/// <p class="rosetta__paragraph">| 'putc' paren_expr ';'</p>
/// <p class="rosetta__paragraph">| '{' stmt_list '}'</p>
/// <p class="rosetta__paragraph">;</p><br/><p class="rosetta__paragraph">paren_expr          =   '(' expr ')' ;</p><br/><p class="rosetta__paragraph">prt_list            =   string | expr {',' String | expr} ;</p><br/><p class="rosetta__paragraph">expr                =   and_expr            {'||' and_expr} ;</p>
/// <p class="rosetta__paragraph">and_expr            =   equality_expr       {'&&' equality_expr} ;</p>
/// <p class="rosetta__paragraph">equality_expr       =   relational_expr     [('==' | '!=') relational_expr] ;</p>
/// <p class="rosetta__paragraph">relational_expr     =   addition_expr       [('<' | '<=' | '>' | '>=') addition_expr] ;</p>
/// <p class="rosetta__paragraph">addition_expr       =   multiplication_expr {('+' | '-') multiplication_expr} ;</p>
/// <p class="rosetta__paragraph">multiplication_expr =   primary             {('*' | '/' | '%') primary } ;</p>
/// <p class="rosetta__paragraph">primary             =   Identifier</p>
/// <p class="rosetta__paragraph">| Integer</p>
/// <p class="rosetta__paragraph">| '(' expr ')'</p>
/// <p class="rosetta__paragraph">| ('+' | '-' | '!') primary</p>
/// <p class="rosetta__paragraph">;</lang></p><br/><p class="rosetta__paragraph">The resulting AST should be formulated as a Binary Tree.</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Example - given the simple program (below), stored in a file called while.t, create the list of tokens, using one of the Lexical analyzer <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/lexical_analyzer" title="Compiler/lexical_analyzer">solutions</a></dt></dl><br/><p class="rosetta__paragraph">lex < while.t > while.lex</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Run one of the Syntax analyzer <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/syntax_analyzer" title="Compiler/syntax_analyzer">solutions</a>:</dt></dl><br/><p class="rosetta__paragraph">parse < while.lex > while.ast</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">The following table shows the input to lex, lex output, and the AST produced by the parser:</dt></dl><br/><p class="rosetta__paragraph">{| class="wikitable"</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">! Input to lex</p>
/// <p class="rosetta__paragraph">! Output from lex, input to parse</p>
/// <p class="rosetta__paragraph">! Output from parse</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| style="vertical-align:top" |</p>
/// <p class="rosetta__paragraph"><lang c>count = 1;</p>
/// <p class="rosetta__paragraph">while (count < 10) {</p>
/// <p class="rosetta__paragraph">print("count is: ", count, "\n");</p>
/// <p class="rosetta__paragraph">count = count + 1;</p>
/// <p class="rosetta__paragraph">}</lang></p><br/><p class="rosetta__paragraph">| style="vertical-align:top" |</p>
/// <p class="rosetta__paragraph"><b><div class="rosetta__pre-wrap"><pre class="rosetta__pre">
///     1      1 Identifier      count
///     1      7 Op_assign
///     1      9 Integer             1
///     1     10 Semicolon
///     2      1 Keyword_while
///     2      7 LeftParen
///     2      8 Identifier      count
///     2     14 Op_less
///     2     16 Integer            10
///     2     18 RightParen
///     2     20 LeftBrace
///     3      5 Keyword_print
///     3     10 LeftParen
///     3     11 String          "count is: "
///     3     23 Comma
///     3     25 Identifier      count
///     3     30 Comma
///     3     32 String          "\n"
///     3     36 RightParen
///     3     37 Semicolon
///     4      5 Identifier      count
///     4     11 Op_assign
///     4     13 Identifier      count
///     4     19 Op_add
///     4     21 Integer             1
///     4     22 Semicolon
///     5      1 RightBrace
///     6      1 End_of_input
/// </pre></div></b></p><br/><p class="rosetta__paragraph">| style="vertical-align:top" |</p>
/// <p class="rosetta__paragraph"><b><div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Assign
/// Identifier    count
/// Integer       1
/// While
/// Less
/// Identifier    count
/// Integer       10
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Sequence
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prts
/// String        "count is: "
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prti
/// Identifier    count
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prts
/// String        "\n"
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Assign
/// Identifier    count
/// Add
/// Identifier    count
/// Integer       1
/// </pre></div></b></p>
/// <p class="rosetta__paragraph">|}</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Specifications</dt></dl><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">List of node type names:</dt></dl><br/><div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// Identifier String Integer Sequence If Prtc Prts Prti While Assign Negate Not Multiply Divide Mod
/// Add Subtract Less LessEqual Greater GreaterEqual Equal NotEqual And Or
/// </pre></div><br/><p class="rosetta__paragraph">In the text below, Null/Empty nodes are represented by ";".</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Non-terminal (internal) nodes:</dt></dl><br/><p class="rosetta__paragraph">For Operators, the following nodes should be created:</p><br/><p class="rosetta__paragraph">Multiply Divide Mod Add Subtract Less LessEqual Greater GreaterEqual Equal NotEqual And Or</p><br/><p class="rosetta__paragraph">For each of the above nodes, the left and right sub-nodes are the operands of the</p>
/// <p class="rosetta__paragraph">respective operation.</p><br/><p class="rosetta__paragraph">In pseudo S-Expression format:</p><br/><p class="rosetta__paragraph">(Operator expression expression)</p><br/><p class="rosetta__paragraph">Negate, Not</p><br/><p class="rosetta__paragraph">For these node types, the left node is the operand, and the right node is null.</p><br/><p class="rosetta__paragraph">(Operator expression ;)</p><br/><p class="rosetta__paragraph">Sequence - sub-nodes are either statements or Sequences.</p><br/><p class="rosetta__paragraph">If - left node is the expression, the right node is If node, with it's left node being the</p>
/// <p class="rosetta__paragraph">if-true statement part, and the right node being the if-false (else) statement part.</p><br/><p class="rosetta__paragraph">(If expression (If statement else-statement))</p><br/><p class="rosetta__paragraph">If there is not an else, the tree becomes:</p><br/><p class="rosetta__paragraph">(If expression (If statement ;))</p><br/><p class="rosetta__paragraph">Prtc</p><br/><p class="rosetta__paragraph">(Prtc (expression) ;)</p><br/><p class="rosetta__paragraph">Prts</p><br/><p class="rosetta__paragraph">(Prts (String "the string") ;)</p><br/><p class="rosetta__paragraph">Prti</p><br/><p class="rosetta__paragraph">(Prti (Integer 12345) ;)</p><br/><p class="rosetta__paragraph">While - left node is the expression, the right node is the statement.</p><br/><p class="rosetta__paragraph">(While expression statement)</p><br/><p class="rosetta__paragraph">Assign - left node is the left-hand side of the assignment, the right node is the</p>
/// <p class="rosetta__paragraph">right-hand side of the assignment.</p><br/><p class="rosetta__paragraph">(Assign Identifier expression)</p><br/><p class="rosetta__paragraph">Terminal (leaf) nodes:</p><br/><p class="rosetta__paragraph">Identifier: (Identifier ident_name)</p>
/// <p class="rosetta__paragraph">Integer:    (Integer 12345)</p>
/// <p class="rosetta__paragraph">String:     (String "Hello World!")</p>
/// <p class="rosetta__paragraph">";":        Empty node</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Some simple examples</dt></dl>
/// <p class="rosetta__paragraph">Sequences denote a list node; they are used to represent a list. semicolon's represent a null node, e.g., the end of this path.</p><br/><p class="rosetta__paragraph">This simple program:</p><br/><p class="rosetta__paragraph">a=11;</p><br/><p class="rosetta__paragraph">Produces the following AST, encoded as a binary tree:</p><br/><p class="rosetta__paragraph">Under each non-leaf node are two '|' lines.  The first represents the left sub-node, the second represents the right sub-node:</p><br/><p class="rosetta__paragraph">(1) Sequence</p>
/// <p class="rosetta__paragraph">(2)     |-- ;</p>
/// <p class="rosetta__paragraph">(3)     |-- Assign</p>
/// <p class="rosetta__paragraph">(4)         |-- Identifier: a</p>
/// <p class="rosetta__paragraph">(5)         |-- Integer: 11</p><br/><p class="rosetta__paragraph">In flattened form:</p><br/><p class="rosetta__paragraph">(1) Sequence</p>
/// <p class="rosetta__paragraph">(2) ;</p>
/// <p class="rosetta__paragraph">(3) Assign</p>
/// <p class="rosetta__paragraph">(4) Identifier    a</p>
/// <p class="rosetta__paragraph">(5) Integer       11</p>
/// <br/><p class="rosetta__paragraph">This program:</p><br/><p class="rosetta__paragraph">a=11;</p>
/// <p class="rosetta__paragraph">b=22;</p>
/// <p class="rosetta__paragraph">c=33;</p><br/><p class="rosetta__paragraph">Produces the following AST:</p><br/><p class="rosetta__paragraph">( 1) Sequence</p>
/// <p class="rosetta__paragraph">( 2)     |-- Sequence</p>
/// <p class="rosetta__paragraph">( 3)     |   |-- Sequence</p>
/// <p class="rosetta__paragraph">( 4)     |   |   |-- ;</p>
/// <p class="rosetta__paragraph">( 5)     |   |   |-- Assign</p>
/// <p class="rosetta__paragraph">( 6)     |   |       |-- Identifier: a</p>
/// <p class="rosetta__paragraph">( 7)     |   |       |-- Integer: 11</p>
/// <p class="rosetta__paragraph">( 8)     |   |-- Assign</p>
/// <p class="rosetta__paragraph">( 9)     |       |-- Identifier: b</p>
/// <p class="rosetta__paragraph">(10)     |       |-- Integer: 22</p>
/// <p class="rosetta__paragraph">(11)     |-- Assign</p>
/// <p class="rosetta__paragraph">(12)         |-- Identifier: c</p>
/// <p class="rosetta__paragraph">(13)         |-- Integer: 33</p><br/><p class="rosetta__paragraph">In flattened form:</p><br/><p class="rosetta__paragraph">( 1) Sequence</p>
/// <p class="rosetta__paragraph">( 2) Sequence</p>
/// <p class="rosetta__paragraph">( 3) Sequence</p>
/// <p class="rosetta__paragraph">( 4) ;</p>
/// <p class="rosetta__paragraph">( 5) Assign</p>
/// <p class="rosetta__paragraph">( 6) Identifier    a</p>
/// <p class="rosetta__paragraph">( 7) Integer       11</p>
/// <p class="rosetta__paragraph">( 8) Assign</p>
/// <p class="rosetta__paragraph">( 9) Identifier    b</p>
/// <p class="rosetta__paragraph">(10) Integer       22</p>
/// <p class="rosetta__paragraph">(11) Assign</p>
/// <p class="rosetta__paragraph">(12) Identifier    c</p>
/// <p class="rosetta__paragraph">(13) Integer       33</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Pseudo-code for the parser.  </dt></dl><br/><p class="rosetta__paragraph">Uses <a class="rosetta__link--wiki" href="https://www.engr.mun.ca/~theo/Misc/exp_parsing.htm" title="link: https://www.engr.mun.ca/~theo/Misc/exp_parsing.htm">Precedence Climbing</a> for expression parsing, and</p>
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Recursive_descent_parser" title="link: https://en.wikipedia.org/wiki/Recursive_descent_parser">Recursive Descent</a> for statement parsing. The AST is also built:</p><br/><p class="rosetta__paragraph"><lang python>def expr(p)</p>
/// <p class="rosetta__paragraph">if tok is "("</p>
/// <p class="rosetta__paragraph">x = paren_expr()</p>
/// <p class="rosetta__paragraph">elif tok in ["-", "+", "!"]</p>
/// <p class="rosetta__paragraph">gettok()</p>
/// <p class="rosetta__paragraph">y = expr(precedence of operator)</p>
/// <p class="rosetta__paragraph">if operator was "+"</p>
/// <p class="rosetta__paragraph">x = y</p>
/// <p class="rosetta__paragraph">else</p>
/// <p class="rosetta__paragraph">x = make_node(operator, y)</p>
/// <p class="rosetta__paragraph">elif tok is an Identifier</p>
/// <p class="rosetta__paragraph">x = make_leaf(Identifier, variable name)</p>
/// <p class="rosetta__paragraph">gettok()</p>
/// <p class="rosetta__paragraph">elif tok is an Integer constant</p>
/// <p class="rosetta__paragraph">x = make_leaf(Integer, integer value)</p>
/// <p class="rosetta__paragraph">gettok()</p>
/// <p class="rosetta__paragraph">else</p>
/// <p class="rosetta__paragraph">error()</p><br/><p class="rosetta__paragraph">while tok is a binary operator and precedence of tok >= p</p>
/// <p class="rosetta__paragraph">save_tok = tok</p>
/// <p class="rosetta__paragraph">gettok()</p>
/// <p class="rosetta__paragraph">q = precedence of save_tok</p>
/// <p class="rosetta__paragraph">if save_tok is not right associative</p>
/// <p class="rosetta__paragraph">q += 1</p>
/// <p class="rosetta__paragraph">x = make_node(Operator save_tok represents, x, expr(q))</p><br/><p class="rosetta__paragraph">return x</p><br/><p class="rosetta__paragraph">def paren_expr()</p>
/// <p class="rosetta__paragraph">expect("(")</p>
/// <p class="rosetta__paragraph">x = expr(0)</p>
/// <p class="rosetta__paragraph">expect(")")</p>
/// <p class="rosetta__paragraph">return x</p><br/><p class="rosetta__paragraph">def stmt()</p>
/// <p class="rosetta__paragraph">t = NULL</p>
/// <p class="rosetta__paragraph">if accept("if")</p>
/// <p class="rosetta__paragraph">e = paren_expr()</p>
/// <p class="rosetta__paragraph">s = stmt()</p>
/// <p class="rosetta__paragraph">t = make_node(If, e, make_node(If, s, accept("else") ? stmt() : NULL))</p>
/// <p class="rosetta__paragraph">elif accept("putc")</p>
/// <p class="rosetta__paragraph">t = make_node(Prtc, paren_expr())</p>
/// <p class="rosetta__paragraph">expect(";")</p>
/// <p class="rosetta__paragraph">elif accept("print")</p>
/// <p class="rosetta__paragraph">expect("(")</p>
/// <p class="rosetta__paragraph">repeat</p>
/// <p class="rosetta__paragraph">if tok is a string</p>
/// <p class="rosetta__paragraph">e = make_node(Prts, make_leaf(String, the string))</p>
/// <p class="rosetta__paragraph">gettok()</p>
/// <p class="rosetta__paragraph">else</p>
/// <p class="rosetta__paragraph">e = make_node(Prti, expr(0))</p><br/><p class="rosetta__paragraph">t = make_node(Sequence, t, e)</p>
/// <p class="rosetta__paragraph">until not accept(",")</p>
/// <p class="rosetta__paragraph">expect(")")</p>
/// <p class="rosetta__paragraph">expect(";")</p>
/// <p class="rosetta__paragraph">elif tok is ";"</p>
/// <p class="rosetta__paragraph">gettok()</p>
/// <p class="rosetta__paragraph">elif tok is an Identifier</p>
/// <p class="rosetta__paragraph">v = make_leaf(Identifier, variable name)</p>
/// <p class="rosetta__paragraph">gettok()</p>
/// <p class="rosetta__paragraph">expect("=")</p>
/// <p class="rosetta__paragraph">t = make_node(Assign, v, expr(0))</p>
/// <p class="rosetta__paragraph">expect(";")</p>
/// <p class="rosetta__paragraph">elif accept("while")</p>
/// <p class="rosetta__paragraph">e = paren_expr()</p>
/// <p class="rosetta__paragraph">t = make_node(While, e, stmt()</p>
/// <p class="rosetta__paragraph">elif accept("{")</p>
/// <p class="rosetta__paragraph">while tok not equal "}" and tok not equal end-of-file</p>
/// <p class="rosetta__paragraph">t = make_node(Sequence, t, stmt())</p>
/// <p class="rosetta__paragraph">expect("}")</p>
/// <p class="rosetta__paragraph">elif tok is end-of-file</p>
/// <p class="rosetta__paragraph">pass</p>
/// <p class="rosetta__paragraph">else</p>
/// <p class="rosetta__paragraph">error()</p>
/// <p class="rosetta__paragraph">return t</p><br/><p class="rosetta__paragraph">def parse()</p>
/// <p class="rosetta__paragraph">t = NULL</p>
/// <p class="rosetta__paragraph">gettok()</p>
/// <p class="rosetta__paragraph">repeat</p>
/// <p class="rosetta__paragraph">t = make_node(Sequence, t, stmt())</p>
/// <p class="rosetta__paragraph">until tok is end-of-file</p>
/// <p class="rosetta__paragraph">return t</lang></p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Once the AST is built, it should be output in a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Flatten_a_list" title="Flatten_a_list">flattened format.</a>  This can be as simple as the following:</dt></dl><br/><p class="rosetta__paragraph"><lang python>def prt_ast(t)</p>
/// <p class="rosetta__paragraph">if t == NULL</p>
/// <p class="rosetta__paragraph">print(";\n")</p>
/// <p class="rosetta__paragraph">else</p>
/// <p class="rosetta__paragraph">print(t.node_type)</p>
/// <p class="rosetta__paragraph">if t.node_type in [Identifier, Integer, String]     # leaf node</p>
/// <p class="rosetta__paragraph">print the value of the Ident, Integer or String, "\n"</p>
/// <p class="rosetta__paragraph">else</p>
/// <p class="rosetta__paragraph">print("\n")</p>
/// <p class="rosetta__paragraph">prt_ast(t.left)</p>
/// <p class="rosetta__paragraph">prt_ast(t.right)</lang></p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">If the AST is correctly built, loading it into a subsequent program should be as simple as:</dt></dl><br/><p class="rosetta__paragraph"><lang python>def load_ast()</p>
/// <p class="rosetta__paragraph">line = readline()</p>
/// <p class="rosetta__paragraph"># Each line has at least one token</p>
/// <p class="rosetta__paragraph">line_list = tokenize the line, respecting double quotes</p><br/><p class="rosetta__paragraph">text = line_list[0] # first token is always the node type</p><br/><p class="rosetta__paragraph">if text == ";"   # a terminal node</p>
/// <p class="rosetta__paragraph">return NULL</p><br/><p class="rosetta__paragraph">node_type = text # could convert to internal form if desired</p><br/><p class="rosetta__paragraph"># A line with two tokens is a leaf node</p>
/// <p class="rosetta__paragraph"># Leaf nodes are: Identifier, Integer, String</p>
/// <p class="rosetta__paragraph"># The 2nd token is the value</p>
/// <p class="rosetta__paragraph">if len(line_list) > 1</p>
/// <p class="rosetta__paragraph">return make_leaf(node_type, line_list[1])</p><br/><p class="rosetta__paragraph">left = load_ast()</p>
/// <p class="rosetta__paragraph">right = load_ast()</p>
/// <p class="rosetta__paragraph">return make_node(node_type, left, right)</lang></p><br/><p class="rosetta__paragraph">Finally, the AST can also be tested by running it against one of the AST Interpreter <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/AST_interpreter" title="Compiler/AST_interpreter">solutions</a>.</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Test program, assuming this is in a file called prime.t:  lex <prime.t | parse</dt></dl><br/><p class="rosetta__paragraph">{| class="wikitable"</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">! Input to lex</p>
/// <p class="rosetta__paragraph">! Output from lex, input to parse</p>
/// <p class="rosetta__paragraph">! Output from parse</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| style="vertical-align:top" |</p>
/// <p class="rosetta__paragraph"><lang c>/*</p>
/// <p class="rosetta__paragraph">Simple prime number generator</p>
/// <p class="rosetta__paragraph">*/</p>
/// <p class="rosetta__paragraph">count = 1;</p>
/// <p class="rosetta__paragraph">n = 1;</p>
/// <p class="rosetta__paragraph">limit = 100;</p>
/// <p class="rosetta__paragraph">while (n < limit) {</p>
/// <p class="rosetta__paragraph">k=3;</p>
/// <p class="rosetta__paragraph">p=1;</p>
/// <p class="rosetta__paragraph">n=n+2;</p>
/// <p class="rosetta__paragraph">while ((k*k<=n) && (p)) {</p>
/// <p class="rosetta__paragraph">p=n/k*k!=n;</p>
/// <p class="rosetta__paragraph">k=k+2;</p>
/// <p class="rosetta__paragraph">}</p>
/// <p class="rosetta__paragraph">if (p) {</p>
/// <p class="rosetta__paragraph">print(n, " is prime\n");</p>
/// <p class="rosetta__paragraph">count = count + 1;</p>
/// <p class="rosetta__paragraph">}</p>
/// <p class="rosetta__paragraph">}</p>
/// <p class="rosetta__paragraph">print("Total primes found: ", count, "\n");</lang></p><br/><p class="rosetta__paragraph">| style="vertical-align:top" |</p>
/// <p class="rosetta__paragraph"><b><div class="rosetta__pre-wrap"><pre class="rosetta__pre">
///     4      1 Identifier      count
///     4      7 Op_assign
///     4      9 Integer             1
///     4     10 Semicolon
///     5      1 Identifier      n
///     5      3 Op_assign
///     5      5 Integer             1
///     5      6 Semicolon
///     6      1 Identifier      limit
///     6      7 Op_assign
///     6      9 Integer           100
///     6     12 Semicolon
///     7      1 Keyword_while
///     7      7 LeftParen
///     7      8 Identifier      n
///     7     10 Op_less
///     7     12 Identifier      limit
///     7     17 RightParen
///     7     19 LeftBrace
///     8      5 Identifier      k
///     8      6 Op_assign
///     8      7 Integer             3
///     8      8 Semicolon
///     9      5 Identifier      p
///     9      6 Op_assign
///     9      7 Integer             1
///     9      8 Semicolon
///    10      5 Identifier      n
///    10      6 Op_assign
///    10      7 Identifier      n
///    10      8 Op_add
///    10      9 Integer             2
///    10     10 Semicolon
///    11      5 Keyword_while
///    11     11 LeftParen
///    11     12 LeftParen
///    11     13 Identifier      k
///    11     14 Op_multiply
///    11     15 Identifier      k
///    11     16 Op_lessequal
///    11     18 Identifier      n
///    11     19 RightParen
///    11     21 Op_and
///    11     24 LeftParen
///    11     25 Identifier      p
///    11     26 RightParen
///    11     27 RightParen
///    11     29 LeftBrace
///    12      9 Identifier      p
///    12     10 Op_assign
///    12     11 Identifier      n
///    12     12 Op_divide
///    12     13 Identifier      k
///    12     14 Op_multiply
///    12     15 Identifier      k
///    12     16 Op_notequal
///    12     18 Identifier      n
///    12     19 Semicolon
///    13      9 Identifier      k
///    13     10 Op_assign
///    13     11 Identifier      k
///    13     12 Op_add
///    13     13 Integer             2
///    13     14 Semicolon
///    14      5 RightBrace
///    15      5 Keyword_if
///    15      8 LeftParen
///    15      9 Identifier      p
///    15     10 RightParen
///    15     12 LeftBrace
///    16      9 Keyword_print
///    16     14 LeftParen
///    16     15 Identifier      n
///    16     16 Comma
///    16     18 String          " is prime\n"
///    16     31 RightParen
///    16     32 Semicolon
///    17      9 Identifier      count
///    17     15 Op_assign
///    17     17 Identifier      count
///    17     23 Op_add
///    17     25 Integer             1
///    17     26 Semicolon
///    18      5 RightBrace
///    19      1 RightBrace
///    20      1 Keyword_print
///    20      6 LeftParen
///    20      7 String          "Total primes found: "
///    20     29 Comma
///    20     31 Identifier      count
///    20     36 Comma
///    20     38 String          "\n"
///    20     42 RightParen
///    20     43 Semicolon
///    21      1 End_of_input
/// </pre></div></b></p><br/><p class="rosetta__paragraph">| style="vertical-align:top" |</p>
/// <p class="rosetta__paragraph"><b><div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// Sequence
/// Sequence
/// Sequence
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Assign
/// Identifier    count
/// Integer       1
/// Assign
/// Identifier    n
/// Integer       1
/// Assign
/// Identifier    limit
/// Integer       100
/// While
/// Less
/// Identifier    n
/// Identifier    limit
/// Sequence
/// Sequence
/// Sequence
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Assign
/// Identifier    k
/// Integer       3
/// Assign
/// Identifier    p
/// Integer       1
/// Assign
/// Identifier    n
/// Add
/// Identifier    n
/// Integer       2
/// While
/// And
/// LessEqual
/// Multiply
/// Identifier    k
/// Identifier    k
/// Identifier    n
/// Identifier    p
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Assign
/// Identifier    p
/// NotEqual
/// Multiply
/// Divide
/// Identifier    n
/// Identifier    k
/// Identifier    k
/// Identifier    n
/// Assign
/// Identifier    k
/// Add
/// Identifier    k
/// Integer       2
/// If
/// Identifier    p
/// If
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prti
/// Identifier    n
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prts
/// String        " is prime\n"
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Assign
/// Identifier    count
/// Add
/// Identifier    count
/// Integer       1
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Sequence
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prts
/// String        "Total primes found: "
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prti
/// Identifier    count
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prts
/// String        "\n"
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// </pre></div></b></p>
/// <p class="rosetta__paragraph">|}</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title"> Additional examples</dt></dl><br/><p class="rosetta__paragraph">Your solution should pass all the test cases above and the additional tests found <span class="rosetta__text--bold"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/Sample_programs" title="Compiler/Sample_programs">Here</a></span>.</p>
/// <br/>
/// <p class="rosetta__paragraph">The C and Python versions can be considered reference implementations.</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Related Tasks</dt></dl><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/lexical_analyzer" title="Compiler/lexical_analyzer">Lexical Analyzer task</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/code_generator" title="Compiler/code_generator">Code Generator task</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/virtual_machine_interpreter" title="Compiler/virtual_machine_interpreter">Virtual Machine Interpreter task</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/AST_interpreter" title="Compiler/AST_interpreter">AST Interpreter task</a></li></ul>
/// <p class="rosetta__paragraph"><hr></p>
/// <p class="rosetta__paragraph">__TOC__</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7de7
