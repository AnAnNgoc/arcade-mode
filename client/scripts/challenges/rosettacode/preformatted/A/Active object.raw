
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Active object
/// type: rosetta-code

/// categories:
/// Object oriented

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/><p class="rosetta__paragraph">In <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/object-oriented programming" title="object-oriented programming">object-oriented programming</a> an object is active when its state depends on clock. Usually an active object encapsulates a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a> that updates the object's state. To the outer world the object looks like a normal object with methods that can be called from outside. Implementation of such methods must have a certain synchronization mechanism with the encapsulated task in order to prevent object's state corruption.</p><br/><p class="rosetta__paragraph">A typical instance of an active object is an animation widget. The widget state changes with the time, while as an object it has all properties of a normal widget.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">The task</span></p><br/><p class="rosetta__paragraph">Implement an active integrator object. The object has an input and output. The input can be set using the method <span class="rosetta__text--italic">Input</span>. The input is a function of time. The output can be queried using the method <span class="rosetta__text--italic">Output</span>. The object integrates its input over the time and the result becomes the object's output. So if the input is <span class="rosetta__text--italic">K</span>(<span class="rosetta__text--italic">t</span>) and the output is <span class="rosetta__text--italic">S</span>, the object state <span class="rosetta__text--italic">S</span> is changed to <span class="rosetta__text--italic">S</span> + (<span class="rosetta__text--italic">K</span>(<span class="rosetta__text--italic">t</span><sub>1</sub>) + <span class="rosetta__text--italic">K</span>(<span class="rosetta__text--italic">t</span><sub>0</sub>)) * (<span class="rosetta__text--italic">t</span><sub>1</sub> - <span class="rosetta__text--italic">t</span><sub>0</sub>) / 2, i.e. it integrates <span class="rosetta__text--italic">K</span> using the trapeze method. Initially <span class="rosetta__text--italic">K</span> is constant 0 and <span class="rosetta__text--italic">S</span> is 0.</p><br/><p class="rosetta__paragraph">In order to test the object:</p>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">set its input to sin (2Ï€ <span class="rosetta__text--italic">f t</span>), where the frequency <span class="rosetta__text--italic">f</span>=0.5Hz. The phase is irrelevant.</li>
/// <li class="rosetta__list-item--ordered">wait 2s</li>
/// <li class="rosetta__list-item--ordered">set the input to constant 0</li>
/// <li class="rosetta__list-item--ordered">wait 0.5s</li></ol>
/// <p class="rosetta__paragraph">Verify that now the object's output is approximately 0 (the sine has the period of 2s). The accuracy of the result will depend on the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/OS" title="OS">OS</a> scheduler time slicing and the accuracy of the clock.</p>
/// <br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function Integrator(sampleIntervalMS) {
    var inputF = function () { return 0.0 };
    var sum = 0.0;
  
    var t1 = new Date().getTime();
    var input1 = inputF(t1 / 1000);
  
    function update() {
        var t2 = new Date().getTime();
        var input2 = inputF(t2 / 1000);
        var dt = (t2 - t1) / 1000;
        
        sum += (input1 + input2) * dt / 2;
        
        t1 = t2;
        input1 = input2;
    }
    
    var updater = setInterval(update, sampleIntervalMS);
  
    return ({
        input: function (newF) { inputF = newF },
        output: function () { return sum },
        shutdown: function () { clearInterval(updater) },
    });
}

/// rawSolutions:
=={{header|JavaScript}}==

{{trans|E}}

<lang javascript>function Integrator(sampleIntervalMS) {
    var inputF = function () { return 0.0 };
    var sum = 0.0;
  
    var t1 = new Date().getTime();
    var input1 = inputF(t1 / 1000);
  
    function update() {
        var t2 = new Date().getTime();
        var input2 = inputF(t2 / 1000);
        var dt = (t2 - t1) / 1000;
        
        sum += (input1 + input2) * dt / 2;
        
        t1 = t2;
        input1 = input2;
    }
    
    var updater = setInterval(update, sampleIntervalMS);
  
    return ({
        input: function (newF) { inputF = newF },
        output: function () { return sum },
        shutdown: function () { clearInterval(updater) },
    });
}</lang>

Test program as a HTML fragment:

<lang html4strict><p><span id="a">Test running...</span> <code id="b">-</code></p>

<script type="text/javascript">
    var f = 0.5;

    var i = new Integrator(1);
    var displayer = setInterval(function () { document.getElementById("b").firstChild.data = i.output() }, 100)
  
    setTimeout(function () {
        i.input(function (t) { return Math.sin(2*Math.PI*f*t) }); // test step 1
        setTimeout(function () { // test step 2
            i.input(function (t) { return 0 }); // test step 3
            setTimeout(function () { // test step 3
                i.shutdown();
                clearInterval(displayer);
                document.getElementById("a").firstChild.data = "Done, should be about 0: "
            }, 500);      
        }, 2000);
    }, 1)
</script></lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
