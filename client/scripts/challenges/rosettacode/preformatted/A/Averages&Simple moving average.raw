
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Averages/Simple moving average
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">Computing the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Moving_average#Simple_moving_average" title="wp: Moving_average#Simple_moving_average">simple moving average</a> of a series of numbers.</p>
/// <br/>
/// <p class="rosetta__paragraph">Create a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Stateful" title="wp: Stateful">stateful</a> function/class/instance that takes a period and returns a routine that takes a number as argument and returns a simple moving average of its arguments so far.</p>
/// <br/>
/// <p class="rosetta__paragraph">A simple moving average is a method for computing an average of a stream of numbers by only averaging the last  P  numbers from the stream,  where  P  is known as the period.</p><br/><p class="rosetta__paragraph">It can be implemented by calling an initialing routine with  P  as its argument,  I(P),  which should then return a routine that when called with individual, successive members of a stream of numbers, computes the mean of (up to), the last  P  of them, lets call this  SMA().</p><br/><p class="rosetta__paragraph">The word  <span class="rosetta__text--italic">stateful</span>  in the task description refers to the need for  SMA()  to remember certain information between calls to it:</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"> The period,  P</li>
/// <li class="rosetta__list-item--unordered"> An ordered container of at least the last  P  numbers from each of its individual calls.</li></ul>
/// <br>
/// <p class="rosetta__paragraph"><span class="rosetta__text--italic">Stateful</span>   also means that successive calls to  I(),  the initializer,  should return separate routines that do  <span class="rosetta__text--italic">not</span>  share saved state so they could be used on two independent streams of data.</p><br/><p class="rosetta__paragraph">Pseudo-code for an implementation of  SMA  is:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// function SMA(number: N):
///     stateful integer: P
///     stateful list:    stream
///     number:           average<br/>    stream.append_last(N)
///     if stream.length() > P:
///         # Only average the last P elements of the stream
///         stream.delete_first()
///     if stream.length() == 0:
///         average = 0
///     else:    
///         average = sum( stream.values() ) / stream.length()
///     return average
/// </pre></div>
/// <br/>
/// <br/><p class="rosetta__paragraph"><hr></p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function simple_moving_averager(period) {
    var nums = [];
    return function(num) {
        nums.push(num);
        if (nums.length > period)
            nums.splice(0,1);  // remove the first element of the array
        var sum = 0;
        for (var i in nums)
            sum += nums[i];
        var n = period;
        if (nums.length < period)
            n = nums.length;
        return(sum/n);
    }
}

var sma3 = simple_moving_averager(3);
var sma5 = simple_moving_averager(5);
var data = [1,2,3,4,5,5,4,3,2,1];
for (var i in data) {
    var n = data[i];
    // using WSH
    WScript.Echo("Next number = " + n + ", SMA_3 = " + sma3(n) + ", SMA_5 = " + sma5(n));
}

/// rawSolutions:
=={{header|JavaScript}}==
===Using for loop===
<lang javascript>function simple_moving_averager(period) {
    var nums = [];
    return function(num) {
        nums.push(num);
        if (nums.length > period)
            nums.splice(0,1);  // remove the first element of the array
        var sum = 0;
        for (var i in nums)
            sum += nums[i];
        var n = period;
        if (nums.length < period)
            n = nums.length;
        return(sum/n);
    }
}

var sma3 = simple_moving_averager(3);
var sma5 = simple_moving_averager(5);
var data = [1,2,3,4,5,5,4,3,2,1];
for (var i in data) {
    var n = data[i];
    // using WSH
    WScript.Echo("Next number = " + n + ", SMA_3 = " + sma3(n) + ", SMA_5 = " + sma5(n));
}</lang>
{{out}}
<pre>Next number = 1, SMA_3 = 1, SMA_5 = 1
Next number = 2, SMA_3 = 1.5, SMA_5 = 1.5
Next number = 3, SMA_3 = 2, SMA_5 = 2
Next number = 4, SMA_3 = 3, SMA_5 = 2.5
Next number = 5, SMA_3 = 4, SMA_5 = 3
Next number = 5, SMA_3 = 4.666666666666667, SMA_5 = 3.8
Next number = 4, SMA_3 = 4.666666666666667, SMA_5 = 4.2
Next number = 3, SMA_3 = 4, SMA_5 = 4.2
Next number = 2, SMA_3 = 3, SMA_5 = 3.8
Next number = 1, SMA_3 = 2, SMA_5 = 3</pre>

===Using reduce/filter===
[http://jsfiddle.net/79xe381e/ JS Fiddle]

<lang javascript>// single-sided
Array.prototype.simpleSMA=function(N) {
return this.map(
  function(el,index, _arr) { 
      return _arr.filter(
      function(x2,i2) { 
        return i2 <= index && i2 > index - N;
        })
      .reduce(
      function(current, last, index, arr){ 
        return (current + last); 
        })/index || 1;
      }); 
};

g=[0,1,2,3,4,5,6,7,8,9,10];
console.log(g.simpleSMA(3));
console.log(g.simpleSMA(5));
console.log(g.simpleSMA(g.length));</lang>
{{out}}
<pre>
[1, 1, 1.5, 2, 2.25, 2.4, 2.5, 2.5714285714285716, 2.625, 2.6666666666666665, 2.7]
[1, 1, 1.5, 2, 2.5, 3, 3.3333333333333335, 3.5714285714285716, 3.75, 3.888888888888889, 4]
[1, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5]
</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
