
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Ackermann function
/// type: rosetta-code

/// categories:
/// Memoization
/// Classic CS problems and programs

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <p class="rosetta__paragraph">The <span class="rosetta__text--bold"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Ackermann function" title="wp: Ackermann function">Ackermann function</a></span> is a classic example of a recursive function, notable especially because it is not a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Primitive_recursive_function" title="wp: Primitive_recursive_function">primitive recursive function</a>. It grows very quickly in value, as does the size of its call tree.</p>
/// <br/><p class="rosetta__paragraph">The Ackermann function is usually defined as follows:</p><br/><p class="rosetta__paragraph"><big></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">$ A(m, n) =</span></p>
/// <p class="rosetta__paragraph">\begin{cases}</p>
/// <p class="rosetta__paragraph">n+1 & \mbox{if } m = 0 \\</p>
/// <p class="rosetta__paragraph">A(m-1, 1) & \mbox{if } m > 0 \mbox{ and } n = 0 \\</p>
/// <p class="rosetta__paragraph">A(m-1, A(m, n-1)) & \mbox{if } m > 0 \mbox{ and } n > 0.</p>
/// <p class="rosetta__paragraph">\end{cases}</p>
/// <p class="rosetta__paragraph">$</p>
/// </big><br/><p class="rosetta__paragraph"><!-- <table><tr><td width=12><td><td>$n+1$<td>if $m=0$ <tr><td> <td>$A(m, n) =$ <td>$A(m-1, 1)$ <td>if $m>0$ and $n=0$ <tr><td><td><td>$A(m-1, A(m, n-1))$<td> if $m>0$ and $n>0$</table> --></p><br/><p class="rosetta__paragraph">Its arguments are never negative and it always terminates. Write a function which returns the value of $A(m, n)$. Arbitrary precision is preferred (since the function grows so quickly), but not required.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">See also:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Conway_chained_arrow_notation#Ackermann_function" title="wp: Conway_chained_arrow_notation#Ackermann_function">Conway chained arrow notation</a> for the Ackermann function.</li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function ack(m, n) {
 return m === 0 ? n + 1 : ack(m - 1, n === 0  ? 1 : ack(m, n - 1));
}

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>function ack(m, n) {
 return m === 0 ? n + 1 : ack(m - 1, n === 0  ? 1 : ack(m, n - 1));
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
