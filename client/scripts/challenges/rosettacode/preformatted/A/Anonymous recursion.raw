
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Anonymous recursion
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">While implementing a recursive function, it often happens that we must resort to a separate  <span class="rosetta__text--italic">helper function</span>  to handle the actual recursion.</p><br/><p class="rosetta__paragraph">This is usually the case when directly calling the current function would waste too many resources (stack space, execution time), causing unwanted side-effects,  and/or the function doesn't have the right arguments and/or return values.</p><br/><p class="rosetta__paragraph">So we end up inventing some silly name like  <span class="rosetta__text--bold">foo2</span>  or  <span class="rosetta__text--bold">foo_helper</span>.  I have always found it painful to come up with a proper name, and see some disadvantages:</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  You have to think up a name, which then pollutes the namespace</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  Function is created which is called from nowhere else</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:*  The program flow in the source code is interrupted</span></p><br/><p class="rosetta__paragraph">Some languages allow you to embed recursion directly in-place.  This might work via a label, a local <span class="rosetta__text--italic">gosub</span> instruction, or some special keyword.</p><br/><p class="rosetta__paragraph">Anonymous recursion can also be accomplished using the  <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Y combinator" title="Y combinator">Y combinator</a>.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">If possible, demonstrate this by writing the recursive version of the fibonacci function  (see <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Fibonacci sequence" title="Fibonacci sequence">Fibonacci sequence</a>)  which checks for a negative argument before doing the actual recursion.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function fibo(n) {
  if (n < 0) { throw "Argument cannot be negative"; }

  return (function(n) {
    return (n < 2) ? 1 : arguments.callee(n-1) + arguments.callee(n-2);
  })(n);
}

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>function fibo(n) {
  if (n < 0) { throw "Argument cannot be negative"; }

  return (function(n) {
    return (n < 2) ? 1 : arguments.callee(n-1) + arguments.callee(n-2);
  })(n);
}</lang>
Note that <code>arguments.callee</code> will not be available in ES5 Strict mode. Instead, you are expected to "name" function (the name is only visible inside function however).
<lang javascript>function fibo(n) {
  if (n < 0) { throw "Argument cannot be negative"; }

  return (function fib(n) {
    return (n < 2) ? 1 : fib(n-1) + fib(n-2);
  })(n);
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7d7b
