
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Perfect numbers
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">Write a function which says whether a number is perfect.</p><br/><br>
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Perfect_numbers" title="wp: Perfect_numbers">A perfect number</a> is a positive integer that is the sum of its proper positive divisors excluding the number itself.</p><br/><p class="rosetta__paragraph">Equivalently, a perfect number is a number that is half the sum of all of its positive divisors (including itself).</p>
/// <br/><p class="rosetta__paragraph">Note:  The faster  <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Lucas-Lehmer test" title="Lucas-Lehmer test">Lucas-Lehmer test</a>  is used to find primes of the form  <big> 2<sup><span class="rosetta__text--italic">n</span></sup>-1</big>,  all <span class="rosetta__text--italic">known</span> perfect numbers can be derived from these primes</p>
/// <p class="rosetta__paragraph">using the formula  <big> (2<sup><span class="rosetta__text--italic">n</span></sup> - 1) Ã— 2<sup><span class="rosetta__text--italic">n</span> - 1</sup></big>.</p><br/><p class="rosetta__paragraph">It is not known if there are any odd perfect numbers (any that exist are larger than <big>10<sup>2000</sup></big>).</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">See also:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Rational Arithmetic" title="Rational Arithmetic">Rational Arithmetic</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/oeis:A000396" title="oeis:A000396">Perfect numbers on OEIS</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--wiki" href="http://www.oddperfect.org/" title="link: http://www.oddperfect.org/">Odd Perfect</a> showing the current status of bounds on odd perfect numbers.</li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function is_perfect(n)
{
 var sum = 1, i, sqrt=Math.floor(Math.sqrt(n));
 for (i = sqrt-1; i>1; i--)
 {
  if (n % i == 0) {
   sum += i + n/i;
  }
 }
 if(n % sqrt == 0)
  sum += sqrt + (sqrt*sqrt == n ? 0 : n/sqrt);
 return sum === n;
}


var i;
for (i = 1; i < 10000; i++)
{
 if (is_perfect(i))
  print(i);
}

/// rawSolutions:
=={{header|JavaScript}}==

===Imperative===

{{trans|Java}}
<lang javascript>function is_perfect(n)
{
 var sum = 1, i, sqrt=Math.floor(Math.sqrt(n));
 for (i = sqrt-1; i>1; i--)
 {
  if (n % i == 0) {
   sum += i + n/i;
  }
 }
 if(n % sqrt == 0)
  sum += sqrt + (sqrt*sqrt == n ? 0 : n/sqrt);
 return sum === n;
}


var i;
for (i = 1; i < 10000; i++)
{
 if (is_perfect(i))
  print(i);
}</lang>

{{Out}}
<pre>6
28
496
8128</pre>

===Functional===

====ES5====

Naive version (brute force)

<lang JavaScript>(function (nFrom, nTo) {

  function perfect(n) {
    return n === range(1, n - 1).reduce(
      function (a, x) {
        return n % x ? a : a + x;
      }, 0
    );
  }

  function range(m, n) {
    return Array.apply(null, Array(n - m + 1)).map(function (x, i) {
      return m + i;
    });
  }

  return range(nFrom, nTo).filter(perfect);

})(1, 10000);</lang>

Output:

<lang JavaScript>[6, 28, 496, 8128]</lang>

Much faster (more efficient factorisation)

<lang JavaScript>(function (nFrom, nTo) {

  function perfect(n) {
    var lows = range(1, Math.floor(Math.sqrt(n))).filter(function (x) {
      return (n % x) === 0;
    });

    return n > 1 && lows.concat(lows.map(function (x) {
      return n / x;
    })).reduce(function (a, x) {
      return a + x;
    }, 0) / 2 === n;
  }

  function range(m, n) {
    return Array.apply(null, Array(n - m + 1)).map(function (x, i) {
      return m + i;
    });
  }

  return range(nFrom, nTo).filter(perfect)

})(1, 10000);</lang>

Output:

<lang JavaScript>[6, 28, 496, 8128]</lang>

Note that the filter function, though convenient and well optimised, is not strictly necessary.
We can always replace it with a more general monadic bind (chain) function, which is essentially just concat map
(Monadic return/inject for lists is simply lambda x --> [x], inlined here, and fail is [].)

<lang JavaScript>(function (nFrom, nTo) {

  // MONADIC CHAIN (bind) IN LIEU OF FILTER
  // ( monadic return for lists is just lambda x -> [x] )

  return chain(
    rng(nFrom, nTo),
    
    function mPerfect(n) {
      return (chain(
        rng(1, Math.floor(Math.sqrt(n))),
        function (y) {
          return (n % y) === 0 && n > 1 ? [y, n / y] : [];
        }
      ).reduce(function (a, x) {
        return a + x;
      }, 0) / 2 === n) ? [n] : [];
    }
    
  );

  /******************************************************************/

  // Monadic bind (chain) for lists
  function chain(xs, f) {
    return [].concat.apply([], xs.map(f));
  }

  function rng(m, n) {
    return Array.apply(null, Array(n - m + 1)).map(function (x, i) {
      return m + i;
    });
  }

})(1, 10000);</lang>

Output:
<lang JavaScript>[6, 28, 496, 8128]</lang>


====ES6====

<lang JavaScript>((nFrom, nTo) => {

    // perfect :: Int -> Bool
    let perfect = n => {
            let lows = range(1, Math.floor(Math.sqrt(n)))
                .filter(x => (n % x) === 0);

            return n > 1 && lows.concat(lows.map(x => n / x))
                .reduce((a, x) => (a + x), 0) / 2 === n;
        },

        // range :: Int -> Int -> Maybe Int -> [Int]
        range = (m, n, step) => {
            let d = (step || 1) * (n >= m ? 1 : -1);

            return Array.from({
                length: Math.floor((n - m) / d) + 1
            }, (_, i) => m + (i * d));
        };

    return range(nFrom, nTo)
        .filter(perfect);

})(1, 10000);</lang>

{{Out}}
<lang JavaScript>[6, 28, 496, 8128]</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7f6a
