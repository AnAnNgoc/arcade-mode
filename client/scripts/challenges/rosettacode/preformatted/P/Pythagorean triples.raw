
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Pythagorean triples
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">A <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Pythagorean_triple" title="wp: Pythagorean_triple">Pythagorean triple</a> is defined as three positive integers $(a, b, c)$ where $a < b < c$, and $a^2+b^2=c^2.$</p><br/><p class="rosetta__paragraph">They are called primitive triples if $a, b, c$ are co-prime, that is, if their pairwise greatest common divisors ${\rm gcd}(a, b) = {\rm gcd}(a, c) = {\rm gcd}(b, c) = 1$.</p><br/><p class="rosetta__paragraph">Because of their relationship through the Pythagorean theorem, a, b, and c are co-prime if a and b are co-prime (${\rm gcd}(a, b) = 1$).</p><br/><p class="rosetta__paragraph">Each triple forms the length of the sides of a right triangle, whose perimeter is $P=a+b+c$.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">The task is to determine how many Pythagorean triples there are with a perimeter no larger than 100 and the number of these that are primitive.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Extra credit: </dt></dl>
/// <p class="rosetta__paragraph">Deal with large values.  Can your program handle a maximum perimeter of 1,000,000?  What about 10,000,000?  100,000,000?</p><br/><p class="rosetta__paragraph">Note: the extra credit is not for you to demonstrate how fast your language is compared to others;  you need a proper algorithm to solve them in a timely manner.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Cf:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/List comprehensions" title="List comprehensions">List comprehensions</a></li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(() => {

    // concatMap :: (a -> [b]) -> [a] -> [b]
    const concatMap = (f, xs) => [].concat.apply([], xs.map(f));

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // gcd :: Integral a => a -> a -> a
    const gcd = (x, y) => {
        const _gcd = (a, b) => (b === 0 ? a : _gcd(b, a % b)),
            abs = Math.abs;
        return _gcd(abs(x), abs(y));
    }

    // Arguments: predicate, maximum perimeter
    // pythTripleCount :: ((Int, Int, Int) -> Bool) -> Int -> Int
    const pythTripleCount = (p, maxPerim) => {
        const xs = range(1, Math.floor(maxPerim / 2));

        return  concatMap(x =>
                concatMap(y =>
                concatMap(z =>
                (   (x + y + z     <=  maxPerim ) &&
                    (x * x + y * y === z * z    ) &&
                   p(x,  y,  z)                 ) ? [
                                [x, y, z]
                    ] :         [       ], // concatMap eliminates empty lists
                    xs.slice(y)), xs.slice(x)), xs
                )
                .length;
    };

    return [10, 100, 1000]
        .map(n => ({
            maxPerimeter: n,
            triples: pythTripleCount(x => true, n),
            primitives: pythTripleCount((x, y, _) => gcd(x, y) === 1, n)
        }));
})();

/// rawSolutions:
=={{header|JavaScript}}==
===ES6===
Exhaustive search of a full cartesian product. Not scalable.
<lang JavaScript>(() => {

    // concatMap :: (a -> [b]) -> [a] -> [b]
    const concatMap = (f, xs) => [].concat.apply([], xs.map(f));

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // gcd :: Integral a => a -> a -> a
    const gcd = (x, y) => {
        const _gcd = (a, b) => (b === 0 ? a : _gcd(b, a % b)),
            abs = Math.abs;
        return _gcd(abs(x), abs(y));
    }

    // Arguments: predicate, maximum perimeter
    // pythTripleCount :: ((Int, Int, Int) -> Bool) -> Int -> Int
    const pythTripleCount = (p, maxPerim) => {
        const xs = range(1, Math.floor(maxPerim / 2));

        return  concatMap(x =>
                concatMap(y =>
                concatMap(z =>
                (   (x + y + z     <=  maxPerim ) &&
                    (x * x + y * y === z * z    ) &&
                   p(x,  y,  z)                 ) ? [
                                [x, y, z]
                    ] :         [       ], // concatMap eliminates empty lists
                    xs.slice(y)), xs.slice(x)), xs
                )
                .length;
    };

    return [10, 100, 1000]
        .map(n => ({
            maxPerimeter: n,
            triples: pythTripleCount(x => true, n),
            primitives: pythTripleCount((x, y, _) => gcd(x, y) === 1, n)
        }));
})();</lang>

{{Out}}
<lang JavaScript>[{"maxPerimeter":10, "triples":0, "primitives":0}, 
 {"maxPerimeter":100, "triples":17, "primitives":7}, 
 {"maxPerimeter":1000, "triples":325, "primitives":70}]</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
