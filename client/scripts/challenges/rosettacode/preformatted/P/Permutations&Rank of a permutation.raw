
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Permutations/Rank of a permutation
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">A particular ranking of a permutation associates an integer with a particular ordering of all the permutations of a set of distinct items.</p>
/// <p class="rosetta__paragraph">For our purposes the ranking will assign integers $0 .. (n! - 1)$ to an ordering of all the permutations of the integers $0 .. (n - 1)$.</p><br/><p class="rosetta__paragraph">For example, the permutations of the digits zero to 3 arranged lexicographically have the following rank:</p><br/><div class="rosetta__pre-wrap"><pre class="rosetta__pre">  PERMUTATION      RANK
///   (0, 1, 2, 3) ->  0
///   (0, 1, 3, 2) ->  1
///   (0, 2, 1, 3) ->  2
///   (0, 2, 3, 1) ->  3
///   (0, 3, 1, 2) ->  4
///   (0, 3, 2, 1) ->  5
///   (1, 0, 2, 3) ->  6
///   (1, 0, 3, 2) ->  7
///   (1, 2, 0, 3) ->  8
///   (1, 2, 3, 0) ->  9
///   (1, 3, 0, 2) -> 10
///   (1, 3, 2, 0) -> 11
///   (2, 0, 1, 3) -> 12
///   (2, 0, 3, 1) -> 13
///   (2, 1, 0, 3) -> 14
///   (2, 1, 3, 0) -> 15
///   (2, 3, 0, 1) -> 16
///   (2, 3, 1, 0) -> 17
///   (3, 0, 1, 2) -> 18
///   (3, 0, 2, 1) -> 19
///   (3, 1, 0, 2) -> 20
///   (3, 1, 2, 0) -> 21
///   (3, 2, 0, 1) -> 22
///   (3, 2, 1, 0) -> 23</pre></div><br/><p class="rosetta__paragraph">Algorithms exist that can generate a rank from a permutation for some particular ordering of permutations, and that can generate the same rank from the given individual permutation (i.e. given a rank of 17 produce (2, 3, 1, 0) in the example above).</p><br/><p class="rosetta__paragraph">One use of such algorithms could be in generating a small, random, sample of permutations of $n$ items without duplicates when the total number of permutations is large. Remember that the total number of permutations of $n$ items is given by $n!$ which grows large very quickly: A 32 bit integer can only hold $12!$, a 64 bit integer only $20!$. It becomes difficult to take the straight-forward approach of generating all permutations then taking a random sample of them.</p><br/><p class="rosetta__paragraph">A <a class="rosetta__link--wiki" href="http://stackoverflow.com/questions/12884428/generate-sample-of-1-000-000-random-permutations" title="link: http://stackoverflow.com/questions/12884428/generate-sample-of-1-000-000-random-permutations">question on the Stack Overflow site</a> asked how to generate one million random and indivudual permutations of 144 items.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">Create a function to generate a permutation from a rank.</li>
/// <li class="rosetta__list-item--ordered">Create the inverse function that given the permutation generates its rank.</li>
/// <li class="rosetta__list-item--ordered">Show that for $n=3$ the two functions are indeed inverses of each other.</li>
/// <li class="rosetta__list-item--ordered">Compute and show here 4 random, individual, samples of permutations of 12 objects.</li></ol><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Stretch goal:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">State how reasonable it would be to use your program to address the limits of the Stack Overflow question.</li></ul><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">References:</dt></dl>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered"><a class="rosetta__link--wiki" href="http://webhome.cs.uvic.ca/~ruskey/Publications/RankPerm/RankPerm.html" title="link: http://webhome.cs.uvic.ca/~ruskey/Publications/RankPerm/RankPerm.html">Ranking and Unranking Permutations in Linear Time</a> by Myrvold & Ruskey. (Also available via Google <a class="rosetta__link--wiki" href="https://docs.google.com/viewer?a=v&q=cache:t8G2xQ3-wlkJ:citeseerx.ist.psu.edu/viewdoc/download%3Fdoi%3D10.1.1.43.4521%26rep%3Drep1%26type%3Dpdf+&hl=en&gl=uk&pid=bl&srcid=ADGEESgDcCc4JVd_57ziRRFlhDFxpPxoy88eABf9UG_TLXMzfxiC8D__qx4xfY3JAhw_nuPDrZ9gSInX0MbpYjgh807ZfoNtLrl40wdNElw2JMdi94Znv1diM-XYo53D8uelCXnK053L&sig=AHIEtbQtx-sxcVzaZgy9uhniOmETuW4xKg" title="link: https://docs.google.com/viewer?a=v&q=cache:t8G2xQ3-wlkJ:citeseerx.ist.psu.edu/viewdoc/download%3Fdoi%3D10.1.1.43.4521%26rep%3Drep1%26type%3Dpdf+&hl=en&gl=uk&pid=bl&srcid=ADGEESgDcCc4JVd_57ziRRFlhDFxpPxoy88eABf9UG_TLXMzfxiC8D__qx4xfY3JAhw_nuPDrZ9gSInX0MbpYjgh807ZfoNtLrl40wdNElw2JMdi94Znv1diM-XYo53D8uelCXnK053L&sig=AHIEtbQtx-sxcVzaZgy9uhniOmETuW4xKg">here</a>).</li>
/// <li class="rosetta__list-item--ordered"><a class="rosetta__link--wiki" href="http://www.davdata.nl/math/ranks.html" title="link: http://www.davdata.nl/math/ranks.html">Ranks</a> on the DevData site.</li>
/// <li class="rosetta__list-item--ordered"><a class="rosetta__link--wiki" href="http://stackoverflow.com/a/1506337/10562" title="link: http://stackoverflow.com/a/1506337/10562">Another answer</a> on Stack Overflow to a different question that explains its algorithm in detail.</li></ol><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7f6e
