
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Palindrome detection
/// type: rosetta-code

/// categories:
/// Recursion
/// String manipulation
/// Classic CS problems and programs
/// Palindromes

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <br/><p class="rosetta__paragraph">A <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Palindrome" title="wp: Palindrome">palindrome</a> is a phrase which reads the same backward and forward.</p>
/// <br/>
/// <p class="rosetta__paragraph">Write a function or program that checks whether a given sequence of characters (or, if you prefer, bytes)</p>
/// <p class="rosetta__paragraph">is a palindrome.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold"><span class="rosetta__text--italic">For extra credit:</span></span></p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Support Unicode characters.</li>
/// <li class="rosetta__list-item--unordered">Write a second function (possibly as a wrapper to the first) which detects <span class="rosetta__text--italic">inexact</span> palindromes, i.e. phrases that are palindromes if white-space and punctuation is ignored and case-insensitive comparison is used.</li></ul><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">It might be useful for this task to know how to <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Reversing a string" title="Reversing a string">reverse a string</a>.</li>
/// <li class="rosetta__list-item--unordered">This task's entries might also form the subjects of the task <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Test a function" title="Test a function">Test a function</a>.</li></ul>
/// <br/><br/><p class="rosetta__paragraph"><hr></p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function isPalindrome(str) {
  return str === str.split("").reverse().join("");
}

console.log(isPalindrome("ingirumimusnocteetconsumimurigni"));

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>function isPalindrome(str) {
  return str === str.split("").reverse().join("");
}

console.log(isPalindrome("ingirumimusnocteetconsumimurigni"));</lang>

ES6 implementation
<lang javascript>var isPal = str => str === str.split("").reverse().join("");</lang>


Or, adding a wrapper function to prepare the test data:

<lang JavaScript>(function (strSample) {

    // isPalindrome :: String -> Bool
    let isPalindrome = s =>
        s.split('')
        .reverse()
        .join('') === s;



    // TESTING 

    // lowerCaseNoSpace :: String -> String
    let lowerCaseNoSpace = s =>
        concatMap(c => c !== ' ' ? [c.toLowerCase()] : [],
            s.split(''))
        .join(''),

        // concatMap :: (a -> [b]) -> [a] -> [b]
        concatMap = (f, xs) => [].concat.apply([], xs.map(f));


    return isPalindrome(
        lowerCaseNoSpace(strSample)
    );


})("In girum imus nocte et consumimur igni");</lang>


{{Out}}
<pre>true</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7f51
