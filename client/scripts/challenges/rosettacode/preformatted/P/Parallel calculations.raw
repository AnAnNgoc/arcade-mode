
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Parallel calculations
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">Many programming languages allow you to specify computations to be run in parallel.</p>
/// <p class="rosetta__paragraph">While <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Concurrent computing" title="Concurrent computing">Concurrent computing</a> is focused on concurrency,</p>
/// <p class="rosetta__paragraph">the purpose of this task is to distribute time-consuming calculations</p>
/// <p class="rosetta__paragraph">on as many CPUs as possible.</p><br/><p class="rosetta__paragraph">Assume we have a collection of numbers, and want to find the one</p>
/// <p class="rosetta__paragraph">with the largest minimal prime factor</p>
/// <p class="rosetta__paragraph">(that is, the one that contains relatively large factors).</p>
/// <p class="rosetta__paragraph">To speed up the search, the factorization should be done</p>
/// <p class="rosetta__paragraph">in parallel using separate threads or processes,</p>
/// <p class="rosetta__paragraph">to take advantage of multi-core CPUs.</p><br/><p class="rosetta__paragraph">Show how this can be formulated in your language.</p>
/// <p class="rosetta__paragraph">Parallelize the factorization of those numbers,</p>
/// <p class="rosetta__paragraph">then search the returned list of numbers and factors</p>
/// <p class="rosetta__paragraph">for the largest minimal factor,</p>
/// <p class="rosetta__paragraph">and return that number and its prime factors.</p><br/><p class="rosetta__paragraph">For the prime number decomposition</p>
/// <p class="rosetta__paragraph">you may use the solution of the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Prime decomposition" title="Prime decomposition">Prime decomposition</a> task.</p>
/// <br/>
/// </div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:

var onmessage = function(event) {   
    postMessage({"n" : event.data.n,
                 "factors" : factor(event.data.n),
                 "id" : event.data.id});
};

function factor(n) {
    var factors = [];
    for(p = 2; p <= n; p++) {
        if((n % p) == 0) {
            factors[factors.length] = p;
            n /= p;
        }
    }
    return factors;
}


/// rawSolutions:
=={{header|JavaScript}}==
This code demonstrates Web Workers. This should work on current versions of Firefox, Safari, Chrome and Opera.

This first portion should be placed in a file called "parallel_worker.js". This file contains the logic used by every worker created.
<lang javascript>
var onmessage = function(event) {   
    postMessage({"n" : event.data.n,
                 "factors" : factor(event.data.n),
                 "id" : event.data.id});
};

function factor(n) {
    var factors = [];
    for(p = 2; p <= n; p++) {
        if((n % p) == 0) {
            factors[factors.length] = p;
            n /= p;
        }
    }
    return factors;
}
</lang>

For each number a worker is spawned. Once the final worker completes its task (worker_count is reduced to 0), the reduce function is called to determine which number is the answer.
<lang javascript>
var numbers = [12757923, 12878611, 12757923, 15808973, 15780709, 197622519];
var workers = [];
var worker_count = 0;

var results = [];

for(var i = 0; i < numbers.length; i++) {
    worker_count++;
    workers[i] = new Worker("parallel_worker.js");
    workers[i].onmessage = accumulate;
    workers[i].postMessage({n: numbers[i], id: i});
}

function accumulate(event) {
    n = event.data.n;
    factors = event.data.factors;
    id = event.data.id;
    console.log(n + " : " + factors);
    results[id] = {n:n, factors:factors};
    // Cleanup - kill the worker and countdown until all work is done
    workers[id].terminate();
    worker_count--;
    if(worker_count == 0)
	reduce();
}

function reduce() {
    answer = 0;
    for(i = 1; i < results.length; i++) {
	min = results[i].factors[0];
	largest_min = results[answer].factors[0];
	if(min > largest_min)
	    answer = i;
    }
    n = results[answer].n;
    factors = results[answer].factors;
    console.log("The number with the relatively largest factors is: " + n + " : " + factors);
}
</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
