
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Pascal's triangle
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Pascal's triangle" title="wp: Pascal's triangle">Pascal's triangle</a>  is an arithmetic and geometric figure first imagined by  <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Blaise Pascal" title="wp: Blaise Pascal">Blaise Pascal</a>.</p><br/><p class="rosetta__paragraph">Its first few rows look like this:</p>
/// <p class="rosetta__paragraph">1</p>
/// <p class="rosetta__paragraph">1 1</p>
/// <p class="rosetta__paragraph">1 2 1</p>
/// <p class="rosetta__paragraph">1 3 3 1</p>
/// <p class="rosetta__paragraph">where each element of each row is either 1 or the sum of the two elements right above it.</p><br/><p class="rosetta__paragraph">For example, the next row of the triangle would be:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::  <span class="rosetta__text--bold">1</span>  (since the first element of each row doesn't have two elements above it)</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::  <span class="rosetta__text--bold">4</span>  (1 + 3)</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::  <span class="rosetta__text--bold">6</span>  (3 + 3)</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::  <span class="rosetta__text--bold">4</span>  (3 + 1)</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::  <span class="rosetta__text--bold">1</span>  (since the last element of each row doesn't have two elements above it) </span></p><br/><p class="rosetta__paragraph">So the triangle now looks like this:</p>
/// <p class="rosetta__paragraph">1</p>
/// <p class="rosetta__paragraph">1 1</p>
/// <p class="rosetta__paragraph">1 2 1</p>
/// <p class="rosetta__paragraph">1 3 3 1</p>
/// <p class="rosetta__paragraph">1 4 6 4 1</p><br/><p class="rosetta__paragraph">Each row  <tt> n </tt>  (starting with row  0  at the top) shows the coefficients of the binomial expansion of  <big><big> (x + y)<sup>n</sup>. </big></big></p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Write a function that prints out the first  <tt> n </tt>  rows of the triangle  (with  <tt> f(1) </tt>  yielding the row consisting of only the element <span class="rosetta__text--bold">1</span>).</p><br/><p class="rosetta__paragraph">This can be done either by summing elements from the previous rows or using a binary coefficient or combination function.</p><br/><p class="rosetta__paragraph">Behavior for  <big><tt> n â‰¤ 0 </tt></big>  does not need to be uniform, but should be noted.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">See also:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Evaluate binomial coefficients" title="Evaluate binomial coefficients">Evaluate binomial coefficients</a></li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
// Pascal's triangle object
function pascalTriangle (rows) {

	// Number of rows the triangle contains
	this.rows = rows;

	// The 2D array holding the rows of the triangle
	this.triangle = new Array();
	for (var r = 0; r < rows; r++) {
		this.triangle[r] = new Array();
		for (var i = 0; i <= r; i++) {
			if (i == 0 || i == r)
				this.triangle[r][i] = 1;
			else
				this.triangle[r][i] = this.triangle[r-1][i-1]+this.triangle[r-1][i];
		}
	}

	// Method to print the triangle
	this.print = function(base) {
		if (!base)
			base = 10;

		// Private method to calculate digits in number
		var digits = function(n,b) {
			var d = 0;
			while (n >= 1) {
				d++;
				n /= b;
			}
			return d;
		}

		// Calculate max spaces needed
		var spacing = digits(this.triangle[this.rows-1][Math.round(this.rows/2)],base);

		// Private method to add spacing between numbers
		var insertSpaces = function(s) {
			var buf = "";
			while (s > 0) {
				s--;
				buf += " ";
			}
			return buf;
		}

		// Print the triangle line by line
		for (var r = 0; r < this.triangle.length; r++) {
			var l = "";
			for (var s = 0; s < Math.round(this.rows-1-r); s++) {
				l += insertSpaces(spacing);
			}
			for (var i = 0; i < this.triangle[r].length; i++) {
				if (i != 0)
					l += insertSpaces(spacing-Math.ceil(digits(this.triangle[r][i],base)/2));
				l += this.triangle[r][i].toString(base);
				if (i < this.triangle[r].length-1)
					l += insertSpaces(spacing-Math.floor(digits(this.triangle[r][i],base)/2));
			}
			print(l);
		}
	}

}

// Display 4 row triangle in base 10
var tri = new pascalTriangle(4);
tri.print();
// Display 8 row triangle in base 16
tri = new pascalTriangle(8);
tri.print(16);

/// rawSolutions:
=={{header|JavaScript}}==
===ES5===
====Imperative====
{{works with|SpiderMonkey}}
{{works with|V8}}
<lang javascript>// Pascal's triangle object
function pascalTriangle (rows) {

	// Number of rows the triangle contains
	this.rows = rows;

	// The 2D array holding the rows of the triangle
	this.triangle = new Array();
	for (var r = 0; r < rows; r++) {
		this.triangle[r] = new Array();
		for (var i = 0; i <= r; i++) {
			if (i == 0 || i == r)
				this.triangle[r][i] = 1;
			else
				this.triangle[r][i] = this.triangle[r-1][i-1]+this.triangle[r-1][i];
		}
	}

	// Method to print the triangle
	this.print = function(base) {
		if (!base)
			base = 10;

		// Private method to calculate digits in number
		var digits = function(n,b) {
			var d = 0;
			while (n >= 1) {
				d++;
				n /= b;
			}
			return d;
		}

		// Calculate max spaces needed
		var spacing = digits(this.triangle[this.rows-1][Math.round(this.rows/2)],base);

		// Private method to add spacing between numbers
		var insertSpaces = function(s) {
			var buf = "";
			while (s > 0) {
				s--;
				buf += " ";
			}
			return buf;
		}

		// Print the triangle line by line
		for (var r = 0; r < this.triangle.length; r++) {
			var l = "";
			for (var s = 0; s < Math.round(this.rows-1-r); s++) {
				l += insertSpaces(spacing);
			}
			for (var i = 0; i < this.triangle[r].length; i++) {
				if (i != 0)
					l += insertSpaces(spacing-Math.ceil(digits(this.triangle[r][i],base)/2));
				l += this.triangle[r][i].toString(base);
				if (i < this.triangle[r].length-1)
					l += insertSpaces(spacing-Math.floor(digits(this.triangle[r][i],base)/2));
			}
			print(l);
		}
	}

}

// Display 4 row triangle in base 10
var tri = new pascalTriangle(4);
tri.print();
// Display 8 row triangle in base 16
tri = new pascalTriangle(8);
tri.print(16);</lang>
Output:
<pre>$ d8 pascal.js 
   1
  1 1
 1 2 1
1 3 3 1
              1
            1   1
          1   2   1
        1   3   3   1
      1   4   6   4   1
    1   5   a   a   5   1
  1   6   f   14  f   6   1
1   7   15  23  23  15  7   1</pre>

====Functional====
{{Trans|Haskell}} 
<lang JavaScript>(function (n) {
    'use strict';

    // PASCAL TRIANGLE --------------------------------------------------------

    // pascal :: Int -> [[Int]]
    function pascal(n) {
        return foldl(function (a) {
            var xs = a.slice(-1)[0]; // Previous row
            return append(a, [zipWith(
                function (a, b) {
                    return a + b;
                },
                append([0], xs),
                append(xs, [0])
            )]);
        }, [
            [1] // Initial seed row
        ], enumFromTo(1, n - 1));
    };


    // GENERIC FUNCTIONS ------------------------------------------------------

    // (++) :: [a] -> [a] -> [a]
    function append(xs, ys) {
        return xs.concat(ys);
    };

    // enumFromTo :: Int -> Int -> [Int]
    function enumFromTo(m, n) {
        return Array.from({
            length: Math.floor(n - m) + 1
        }, function (_, i) {
            return m + i;
        });
    };

    // foldl :: (b -> a -> b) -> b -> [a] -> b
    function foldl(f, a, xs) {
        return xs.reduce(f, a);
    };

    // foldr (a -> b -> b) -> b -> [a] -> b
    function foldr(f, a, xs) {
        return xs.reduceRight(f, a);
    };

    // map :: (a -> b) -> [a] -> [b]
    function map(f, xs) {
        return xs.map(f);
    };

    // min :: Ord a => a -> a -> a
    function min(a, b) {
        return b < a ? b : a;
    };

    // zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
    function zipWith(f, xs, ys) {
        return Array.from({
            length: min(xs.length, ys.length)
        }, function (_, i) {
            return f(xs[i], ys[i]);
        });
    };

    // TEST and FORMAT --------------------------------------------------------
    var lstTriangle = pascal(n);

    // [[a]] -> bool -> s -> s
    function wikiTable(lstRows, blnHeaderRow, strStyle) {
        return '{| class="wikitable" ' + (strStyle ? 'style="' + strStyle +
                '"' : '') + lstRows.map(function (lstRow, iRow) {
                var strDelim = blnHeaderRow && !iRow ? '!' : '|';
                return '\n|-\n' + strDelim + ' ' + lstRow.map(function (v) {
                        return typeof v === 'undefined' ? ' ' : v;
                    })
                    .join(' ' + strDelim + strDelim + ' ');
            })
            .join('') + '\n|}';
    }

    var lstLastLine = lstTriangle.slice(-1)[0],
        lngBase = lstLastLine.length * 2 - 1,
        nWidth = lstLastLine.reduce(function (a, x) {
            var d = x.toString()
                .length;
            return d > a ? d : a;
        }, 1) * lngBase;

    return [wikiTable(lstTriangle.map(function (lst) {
            return lst.join(';;')
                .split(';');
        })
        .map(function (line, i) {
            var lstPad = Array((lngBase - line.length) / 2);
            return lstPad.concat(line)
                .concat(lstPad);
        }), false, 'text-align:center;width:' + nWidth + 'em;height:' + nWidth +
        'em;table-layout:fixed;'), JSON.stringify(lstTriangle)].join('\n\n');
})(7);</lang>
{{Out}}
{| class="wikitable" style="text-align:center;width:26em;height:26em;table-layout:fixed;"
|-
|  ||  ||  ||  ||  ||  || 1 ||  ||  ||  ||  ||  || 
|-
|  ||  ||  ||  ||  || 1 ||  || 1 ||  ||  ||  ||  || 
|-
|  ||  ||  ||  || 1 ||  || 2 ||  || 1 ||  ||  ||  || 
|-
|  ||  ||  || 1 ||  || 3 ||  || 3 ||  || 1 ||  ||  || 
|-
|  ||  || 1 ||  || 4 ||  || 6 ||  || 4 ||  || 1 ||  || 
|-
|  || 1 ||  || 5 ||  || 10 ||  || 10 ||  || 5 ||  || 1 || 
|-
| 1 ||  || 6 ||  || 15 ||  || 20 ||  || 15 ||  || 6 ||  || 1
|}

<lang JavaScript>[[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]</lang>

===ES6===
<lang JavaScript>(() => {
    'use strict';

    // PASCAL'S TRIANGLE ------------------------------------------------------

    // pascal :: Int -> [[Int]]
    const pascal = n =>
        foldl(a => {
            const xs = a.slice(-1)[0]; // Previous row
            return append(a, [
                zipWith(
                    (a, b) => a + b,
                    append([0], xs),
                    append(xs, [0])
                )
            ]);
        }, [
            [1] // Initial seed row
        ], enumFromTo(1, n - 1));


    // GENERIC FUNCTIONS ------------------------------------------------------

    // (++) :: [a] -> [a] -> [a]
    const append = (xs, ys) => xs.concat(ys);

    // enumFromTo :: Int -> Int -> [Int]
    const enumFromTo = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // foldl :: (b -> a -> b) -> b -> [a] -> b
    const foldl = (f, a, xs) => xs.reduce(f, a);

    // foldr (a -> b -> b) -> b -> [a] -> b
    const foldr = (f, a, xs) => xs.reduceRight(f, a);

    // map :: (a -> b) -> [a] -> [b]
    const map = (f, xs) => xs.map(f);

    // min :: Ord a => a -> a -> a
    const min = (a, b) => b < a ? b : a;

    // zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
    const zipWith = (f, xs, ys) =>
        Array.from({
            length: min(xs.length, ys.length)
        }, (_, i) => f(xs[i], ys[i]));

    // TEST -------------------------------------------------------------------
    return foldr((a, x) => {
            const strIndent = a.indent;
            return {
                rows: strIndent + map(n => ('    ' + n)
                        .slice(-4), x)
                    .join('') + '\n' + a.rows,
                indent: strIndent + '  '
            };
        }, {
            rows: '',
            indent: ''
        }, pascal(7))
        .rows;
})();</lang>
{{Out}}
<pre>               1
             1   1
           1   2   1
         1   3   3   1
       1   4   6   4   1
     1   5  10  10   5   1
   1   6  15  20  15   6   1
</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
