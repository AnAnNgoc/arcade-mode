
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Inheritance/Multiple
/// type: rosetta-code

/// categories:
/// Object oriented
/// Type System

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">Multiple inheritance allows to specify that one <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/classes " title="classes "> class</a> is a subclass of several other classes.</p>
/// <p class="rosetta__paragraph">Some languages allow multiple <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/inheritance" title="inheritance">inheritance</a> for arbitrary classes,</p>
/// <p class="rosetta__paragraph">others restrict it to interfaces, some don't allow it at all.</p><br/><p class="rosetta__paragraph">Write two classes (or interfaces) <tt>Camera</tt> and <tt>MobilePhone</tt>,</p>
/// <p class="rosetta__paragraph">then write a class <tt>CameraPhone</tt> which is both a <tt>Camera</tt> and</p>
/// <p class="rosetta__paragraph">a <tt>MobilePhone</tt>.</p><br/><p class="rosetta__paragraph">There is no need to implement any functions for those classes.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
