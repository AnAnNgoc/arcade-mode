
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Increment a numerical string
/// type: rosetta-code

/// categories:
/// Simple

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Increment a numerical string.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
let s = '9999';
let splusplus = (+s+1)+""

console.log([splusplus, typeof splusplus]) // 10000,string

/// rawSolutions:
=={{header|JavaScript}}==
===ES6===

Using implicit coercion:

<lang javascript>let s = '9999';
let splusplus = (+s+1)+""

console.log([splusplus, typeof splusplus]) // 10000,string</lang>


Or, with explicit type-checking and conversion:

<lang javascript>(() => {
    'use strict';

    // stringSucc :: Maybe String -> Maybe String
    const stringSucc = s =>
        isNaN(s) ? undefined : (Number(s) + 1).toString();

    // show :: a -> String
    const show = x => JSON.stringify(x, null, 2);

    return show(
        ['2', '4', '8', '16', 'anomaly'].map(stringSucc)
    );
})();</lang>

{{Out}}
<pre>[
  "3",
  "5",
  "9",
  "17",
  null
]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7eb5
