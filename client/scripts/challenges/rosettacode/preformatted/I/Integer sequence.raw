
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Integer sequence
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Create a program that, when run, would display all integers from  <span class="rosetta__text--bold">1</span>  to  <big><big> <span class="rosetta__text--bold"> <b> &infin; </b> </span> </big></big>  (or any relevant implementation limit),  in sequence  (i.e.  1, 2, 3, 4, etc)  if given enough time.</p>
/// <br/><p class="rosetta__paragraph">An example may not be able to reach arbitrarily-large numbers based on implementations limits.  For example, if integers are represented as a 32-bit unsigned value with 0 as the smallest representable value, the largest representable value would be 4,294,967,295.  Some languages support arbitrarily-large numbers as a built-in feature, while others make use of a module or library.</p><br/><p class="rosetta__paragraph">If appropriate, provide an example which reflect the language implementation's common built-in limits as well as an example which supports arbitrarily large numbers, and describe the nature of such limitationsâ€”or lack thereof.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var i = 0;

while (true)
    document.write(++i + ' ');

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>var i = 0;

while (true)
    document.write(++i + ' ');</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
/// id: 5a23c84252665b21eecc7ebc
