
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Inheritance/Single
/// type: rosetta-code

/// categories:
/// Object oriented
/// Type System
/// Encyclopedia

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">''This task is about derived types; for implementation inheritance, see <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Polymorphism" title="Polymorphism">Polymorphism</a>.</span></p><br/><p class="rosetta__paragraph">Inheritance is an operation of <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/type algebra" title="type algebra">type algebra</a> that creates a new type from one or several parent types. The obtained type is called <span class="rosetta__text--bold">derived type</span>. It inherits some of the properties of its parent types. Usually inherited properties are:</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">methods</li>
/// <li class="rosetta__list-item--unordered">components</li>
/// <li class="rosetta__list-item--unordered">parts of the representation</li></ul>The <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/classes " title="classes "> class</a> of the new type is a <span class="rosetta__text--bold">subclass</span> of the classes rooted in the parent types. When all (in certain sense) properties of the parents are preserved by the derived type, it is said to be a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Liskov_substitution_principle" title="wp: Liskov_substitution_principle">Liskov subtype</a>. When properties are preserved then the derived type is <span class="rosetta__text--italic">substitutable</span> for its parents in all contexts. Usually full substitutability is achievable only in some contexts.<br/><p class="rosetta__paragraph">Inheritance is</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><span class="rosetta__text--bold">single</span>, when only one parent is allowed</li>
/// <li class="rosetta__list-item--unordered"><span class="rosetta__text--bold"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/multiple inheritance " title="multiple inheritance "> multiple</a></span>, otherwise</li></ul>
/// <p class="rosetta__paragraph">Some single inheritance languages usually allow multiple inheritance for certain <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/abstract type" title="abstract type">abstract type</a>s, interfaces in particular.</p><br/><p class="rosetta__paragraph">Inheritance can be considered as a relation parent-child. Parent types are sometimes called <span class="rosetta__text--bold">supertype</span>, the derived ones are <span class="rosetta__text--bold">subtype</span>. This relation is <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Transitive_relation" title="wp: Transitive_relation">transitive</a> and <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Reflexive_relation" title="wp: Reflexive_relation">reflexive</a>. Types bound by the relation form a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Directed_acyclic_graph directed acyclic graph]] (ignoring reflexivity). With single inheritance it becomes a [[wp:Tree_(graph_theory)" title="wp: Directed_acyclic_graph directed acyclic graph]] (ignoring reflexivity). With single inheritance it becomes a [[wp:Tree_(graph_theory)">tree</a>.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Task</span>: Show a tree of types which inherit from each other. The top of the tree should be a class called Animal. The second level should have Dog and Cat. Under Dog should be Lab and Collie. None of the classes need to have any functions, the only thing they need to do is inherit from the specified superclasses (overriding functions should be shown in <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Polymorphism" title="Polymorphism">Polymorphism</a>). The tree should look like this:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">    Animal
///       /\
///      /  \
///     /    \
///    Dog   Cat
///    /\
///   /  \
///  /    \
/// Lab   Collie</pre></div><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function Animal() {
    // ...
}

/// rawSolutions:
=={{header|JavaScript}}==
JavaScript is a class-free, object-oriented language, and as such, it uses prototypal inheritance instead of classical inheritance.
<lang javascript>function Animal() {
    // ...
}</lang>

<lang javascript>function Dog() {
    // ...
}
Dog.prototype = new Animal();</lang>

<lang javascript>function Cat() {
    // ...
}
Cat.prototype = new Animal();</lang>

<lang javascript>function Collie() {
    // ...
}
Collie.prototype = new Dog();</lang>

<lang javascript>function Lab() {
    // ...
}
Lab.prototype = new Dog();</lang>

<lang javascript>Animal.prototype.speak = function() {print("an animal makes a sound")};

var lab = new Lab();
lab.speak();  // shows "an animal makes a sound"</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
