
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Textonyms
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// When entering text on a phone's digital pad it is possible that a particular combination of digits corresponds to more than one word. Such are called textonyms.
/// <br>
/// Assuming the digit keys are mapped to letters as follows:
///      2 -> ABC
///      3 -> DEF
///      4 -> GHI
///      5 -> JKL
///      6 -> MNO
///      7 -> PQRS
///      8 -> TUV
///      9 -> WXYZ  
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Write a program that finds textonyms in a list of words such as &nbsp; 
/// <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Textonyms/wordlist" title="Textonyms/wordlist">Textonyms/wordlist</a> &nbsp; or &nbsp; 
/// [http://www.puzzlers.org/pub/wordlists/unixdict.txt unixdict.txt].
/// <br>
/// The task should produce a report:
/// <br>
///  There are #{0} words in #{1} which can be represented by the digit key mapping.
///  They require #{2} digit combinations to represent them.
///  #{3} digit combinations represent Textonyms.
/// <br>
/// Where:
///  #{0} is the number of words in the list which can be represented by the digit key mapping.
///  #{1} is the URL of the wordlist being used.
///  #{2} is the number of digit combinations required to represent the words in #{0}.
///  #{3} is the number of #{2} which represent more than one word.
/// <br>
/// At your discretion show a couple of examples of your solution displaying Textonys. 
/// <br>
/// E.G.:
/// <br>
///   2748424767 -> "Briticisms", "criticisms"
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Extra credit:</dt></dl>
/// Use a word list and keypad mapping other than English.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
