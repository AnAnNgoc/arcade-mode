
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Truncate a file
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
///  
/// [[Category:File System Operations]]
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Truncate a file to a specific length. &nbsp; This should be implemented as a routine that takes two parameters: the filename and the required file length (in bytes).
/// <br>
/// <br>
/// Truncation can be achieved using system or library calls intended for such a task, if such methods exist, or by creating a temporary file of a reduced size and renaming it, after first deleting the original file, if no other method is available. &nbsp; The file may contain non human readable binary data in an unspecified format, so the routine should be "binary safe", leaving the contents of the untruncated part of the file unchanged.
/// <br>
/// If the specified filename does not exist, or the provided length is not less than the current file length, then the routine should raise an appropriate error condition. 
/// <br>
/// On some systems, the provided file truncation facilities might not change the file or may extend the file, if the specified length is greater than the current length of the file. 
/// <br>
/// This task permits the use of such facilities. &nbsp; However, such behaviour should be noted, or optionally a warning message relating to an non change or increase in file size may be implemented.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
