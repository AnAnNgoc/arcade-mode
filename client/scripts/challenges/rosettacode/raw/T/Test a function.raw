
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Test a function
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// Using a well-known testing-specific library/module/suite for your language, write some tests for your language's entry in <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Palindrome" title="Palindrome">Palindrome</a>. If your language does not have a testing specific library well known to the language's community then state this or omit the language. 
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
const assert = require('assert');

describe('palindrome', () => {
  const pali = require('../lib/palindrome');

  describe('.check()', () => {
    it('should return true on encountering a palindrome', () => {
      assert.ok(pali.check('racecar'));
      assert.ok(pali.check('abcba'));
      assert.ok(pali.check('aa'));
      assert.ok(pali.check('a'));
    });

    it('should return true on encountering an empty string', () => {
      assert.ok(pali.check(''));
    });

    it('should return false on encountering a non-palindrome', () => {
      assert.ok(!pali.check('alice'));
      assert.ok(!pali.check('ab'));
      assert.ok(!pali.check('abcdba'));
    });
  })
});

/// rawSolutions:
=={{header|JavaScript}}==
===ES6===

{{libheader|Mocha}}
{{works with|Node.js}}
{{works with|Browserify}}

<lang javascript>const assert = require('assert');

describe('palindrome', () => {
  const pali = require('../lib/palindrome');

  describe('.check()', () => {
    it('should return true on encountering a palindrome', () => {
      assert.ok(pali.check('racecar'));
      assert.ok(pali.check('abcba'));
      assert.ok(pali.check('aa'));
      assert.ok(pali.check('a'));
    });

    it('should return true on encountering an empty string', () => {
      assert.ok(pali.check(''));
    });

    it('should return false on encountering a non-palindrome', () => {
      assert.ok(!pali.check('alice'));
      assert.ok(!pali.check('ab'));
      assert.ok(!pali.check('abcdba'));
    });
  })
});</lang>

Output:
<pre>$ ls -R
.:
lib/  test/

./lib:
palindrome.js

./test:
test.js
$ mocha --harmony

  palindrome
    .check()
      ✓ should return true on encountering a palindrome
      ✓ should return true on encountering an empty string
      ✓ should return false on encountering a non-palindrome


  3 passing (18ms)

$ 
</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
