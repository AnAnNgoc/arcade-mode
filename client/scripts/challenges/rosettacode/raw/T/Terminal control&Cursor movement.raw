
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Terminal control/Cursor movement
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Demonstrate how to achieve movement of the terminal cursor:
/// <span class="rosetta__text--indented">* how to move the cursor one position to the left</span>
/// <span class="rosetta__text--indented">* how to move the cursor one position to the right</span>
/// <span class="rosetta__text--indented">* how to move the cursor up one line (without affecting its horizontal position)</span>
/// <span class="rosetta__text--indented">* how to move the cursor down one line (without affecting its horizontal position)</span>
/// <span class="rosetta__text--indented">* how to move the cursor to the beginning of the line</span>
/// <span class="rosetta__text--indented">* how to move the cursor to the end of the line</span>
/// <span class="rosetta__text--indented">* how to move the cursor to the top left corner of the screen</span>
/// <span class="rosetta__text--indented">* how to move the cursor to the bottom right corner of the screen</span>
/// <br>
/// <br>
/// For the purpose of this task, it is not permitted to overwrite any characters or attributes on any part of the screen (so outputting a space is not a suitable solution to achieve a movement to the right).
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Handling of out of bounds locomotion</dt></dl>
/// This task has no specific requirements to trap or correct cursor movement beyond the terminal boundaries, so the implementer should decide what behavior fits best in terms of the chosen language. &nbsp; Explanatory notes may be added to clarify how an out of bounds action would behave and the generation of error messages relating to an out of bounds cursor position is permitted.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
