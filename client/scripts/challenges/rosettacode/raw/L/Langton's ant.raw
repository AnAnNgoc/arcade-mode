Langton's ant

{{task|Cellular automata}}

<a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Langton's ant" title="wp: Langton's ant">Langton's ant</a> is a cellular automaton that models an ant sitting on a plane of cells, all of which are white initially, facing in one of four directions. 
Each cell can either be black or white. 
The ant moves according to the color of the cell it is currently sitting in, with the following rules:
::# &nbsp; If the cell is black, it changes to white and the ant turns left;
::# &nbsp; If the cell is white, it changes to black and the ant turns right;
::# &nbsp; The ant then moves forward to the next cell, and repeat from step 1.

<br>This rather simple ruleset leads to an initially chaotic movement pattern, and after about 10000 steps, a cycle appears where the ant moves steadily away from the starting location in a diagonal corridor about 10 pixels wide.  
Conceptually the ant can then travel infinitely far away.


;Task:
Start the ant near the center of a 100 by 100 field of cells, which is about big enough to contain the initial chaotic part of the movement.
  
Follow the movement rules for the ant, terminate when it moves out of the region, and show the cell colors it leaves behind.


The problem has received some analysis; for more details, please take a look at the Wikipedia article &nbsp; (a link is below)..


;See also:
* &nbsp; Wikipedia: &nbsp; [https://en.wikipedia.org/wiki/Langton%27s_ant Langton's ant].


;Related task:
* &nbsp; Rosetta Code: &nbsp; [[Conway's Game of Life]].
<br><br>


=={{header|JavaScript}}==

Utilises the HTML5 canvas element to procedurally generate the image... I wanted to see the progress of the grid state as it was generated, so this implementation produces a incrementally changing image until an 'ant' hits a cell outside of the coordinate system. It can also accept multiple ants, this adds minimal complexity with only the addition of an 'ants' array which is iterated in each step, no additional conditions are necessary to simulate multiple ants, they coexist quite well... good ants ! 1st argument is an array of ant objects, 2nd argument is an object property list of options to change grid size, pixel size and interval (animation speed).

<lang JavaScript>
// create global canvas
var canvas = document.createElement('canvas');
canvas.id = 'globalCanvas';
document.body.appendChild(canvas);

function langtonant(antx, optx) {
	'use strict';
	var x, y, i;

	// extend default opts
	var opts = {
		gridsize: 100,
		pixlsize: 4,
		interval: 4
	};
	for (i in optx) {
		opts[i] = optx[i];
	}

	// extend default ants
	var ants = [{
		x: 50,
		y: 50,
		d: 0
	}];
	for (i in antx) {
		ants[i] = antx[i];
	}

	// initialise grid
	var grid = [];
	for (x = 0; x < opts.gridsize; x ++) {
		grid[x] = [];
		for (y = 0; y < opts.gridsize; y ++) {
			grid[x][y] = true;
		}
	}

	// initialise directions
	var dirs = [
		{x: 1, y: 0},
		{x: 0, y: -1},
		{x: -1, y: 0},
		{x: 0, y: 1}
	];

	// initialise canvas
	var canv = document.getElementById('globalCanvas');
	var cont = canv.getContext('2d');
	canv.width = opts.gridsize * opts.pixlsize;
	canv.height = opts.gridsize * opts.pixlsize;

	// initialise pixels
	var pixlblac = cont.createImageData(opts.pixlsize, opts.pixlsize);
	for (i = 0; i < (opts.pixlsize * opts.pixlsize * 4); i += 4) {
		pixlblac.data[i + 3] = 255;
	}
	var pixlwhit = cont.createImageData(opts.pixlsize, opts.pixlsize);
	for (i = 0; i < (opts.pixlsize * opts.pixlsize * 4); i += 4) {
		pixlwhit.data[i + 3] = 0;
	}

	// run simulation
	function simulate() {
		var sane = true;

		// iterate over ants
		for (i = 0; i < ants.length; i ++) {
			var n = ants[i];

			// invert, draw, turn
			if (grid[n.x][n.y]) {
				grid[n.x][n.y] = false;
				cont.putImageData(pixlblac, n.x * opts.pixlsize, n.y * opts.pixlsize);
				n.d --;
			} else {
				grid[n.x][n.y] = true;
				cont.putImageData(pixlwhit, n.x * opts.pixlsize, n.y * opts.pixlsize);
				n.d ++;
			}

			// modulus wraparound
			n.d += dirs.length;
			n.d %= dirs.length;

			// position + direction
			n.x += dirs[n.d].x;
			n.y += dirs[n.d].y;

			// sanity check
			sane = (n.x < 0 || n.x > opts.gridsize || n.y < 0 || n.y > opts.gridsize) ? false : sane;
		}

		// loop with interval
		if (sane) {
			setTimeout(simulate, opts.interval);
		}
	}

	simulate();
}
</lang>

Usage: default ants, custom opts

<lang JavaScript>
langtonant({}, {
	gridsize: 100,
	pixlsize: 4,
	interval: 4
});
</lang>

{{out}}

[http://jsbin.com/ocuwal/1/edit Live Version]

[[Image:Langtons Ant - JavaScript 1.png]]

Usage: custom ants, default opts

<lang JavaScript>
langtonant([
	{
		x: (100 / 2) + 7,
		y: (100 / 2) + 7,
		d: 1
	}, {
		x: (100 / 2) + 7,
		y: (100 / 2) - 7,
		d: 2
	}, {
		x: (100 / 2) - 7,
		y: (100 / 2) - 7,
		d: 3
	}, {
		x: (100 / 2) - 7,
		y: (100 / 2) + 7,
		d: 0
	}
]);
</lang>

{{out}}

[http://jsbin.com/ahumuz/1/edit Live Version]

[[Image:Langtons Ant - JavaScript 2.png]]

'''More functional approach to Javascript.'''

Requires lodash. Wants a canvas with id = "c"

<lang javascript>
///////////////////
// LODASH IMPORT //
///////////////////

// import all lodash functions to the main namespace, but isNaN not to cause conflicts
_.each(_.keys(_), k => window[k === 'isNaN' ? '_isNaN' : k] = _[k]);

const
WORLD_WIDTH  = 100,
WORLD_HEIGHT = 100,
PIXEL_SIZE   = 4,
DIRTY_COLOR  = '#000',
VIRGIN_COLOR = '#fff',
RUNS         = 10000,
SPEED        = 50,

//            up right down left
DIRECTIONS = [0, 1,    2,    3],

displayWorld = (world) => each(world, (row, rowidx) => {
  each(row, (cell, cellidx) => {
    canvas.fillStyle = cell === 1 ? DIRTY_COLOR : VIRGIN_COLOR;
    canvas.fillRect(rowidx * PIXEL_SIZE, cellidx * PIXEL_SIZE, PIXEL_SIZE, PIXEL_SIZE);
  });
}),

moveAnt = (world, ant) => {
  world[ant.x][ant.y] = world[ant.x][ant.y] === 1 ? 0 : 1;
  ant.dir             = DIRECTIONS[(4 + ant.dir + (world[ant.x][ant.y] === 0 ? 1 : -1)) % 4];
  switch (ant.dir) {
    case DIRECTIONS[0]:
      ant.y -= 1;
      break;
    case DIRECTIONS[1]:
      ant.x -= 1;
      break;
    case DIRECTIONS[2]:
      ant.y += 1;
      break;
    case DIRECTIONS[3]:
      ant.x += 1;
      break;
  }

  return [world, ant];
},

updateWorld = (world, ant, runs) => {
  [world, ant] = moveAnt(world, ant);
  displayWorld(world);

  if (runs > 0) setTimeout(partial(updateWorld, world, ant, --runs), SPEED);
},

canvas = document.getElementById('c').getContext('2d');

let
world = map(range(WORLD_HEIGHT), i => map(range(WORLD_WIDTH), partial(identity, 0))),
ant   = {
  x:   WORLD_WIDTH  / 2,
  y:   WORLD_HEIGHT / 2,
  dir: DIRECTIONS[0]
};

canvas.canvas.width  = WORLD_WIDTH  * PIXEL_SIZE;
canvas.canvas.height = WORLD_HEIGHT * PIXEL_SIZE;

updateWorld(world, ant, RUNS);
</lang>

