
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Levenshtein distance
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><br>
/// <p class="rosetta__paragraph">In information theory and computer science, the <span class="rosetta__text--bold">Levenshtein distance</span> is a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/string metric" title="wp: string metric">metric</a> for measuring the amount of difference between two sequences (i.e. an <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/edit distance" title="wp: edit distance">edit distance</a>). The Levenshtein distance between two strings is defined as the minimum number of edits needed to transform one string into the other, with the allowable edit operations being insertion, deletion, or substitution of a single character.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Example:</dt></dl>
/// <p class="rosetta__paragraph">The Levenshtein distance between "<span class="rosetta__text--bold">kitten</span>" and "<span class="rosetta__text--bold">sitting</span>" is 3, since the following three edits change one into the other, and there isn't a way to do it with fewer than three edits:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:#  <span class="rosetta__text--bold">k</span>itten   <span class="rosetta__text--bold">s</span>itten      (substitution of 'k' with 's')</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:#  sitt<span class="rosetta__text--bold">e</span>n   sitt<span class="rosetta__text--bold">i</span>n      (substitution of 'e' with 'i')</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:#  sittin         sittin<span class="rosetta__text--bold">g</span>     (insert 'g' at the end).</span></p><br/><br>
/// <p class="rosetta__paragraph">''The Levenshtein distance between  "<span class="rosetta__text--bold">rosettacode</span>",  "<span class="rosetta__text--bold">raisethysword</span>"  is  <span class="rosetta__text--bold">8</span>.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--italic">The distance between two strings is same as that when both strings are reversed.</span></p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task;</dt></dl>
/// <p class="rosetta__paragraph">Implements a Levenshtein distance function, or uses a library function, to show the Levenshtein distance between  "kitten"  and  "sitting".</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Related task:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"> <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Longest common subsequence" title="Longest common subsequence">Longest common subsequence</a></li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function levenshtein(a, b) {
  var t = [], u, i, j, m = a.length, n = b.length;
  if (!m) { return n; }
  if (!n) { return m; }
  for (j = 0; j <= n; j++) { t[j] = j; }
  for (i = 1; i <= m; i++) {
    for (u = [i], j = 1; j <= n; j++) {
      u[j] = a[i - 1] === b[j - 1] ? t[j - 1] : Math.min(t[j - 1], t[j], u[j - 1]) + 1;
    } t = u;
  } return u[n];
}

// tests
[ ['', '', 0],
  ['yo', '', 2],
  ['', 'yo', 2],
  ['yo', 'yo', 0],
  ['tier', 'tor', 2],
  ['saturday', 'sunday', 3],
  ['mist', 'dist', 1],
  ['tier', 'tor', 2],
  ['kitten', 'sitting', 3],
  ['stop', 'tops', 2],
  ['rosettacode', 'raisethysword', 8],
  ['mississippi', 'swiss miss', 8]
].forEach(function(v) {
  var a = v[0], b = v[1], t = v[2], d = levenshtein(a, b);
  if (d !== t) {
    console.log('levenstein("' + a + '","' + b + '") was ' + d + ' should be ' + t);
  }
});

/// rawSolutions:
=={{header|JavaScript}}==
===ES5===
Iterative:
<lang javascript>function levenshtein(a, b) {
  var t = [], u, i, j, m = a.length, n = b.length;
  if (!m) { return n; }
  if (!n) { return m; }
  for (j = 0; j <= n; j++) { t[j] = j; }
  for (i = 1; i <= m; i++) {
    for (u = [i], j = 1; j <= n; j++) {
      u[j] = a[i - 1] === b[j - 1] ? t[j - 1] : Math.min(t[j - 1], t[j], u[j - 1]) + 1;
    } t = u;
  } return u[n];
}

// tests
[ ['', '', 0],
  ['yo', '', 2],
  ['', 'yo', 2],
  ['yo', 'yo', 0],
  ['tier', 'tor', 2],
  ['saturday', 'sunday', 3],
  ['mist', 'dist', 1],
  ['tier', 'tor', 2],
  ['kitten', 'sitting', 3],
  ['stop', 'tops', 2],
  ['rosettacode', 'raisethysword', 8],
  ['mississippi', 'swiss miss', 8]
].forEach(function(v) {
  var a = v[0], b = v[1], t = v[2], d = levenshtein(a, b);
  if (d !== t) {
    console.log('levenstein("' + a + '","' + b + '") was ' + d + ' should be ' + t);
  }
});</lang>

===ES6===
{{Trans|Haskell}}

By composition of generic functions:
<lang JavaScript>(() => {
    'use strict';

    // levenshtein :: String -> String -> Int
    const levenshtein = (sa, sb) => {
        const [s1, s2] = [sa.split(''), sb.split('')];

        return last(s2.reduce((ns, c) => {
            const [n, ns1] = uncons(ns);

            return scanl(
                (z, [c1, x, y]) =>
                minimum(
                    [y + 1, z + 1, x + fromEnum(c1 != c)]
                ),
                n + 1,
                zip3(s1, ns, ns1)
            );
        }, range(0, s1.length)));
    };


    /*********************************************************************/
    // GENERIC FUNCTIONS

    // minimum :: [a] -> a
    const minimum = xs =>
        xs.reduce((a, x) => (x < a || a === undefined ? x : a), undefined);

    // fromEnum :: Enum a => a -> Int
    const fromEnum = x => {
        const type = typeof x;
        return type === 'boolean' ? (
            x ? 1 : 0
        ) : (type === 'string' ? x.charCodeAt(0) : undefined);
    };

    // uncons :: [a] -> Maybe (a, [a])
    const uncons = xs => xs.length ? [xs[0], xs.slice(1)] : undefined;

    // scanl :: (b -> a -> b) -> b -> [a] -> [b]
    const scanl = (f, a, xs) => {
        for (var lst = [a], lng = xs.length, i = 0; i < lng; i++) {
            a = f(a, xs[i], i, xs), lst.push(a);
        }
        return lst;
    };

    // zip3 :: [a] -> [b] -> [c] -> [(a,b,c)]
    const zip3 = (xs, ys, zs) =>
        xs.slice(0, Math.min(xs.length, ys.length, zs.length))
        .map((x, i) => [x, ys[i], zs[i]]);

    // last :: [a] -> a
    const last = xs => xs.length ? xs.slice(-1) : undefined;

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    /*********************************************************************/
    // TEST
    return [
        ["kitten", "sitting"],
        ["sitting", "kitten"],
        ["rosettacode", "raisethysword"],
        ["raisethysword", "rosettacode"]
    ].map(pair => levenshtein.apply(null, pair));

    // -> [3, 3, 8, 8]
})();</lang>

{{Out}}
<lang JavaScript>[3, 3, 8, 8]</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
