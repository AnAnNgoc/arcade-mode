
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Literals/String
/// type: rosetta-code

/// categories:
///  String manipulation
///  Syntax elements

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Show literal specification of characters and strings.</p><br/><p class="rosetta__paragraph">If supported, show how the following work:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <span class="rosetta__text--italic">verbatim strings</span>  (quotes where escape sequences are quoted literally)</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">*  <span class="rosetta__text--italic">here-strings</span>   </span></p><br/><br>
/// <p class="rosetta__paragraph">Also, discuss which quotes expand variables.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks: </dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"> <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Special characters" title="Special characters">Special characters</a></li>
/// <li class="rosetta__list-item--unordered"> <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Here document" title="Here document">Here document</a></li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(function () {
    return "αβγδ 中间来点中文 🐫 אבגד"
})();


(function() {
    return "\u03b1\u03b2\u03b3\u03b4 \u4e2d\u95f4\u6765\u70b9\u4e2d\u6587 \ud83d\udc2b \u05d0\u05d1\u05d2\u05d3";
})();

/// rawSolutions:
=={{header|JavaScript}}==
A JavaScript string is a sequence of zero or more characters enclosed in either 'single quotes' or "double quotes". Neither form prevents escape sequences: <code>"\n"</code> and <code>'\n'</code> are both strings of length 1. There is no variable interpolation.

Unicode characters can be entered as literals or as 4 character hexadecimal escapes. The following expressions are equivalent:

<lang JavaScript>(function () {
    return "αβγδ 中间来点中文 🐫 אבגד"
})();


(function() {
    return "\u03b1\u03b2\u03b3\u03b4 \u4e2d\u95f4\u6765\u70b9\u4e2d\u6587 \ud83d\udc2b \u05d0\u05d1\u05d2\u05d3";
})();</lang>

Note that in the case of the Emoji character above, where more than 4 hexadecimal characters are needed, ES5 requires us to separately write a pair of surrogate halves, and the '''String.length''' of such characters is 2.

ES6 introduces Unicode code point escapes such as <pre>'\u{2F804}'</pre>allowing direct escaping of code points up to 0x10FFFF.



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
