Loops/Continue

{{task|Iteration}}
[[Category:Loop modifiers]]
{{omit from|GUISS}}
{{omit from|M4}}

;Task:
Show the following output using one loop. 
 1, 2, 3, 4, 5
 6, 7, 8, 9, 10


Try to achieve the result by forcing the next iteration within the loop 
upon a specific condition, if your language allows it.
<br><br>


=={{header|JavaScript}}==
Using the <code>print()</code> function from [[Rhino]] or [[SpiderMonkey]].
<lang javascript>var output = "";
for (var i = 1; i <= 10; i++) {
  output += i; 
  if (i % 5 == 0) {
    print(output);
    output = "";
    continue;
  } 
  output += ", ";
}</lang>


Stepping back from any assumption that repetitive patterns of computation necessarily entail 'loops', and using a functional idiom of JavaScript, we can make the value of one or more subexpressions in a ''reduce()'' fold conditional on any special cases that we define.

For example:

<lang JavaScript>function rng(n) {
  return n ? rng(n - 1).concat(n) : [];
}

console.log(
  rng(10).reduce(
    function (a, x) {
      return a + x.toString() + (x % 5 ? ', ' : '\n');
    }, ''
  )
);</lang>

Output:
<lang JavaScript>1, 2, 3, 4, 5
6, 7, 8, 9, 10
</lang>

