Least common multiple

{{task}}

;Task:
Compute the least common multiple of two integers.

Given &nbsp; <span class="rosetta__text--italic">m</span> &nbsp; and &nbsp; <span class="rosetta__text--italic">n</span>, &nbsp; the least common multiple is the smallest positive integer that has both &nbsp; <span class="rosetta__text--italic">m</span> &nbsp; and &nbsp; <span class="rosetta__text--italic">n</span> &nbsp; as factors. 


;Example:
The least common multiple of 12 and 18 is 36, because 12 is a factor (12 &times; 3 = 36), and 18 is a factor (18 &times; 2 = 36), and there is no positive integer less than 36 that has both factors. &nbsp; As a special case, if either &nbsp; <span class="rosetta__text--italic">m</span> &nbsp; or &nbsp; <span class="rosetta__text--italic">n</span> &nbsp; is zero, then the least common multiple is zero.

One way to calculate the least common multiple is to iterate all the multiples of &nbsp; <span class="rosetta__text--italic">m</span>, &nbsp; until you find one that is also a multiple of &nbsp; <span class="rosetta__text--italic">n</span>.

If you already have &nbsp; <span class="rosetta__text--italic">gcd</span> &nbsp; for [[greatest common divisor]], &nbsp; then this formula calculates &nbsp; <span class="rosetta__text--italic">lcm</span>.

<big>
:::: $\operatorname{lcm}(m, n) = \frac{|m \times n|}{\operatorname{gcd}(m, n)}$
</big>

One can also find &nbsp; <span class="rosetta__text--italic">lcm</span> &nbsp; by merging the [[prime decomposition]]s of both &nbsp; <span class="rosetta__text--italic">m</span> &nbsp; and &nbsp; <span class="rosetta__text--italic">n</span>.


;References:
* &nbsp; [http://mathworld.wolfram.com/LeastCommonMultiple.html MathWorld].
* &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Least common multiple" title="wp: Least common multiple">Wikipedia</a>.
<br><br>


=={{header|JavaScript}}==

===ES5===
Computing the least common multiple of an integer array, using the associative law:

<math>\operatorname{lcm}(a,b,c)=\operatorname{lcm}(\operatorname{lcm}(a,b),c),</math>

<math>\operatorname{lcm}(a_1,a_2,\ldots,a_n) = \operatorname{lcm}(\operatorname{lcm}(a_1,a_2,\ldots,a_{n-1}),a_n).</math>

<lang javascript>function LCM(A)  // A is an integer array (e.g. [-50,25,-45,-18,90,447])
{   
    var n = A.length, a = Math.abs(A[0]);
    for (var i = 1; i < n; i++)
     { var b = Math.abs(A[i]), c = a;
       while (a && b){ a > b ? a %= b : b %= a; } 
       a = Math.abs(c*A[i])/(a+b);
     }
    return a;
}

/* For example:
   LCM([-50,25,-45,-18,90,447]) -> 67050
*/</lang>


===ES6===
{{Trans|Haskell}}
<lang JavaScript>(() => {
    'use strict';

    // gcd :: Integral a => a -> a -> a
    let gcd = (x, y) => {
        let _gcd = (a, b) => (b === 0 ? a : _gcd(b, a % b)),
            abs = Math.abs;
        return _gcd(abs(x), abs(y));
    }

    // lcm :: Integral a => a -> a -> a
    let lcm = (x, y) =>
        x === 0 || y === 0 ? 0 : Math.abs(Math.floor(x / gcd(x, y)) * y);

    // TEST
    return lcm(12, 18);

})();</lang>

{{Out}}
<pre>36</pre>

