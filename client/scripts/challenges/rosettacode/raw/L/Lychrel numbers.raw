
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Lychrel numbers
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// [[Category:Palindromes]]
/// <br>
/// # Take an integer n, greater than zero.
/// # Form the next n of its series by reversing the digits of the current n and adding the result to the current n.
/// # Stop when n becomes palindromic - i.e. the digits of n in reverse order == n.
/// <br>
/// <br>
/// The above recurrence relation when applied to most starting numbers n = 1, 2, ... terminates in a palindrome quite quickly, for example if n<sub>0</sub> = 12 we get
/// <pre>12
/// 12 + 21 = 33, a palindrome!</pre>
/// <br>
/// And if n<sub>0</sub> = 55 we get
/// <pre>55
/// 55 + 55 = 110
/// 110 + 011 = 121, a palindrome!</pre>
/// <br>
/// Notice that the check for a palindrome happens <span class="rosetta__text--italic">after</span> an addition.
/// <br>
/// <br>
/// Some starting numbers seem to go on forever; the recurrence relation for 196 has been calculated for millions of repetitions forming numbers with millions of digits, without forming a palindrome. These numbers that do not end in a palindrome are called <span class="rosetta__text--bold">Lychrel numbers</span>.
/// <br>
/// For the purposes of this task a Lychrel number is any starting number that does not form a palindrome within 500 (or more) iterations.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Seed and related Lychrel numbers:</dt></dl>
/// Any integer produced in the sequence of a Lychrel number is also a Lychrel number.
/// <br>
/// In general, any sequence from one Lychrel number <span class="rosetta__text--italic">might</span> converge to join the sequence from a prior Lychrel number candidate; for example the sequences for the numbers 196 and then 689 begin:
/// <pre>196
/// 196 + 691 = 887
/// 887 + 788 = 1675
/// 1675 + 5761 = 7436
/// 7436 + 6347 = 13783
/// 13783 + 38731 = 52514
/// 52514 + 41525 = 94039
/// ...
/// <br>
/// <br>
/// 689
/// 689 + 986 = 1675
/// 1675 + 5761 = 7436
/// ...</pre>
/// So we see that the sequence starting with 689 converges to, and continues with the same numbers as that for 196. Because of this we can further split the Lychrel numbers into true <span class="rosetta__text--bold">Seed</span> Lychrel number candidates, and <span class="rosetta__text--bold">Related</span> numbers that produce no palindromes but have integers in their sequence seen as part of the sequence generated from a lower Lychrel number.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item"> Find the number of seed Lychrel number candidates and related numbers for n in the range 1..10000 inclusive. (With that iteration limit of 500).</li>
/// <li class="rosetta__list-item"> Print the number of seed Lychrels found; the actual seed Lychrels; and just the <span class="rosetta__text--italic">number</span> of relateds found.</li>
/// <li class="rosetta__list-item"> Print any seed Lychrel or related number that is itself a palindrome.</li>
/// <br>
/// </ul>
/// <br>
/// Show all output here.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">References:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">[https://www.youtube.com/watch?v=bN8PE3eljdA What's special about 196?] Numberphile video.</li>
/// <li class="rosetta__list-item">[http://oeis.org/A023108 A023108] Positive integers which apparently never result in a palindrome under repeated applications of the function f(x) = x + (x with digits reversed).</li>
/// <li class="rosetta__list-item">[http://mathoverflow.net/questions/117104/status-of-the-196-conjecture/117277#117277 Status of the 196 conjecture?] Mathoverflow.</li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
