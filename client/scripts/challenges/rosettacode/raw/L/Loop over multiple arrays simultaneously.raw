
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Loop over multiple arrays simultaneously
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Loop over multiple arrays &nbsp; (or lists or tuples or whatever they're called in 
/// your language) &nbsp; and display the &nbsp; <big><big> <span class="rosetta__text--italic">i</span> <sup>th</sup> </big></big> &nbsp; element of each. 
/// <br>
/// Use your language's &nbsp; "for each" &nbsp; loop if it has one, otherwise iterate 
/// through the collection in order with some other loop.
/// <br>
/// <br>
/// For this example, loop over the arrays: 
///      (a,b,c)
///      (A,B,C) 
///      (1,2,3) 
/// to produce the output:
///      aA1
///      bB2
///      cC3
/// <br>
/// <br>
/// If possible, also describe what happens when the arrays are of different lengths.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var a = ["a","b","c"],
    b = ["A","B","C"],
    c = [1,2,3],
    output = "",
    i;
for (i = 0; i < a.length; i += 1) {
    output += a[i] + b[i] + c[i] + "\n";
}

/// rawSolutions:
=={{header|JavaScript}}==

===Imperative===
This loops over the indices of the first array, 
and uses that to index into the others.
<lang javascript>var a = ["a","b","c"],
    b = ["A","B","C"],
    c = [1,2,3],
    output = "",
    i;
for (i = 0; i < a.length; i += 1) {
    output += a[i] + b[i] + c[i] + "\n";
}</lang>
If the b or c arrays are too "short", 
you will see the string "undefined" appear in the output.

Alternatively, we can nest a couple of calls to '''.forEach()''': one for the array of three arrays, and one for each of the three index positions:

<lang JavaScript>var lstOut = ['', '', ''];

[["a", "b", "c"], ["A", "B", "C"], ["1", "2", "3"]].forEach(
  function (a) {
    [0, 1, 2].forEach(
      function (i) {
        // side-effect on an array outside the function
        lstOut[i] += a[i];
      }
    );
  }
);

// lstOut --> ["aA1", "bB2", "cC3"]</lang>

===Functional (ES5)===

Functional options include folding across an array of arrays with the built-in '''Array.reduce()''',
using a zipWith() function of suitable arity, or mapping over the output of a generic (any arity) zip() function.

(The generic zip function is the most tolerant â€“ it simply ignores further elements in any arrays which are longer than the shortest array).

Reduce / fold:

<lang JavaScript>(function (lstArrays) {

    return lstArrays.reduce(
        function (a, e) {
            return [
                a[0] + e[0],
                a[1] + e[1],
                a[2] + e[2]
            ];
        }, ['', '', ''] // initial copy of the accumulator
    ).join('\n');

})([
    ["a", "b", "c"],
    ["A", "B", "C"],
    ["1", "2", "3"]
]);</lang>

A fixed arity ZipWith:

<lang JavaScript>(function (x, y, z) {

    // function of arity 3 mapped over nth items of each of 3 lists
    // (a -> b -> c -> d) -> [a] -> [b] -> [c] -> [d]
    function zipWith3(f, xs, ys, zs) {
        return zs.length ? [f(xs[0], ys[0], zs[0])].concat(
            zipWith3(f, xs.slice(1), ys.slice(1), zs.slice(1))) : [];
    }

    function concat(x, y, z) {
        return ''.concat(x, y, z);
    }

    return zipWith3(concat, x, y, z).join('\n')

})(["a", "b", "c"], ["A", "B", "C"], [1, 2, 3]);</lang>


Or we can write a generic '''zipListsWith''' which applies some supplied function overs lists derived from the nth members of an arbitrary list of (equal-length) lists.

<lang JavaScript>(function () {
    'use strict';

    // zipListsWith :: ([a] -> b) -> [[a]] -> [[b]]
    function zipListsWith(f, xss) {
        return (xss.length ? xss[0] : [])
            .map(function (_, i) {
                return f(xss.map(function (xs) {
                    return xs[i];
                }));
            });
    }




    // Sample function over a list

    // concat :: [a] -> s
    function concat(lst) {
        return ''.concat.apply('', lst);
    }


    //    TEST
    
    return zipListsWith(
        concat, 
        [["a", "b", "c"], ["A", "B", "C"], [1, 2, 3]]
    )
    .join('\n');

})();</lang>

{{Out}}

<lang JavaScript>aA1
bB2
cC3</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
