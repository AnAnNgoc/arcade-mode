
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: GUI enabling/disabling of controls
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
///  
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// In addition to fundamental <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/GUI component interaction" title="GUI component interaction">GUI component interaction</a>, an application should
/// dynamically enable and disable GUI components, to give some guidance to the
/// user, and prohibit (inter)actions which are inappropriate in the current state
/// of the application.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Similar to the task <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/GUI component interaction" title="GUI component interaction">GUI component interaction</a>, write a program 
/// that presents a form with three components to the user: 
/// <span class="rosetta__text--indented">:# &nbsp; a numeric input field ("Value") </span>
/// <span class="rosetta__text--indented">:# &nbsp; a button &nbsp; ("increment")</span>
/// <span class="rosetta__text--indented">:# &nbsp; a button &nbsp; ("decrement")</span>
/// <br>
/// <br>
/// The field is initialized to zero. 
/// The user may manually enter a new value into the field, 
/// increment its value with the "increment" button, 
/// or decrement the value with the "decrement" button.
/// <br>
/// The input field should be enabled only when its value is zero. 
/// The "increment" button only as long as the field's value is less then 10: 
/// When the value 10 is reached, the button should go into a disabled state. 
/// Analogously, the "decrement" button should be enabled only as long as 
/// the value is greater than zero.
/// <br>
/// Effectively, the user can now either increment up to 10, or down to zero.
/// Manually entering values outside that range is still legal, 
/// but the buttons should reflect that and enable/disable accordingly.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
