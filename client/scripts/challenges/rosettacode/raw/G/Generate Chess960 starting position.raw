
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Generate Chess960 starting position
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Chess960" title="wp: Chess960">Chess960</a></span>  is a variant of chess created by world champion <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Bobby Fischer" title="wp: Bobby Fischer">Bobby Fischer</a>.  Unlike other variants of the game, Chess960 does not require a different material, but instead relies on a random initial position, with a few constraints:</p><br/><ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">as in the standard chess game, all eight white pawns must be placed on the second rank.</li>
/// <li class="rosetta__list-item--unordered">White pieces must stand on the first rank as in the standard game, in random column order but with the two following constraints:</li>
/// <li class="rosetta__list-item--unordered">* the bishops must be placed on opposite color squares (i.e. they must be an odd number of spaces apart or there must be an even number of spaces between them)</li>
/// <li class="rosetta__list-item--unordered">* the King must be between two rooks (with any number of other pieces between them all)</li>
/// <li class="rosetta__list-item--unordered">Black pawns and pieces must be placed respectively on the seventh and eighth ranks, mirroring the white pawns and pieces, just as in the standard game.  (That is, their positions are not independently randomized.)</li></ul>
/// <br>
/// <p class="rosetta__paragraph">With those constraints there are <span class="rosetta__text--bold">960</span> possible starting positions, thus the name of the variant.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">The purpose of this task is to write a program that can randomly generate any one of the 960 Chess960 initial positions.  You will show the result as the first rank displayed with  <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Chess symbols in Unicode" title="wp: Chess symbols in Unicode">Chess symbols in Unicode: ♔♕♖♗♘</a>  or with the letters  <span class="rosetta__text--bold">K</span>ing  <span class="rosetta__text--bold">Q</span>ueen  <span class="rosetta__text--bold">R</span>ook  <span class="rosetta__text--bold">B</span>ishop  k<span class="rosetta__text--bold">N</span>ight.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function ch960startPos() {
  var rank = new Array(8),
      // randomizer (our die)
      d = function(num) { return Math.floor(Math.random() * ++num) },
      emptySquares = function() {
        var arr = [];
        for (var i = 0; i < 8; i++) if (rank[i] == undefined) arr.push(i);
        return arr;
      };
  // place one bishop on any black square
  rank[d(2) * 2] = "♗";
  // place the other bishop on any white square
  rank[d(2) * 2 + 1] = "♗";
  // place the queen on any empty square
  rank[emptySquares()[d(5)]] = "♕";
  // place one knight on any empty square
  rank[emptySquares()[d(4)]] = "♘";
  // place the other knight on any empty square
  rank[emptySquares()[d(3)]] = "♘";
  // place the rooks and the king on the squares left, king in the middle
  for (var x = 1; x <= 3; x++) rank[emptySquares()[0]] = x==2 ? "♔" : "♖";
  return rank;
}

// testing (10 times)
for (var x = 1; x <= 10; x++) console.log(ch960startPos().join(" | "));

/// rawSolutions:
=={{header|JavaScript}}==
This conforms to Altendörfer's single die method[https://en.wikipedia.org/wiki/Chess960_starting_position#Single_die_method], though the die will give no "needless" numbers.
<lang javaScript>function ch960startPos() {
  var rank = new Array(8),
      // randomizer (our die)
      d = function(num) { return Math.floor(Math.random() * ++num) },
      emptySquares = function() {
        var arr = [];
        for (var i = 0; i < 8; i++) if (rank[i] == undefined) arr.push(i);
        return arr;
      };
  // place one bishop on any black square
  rank[d(2) * 2] = "♗";
  // place the other bishop on any white square
  rank[d(2) * 2 + 1] = "♗";
  // place the queen on any empty square
  rank[emptySquares()[d(5)]] = "♕";
  // place one knight on any empty square
  rank[emptySquares()[d(4)]] = "♘";
  // place the other knight on any empty square
  rank[emptySquares()[d(3)]] = "♘";
  // place the rooks and the king on the squares left, king in the middle
  for (var x = 1; x <= 3; x++) rank[emptySquares()[0]] = x==2 ? "♔" : "♖";
  return rank;
}

// testing (10 times)
for (var x = 1; x <= 10; x++) console.log(ch960startPos().join(" | "));</lang>
{{out}}
<p>The test-output (exemplary each):</p>
♖ | ♗ | ♗ | ♔ | ♘ | ♖ | ♘ | ♕<br/>
♗ | ♗ | ♕ | ♖ | ♔ | ♘ | ♘ | ♖<br/>
♖ | ♕ | ♘ | ♗ | ♗ | ♔ | ♘ | ♖<br/>
♖ | ♗ | ♔ | ♘ | ♗ | ♕ | ♘ | ♖<br/>
♗ | ♖ | ♕ | ♔ | ♘ | ♗ | ♘ | ♖<br/>
♖ | ♗ | ♗ | ♕ | ♔ | ♘ | ♖ | ♘<br/>
♗ | ♘ | ♖ | ♗ | ♔ | ♘ | ♕ | ♖<br/>
♕ | ♘ | ♗ | ♖ | ♔ | ♗ | ♖ | ♘<br/>
♗ | ♘ | ♖ | ♘ | ♕ | ♗ | ♔ | ♖<br/>
♘ | ♗ | ♖ | ♔ | ♗ | ♘ | ♖ | ♕<br/>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
