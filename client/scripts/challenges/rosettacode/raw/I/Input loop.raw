
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Input loop
/// type: rosetta-code

/// categories:
/// Basic language learning
/// Streams
/// Simple

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <br/><p class="rosetta__paragraph"><!-- No streams other than user input, not really applicable. --></p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Read from a text stream either word-by-word or line-by-line until the stream runs out of data.</p><br/><p class="rosetta__paragraph">The stream will have an unknown amount of data on it.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var text_stream = WScript.StdIn;
var i = 0;

while ( ! text_stream.AtEndOfStream ) {
    var line = text_stream.ReadLine();
    // do something with line
    WScript.echo(++i + ": " + line);
}

/// rawSolutions:
=={{header|JavaScript}}==
{{works with|SpiderMonkey}}
{{works with|OSSP js}}

These implementations of JavaScript define a <code>readline()</code> function, so:
<pre>$ js -e 'while (line = readline()) { do_something_with(line); }' < inputfile</pre>

{{works with|JScript}}

As above, this operates on standard input
<lang javascript>var text_stream = WScript.StdIn;
var i = 0;

while ( ! text_stream.AtEndOfStream ) {
    var line = text_stream.ReadLine();
    // do something with line
    WScript.echo(++i + ": " + line);
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
