
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Identity matrix
/// type: rosetta-code

/// categories:
/// Matrices

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Build an &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/identity matrix" title="wp: identity matrix">identity matrix</a> &nbsp; of a size known at run-time. 
/// <br>
/// <br>
/// An <span class="rosetta__text--italic">identity matrix</span> is a square matrix of size <span class="rosetta__text--bold"><span class="rosetta__text--italic">n</span> &times; <span class="rosetta__text--italic">n</span></span>, 
/// <br>where the diagonal elements are all <span class="rosetta__text--bold">1</span>s (ones), 
/// <br>and all the other elements are all <span class="rosetta__text--bold">0</span>s (zeroes).
/// <br>
/// <br>
/// $I_n = \begin{bmatrix}
///   1      & 0      & 0      & \cdots & 0      \\
///   0      & 1      & 0      & \cdots & 0      \\
///   0      & 0      & 1      & \cdots & 0      \\
///   \vdots & \vdots & \vdots & \ddots & \vdots \\
///   0      & 0      & 0      & \cdots & 1      \\
/// \end{bmatrix}$
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Spiral matrix" title="Spiral matrix">Spiral matrix</a></li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Zig-zag matrix" title="Zig-zag matrix">Zig-zag matrix</a> </li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Ulam_spiral_(for_primes)" title="Ulam_spiral_(for_primes)">Ulam_spiral_(for_primes)</a></li></ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function idMatrix(n) {
    return Array.apply(null, new Array(n))
        .map(function (x, i, xs) {
            return xs.map(function (_, k) {
                return i === k ? 1 : 0;
            })
        });
}

/// rawSolutions:
=={{header|JavaScript}}==

===ES5===

<lang Javascript>function idMatrix(n) {
    return Array.apply(null, new Array(n))
        .map(function (x, i, xs) {
            return xs.map(function (_, k) {
                return i === k ? 1 : 0;
            })
        });
}</lang>

===ES6===

<lang JavaScript>(() => {

    // idMatrix :: Int -> [[0 | 1]]
    const idMatrix = n => Array.from({
            length: n
        }, (_, i) => Array.from({
            length: n
        }, (_, j) => i !== j ? 0 : 1));

    // show :: a -> String
    const show = JSON.stringify;

    // TEST
    return idMatrix(5)
        .map(show)
        .join('\n');
})();</lang>

{{Out}}
<pre>[1,0,0,0,0]
[0,1,0,0,0]
[0,0,1,0,0]
[0,0,0,1,0]
[0,0,0,0,1]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
