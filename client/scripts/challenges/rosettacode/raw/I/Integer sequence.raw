
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Integer sequence
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Create a program that, when run, would display all integers from &nbsp; <span class="rosetta__text--bold">1</span> &nbsp; to &nbsp; <big><big> <span class="rosetta__text--bold"> <b> &infin; </b> </span> </big></big> &nbsp; (or any relevant implementation limit), &nbsp; in sequence &nbsp; (i.e. &nbsp; 1, 2, 3, 4, etc) &nbsp; if given enough time.
/// <br>
/// <br>
/// An example may not be able to reach arbitrarily-large numbers based on implementations limits. &nbsp; For example, if integers are represented as a 32-bit unsigned value with 0 as the smallest representable value, the largest representable value would be 4,294,967,295. &nbsp; Some languages support arbitrarily-large numbers as a built-in feature, while others make use of a module or library.
/// <br>
/// If appropriate, provide an example which reflect the language implementation's common built-in limits as well as an example which supports arbitrarily large numbers, and describe the nature of such limitationsâ€”or lack thereof.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var i = 0;

while (true)
    document.write(++i + ' ');

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>var i = 0;

while (true)
    document.write(++i + ' ');</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
