
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Wireworld
/// type: rosetta-code

/// categories:
/// Cellular automata

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Wireworld" title="wp: Wireworld">Wireworld</a> is a cellular automaton with some similarities to <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Conway's Game of Life" title="Conway's Game of Life">Conway's Game of Life</a>.</p><br/><p class="rosetta__paragraph">It is capable of doing sophisticated computations with appropriate programs</p>
/// <p class="rosetta__paragraph">(it is actually <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Turing-complete" title="wp: Turing-complete">Turing complete</a>),</p>
/// <p class="rosetta__paragraph">and is much simpler to program for.</p><br/><p class="rosetta__paragraph">A Wireworld arena consists of a Cartesian grid of cells,</p>
/// <p class="rosetta__paragraph">each of which can be in one of four states.</p>
/// <p class="rosetta__paragraph">All cell transitions happen simultaneously.</p><br/><p class="rosetta__paragraph">The cell transition rules are this:</p>
/// <p class="rosetta__paragraph">{| class=wikitable</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">! Input State</p>
/// <p class="rosetta__paragraph">! Output State</p>
/// <p class="rosetta__paragraph">! Condition</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| <tt>empty</tt></p>
/// <p class="rosetta__paragraph">| <tt>empty</tt></p>
/// <p class="rosetta__paragraph">|</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| <tt>electronhead</tt></p>
/// <p class="rosetta__paragraph">| <tt>electrontail</tt></p>
/// <p class="rosetta__paragraph">|</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| <tt>electrontail</tt></p>
/// <p class="rosetta__paragraph">| <tt>conductor</tt></p>
/// <p class="rosetta__paragraph">|</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| valign=top | <tt>conductor</tt></p>
/// <p class="rosetta__paragraph">| valign=top | <tt>electronhead</tt></p>
/// <p class="rosetta__paragraph">| if 1 or 2 cells in the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Moore neighborhood" title="wp: Moore neighborhood">neighborhood</a> of the cell are in the state “<tt>electron head</tt>”</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">| <tt>conductor</tt></p>
/// <p class="rosetta__paragraph">| <tt>conductor</tt></p>
/// <p class="rosetta__paragraph">| otherwise</p>
/// <p class="rosetta__paragraph">|}</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Create a program that reads a Wireworld program from a file and displays an animation of the processing. Here is a sample description file (using "<tt>H</tt>" for an electron head, "<tt>t</tt>" for a tail, "<tt>.</tt>" for a conductor and a space for empty) you may wish to test with, which demonstrates two cycle-3 generators and an inhibit gate:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// tH.........
/// .   .
///    ...
/// .   .
/// Ht.. ......
/// </pre></div>
/// <p class="rosetta__paragraph">While text-only implementations of this task are possible, mapping cells to pixels is advisable if you wish to be able to display large designs. The logic is not significantly more complex.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
