
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Magic squares of doubly even order
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">A <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Magic_square" title="wp: Magic_square">magic square</a> is an <span class="rosetta__text--bold">NxN</span> square matrix whose numbers consist of consecutive numbers arranged so that the sum of each row and column, <span class="rosetta__text--italic">and</span> both diagonals are equal to the same sum (which is called the <span class="rosetta__text--italic">magic number</span> or <span class="rosetta__text--italic">magic constant</span>).</p><br/><p class="rosetta__paragraph">A magic square of doubly even order has a size that is a multiple of four (e.g. 4, 8, 12). This means that the subsquares also have an even size, which plays a role in the construction.</p><br/><p class="rosetta__paragraph"><!--  As more computer programming languages will be added, they will "fill up" the space to the left of this light blue grid, and the first language entry will be the (normal) full width, so the big size is essential "free space".   Gerard Schildberger.   --></p>
/// <p class="rosetta__paragraph">{| class="wikitable" style="float:right;border: 2px solid black; background:lightblue; color:black; margin-left:auto;margin-right:auto;text-align:center;width:22em;height:15em;table-layout:fixed;font-size:100%"</p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">|<big><span class="rosetta__text--bold">1</span></big>||<big><span class="rosetta__text--bold">2</span></big>||<big><span class="rosetta__text--bold">62</span></big>||<big><span class="rosetta__text--bold">61</span></big>||<big><span class="rosetta__text--bold">60</span></big>||<big><span class="rosetta__text--bold">59</span></big>||<big><span class="rosetta__text--bold">7</span></big>||<big><span class="rosetta__text--bold">8</span></big></p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">|<big><span class="rosetta__text--bold">9</span></big>||<big><span class="rosetta__text--bold">10</span></big>||<big><span class="rosetta__text--bold">54</span></big>||<big><span class="rosetta__text--bold">53</span></big>||<big><span class="rosetta__text--bold">52</span></big>||<big><span class="rosetta__text--bold">51</span></big>||<big><span class="rosetta__text--bold">15</span></big>||<big><span class="rosetta__text--bold">16</span></big></p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">|<big><span class="rosetta__text--bold">48</span></big>||<big><span class="rosetta__text--bold">47</span></big>||<big><span class="rosetta__text--bold">19</span></big>||<big><span class="rosetta__text--bold">20</span></big>||<big><span class="rosetta__text--bold">21</span></big>||<big><span class="rosetta__text--bold">22</span></big>||<big><span class="rosetta__text--bold">42</span></big>||<big><span class="rosetta__text--bold">41</span></big></p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">|<big><span class="rosetta__text--bold">40</span></big>||<big><span class="rosetta__text--bold">39</span></big>||<big><span class="rosetta__text--bold">27</span></big>||<big><span class="rosetta__text--bold">28</span></big>||<big><span class="rosetta__text--bold">29</span></big>||<big><span class="rosetta__text--bold">30</span></big>||<big><span class="rosetta__text--bold">34</span></big>||<big><span class="rosetta__text--bold">33</span></big></p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">|<big><span class="rosetta__text--bold">32</span></big>||<big><span class="rosetta__text--bold">31</span></big>||<big><span class="rosetta__text--bold">35</span></big>||<big><span class="rosetta__text--bold">36</span></big>||<big><span class="rosetta__text--bold">37</span></big>||<big><span class="rosetta__text--bold">38</span></big>||<big><span class="rosetta__text--bold">26</span></big>||<big><span class="rosetta__text--bold">25</span></big></p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">|<big><span class="rosetta__text--bold">24</span></big>||<big><span class="rosetta__text--bold">23</span></big>||<big><span class="rosetta__text--bold">43</span></big>||<big><span class="rosetta__text--bold">44</span></big>||<big><span class="rosetta__text--bold">45</span></big>||<big><span class="rosetta__text--bold">46</span></big>||<big><span class="rosetta__text--bold">18</span></big>||<big><span class="rosetta__text--bold">17</span></big></p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">|<big><span class="rosetta__text--bold">49</span></big>||<big><span class="rosetta__text--bold">50</span></big>||<big><span class="rosetta__text--bold">14</span></big>||<big><span class="rosetta__text--bold">13</span></big>||<big><span class="rosetta__text--bold">12</span></big>||<big><span class="rosetta__text--bold">11</span></big>||<big><span class="rosetta__text--bold">55</span></big>||<big><span class="rosetta__text--bold">56</span></big></p>
/// <p class="rosetta__paragraph">|-</p>
/// <p class="rosetta__paragraph">|<big><span class="rosetta__text--bold">57</span></big>||<big><span class="rosetta__text--bold">58</span></big>||<big><span class="rosetta__text--bold">6</span></big>||<big><span class="rosetta__text--bold">5</span></big>||<big><span class="rosetta__text--bold">4</span></big>||<big><span class="rosetta__text--bold">3</span></big>||<big><span class="rosetta__text--bold">63</span></big>||<big><span class="rosetta__text--bold">64</span></big></p>
/// <p class="rosetta__paragraph">|}</p>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task</dt></dl>
/// <p class="rosetta__paragraph">Create a magic square of 8 x 8.</p>
/// <br><br><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title"> Related tasks</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Magic squares of odd order" title="Magic squares of odd order">Magic squares of odd order</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Magic squares of singly even order" title="Magic squares of singly even order">Magic squares of singly even order</a><br><br></li></ul>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"> See also:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--wiki" href="http://www.1728.org/magicsq2.htm" title="link: http://www.1728.org/magicsq2.htm">Doubly Even Magic Squares (1728.org)</a></li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(() => {
    'use strict';

    // doubleEvenMagicSquare :: Int -> [[Int]]
    const doubleEvenMagicSquare = n => {
        if (n % 4 > 0) return undefined;

        // truthSeries :: Int -> [Int]
        const truthSeries = n => {
            if (n <= 0) return [true];
            const xs = truthSeries(n - 1);
            return xs.concat(xs.map(x => !x));
        };

        const sqr = n * n,
            scale = curry(replicate)(n / 4),
            power = Math.log2(sqr),
            sequence = isInt(power) ? truthSeries(power) : (
                flatten(
                    scale(
                        splitEvery(4, truthSeries(4))
                        .map(scale)
                    )
                )
            );

        return splitEvery(n, sequence
            .map((x, i) => x ? i + 1 : sqr - i));
    };


    // GENERIC FUNCTIONS ----------------------------------------------------

    // flatten :: Tree a -> [a]
    const flatten = t => (t instanceof Array ? concatMap(flatten, t) : [t]);

    // concatMap :: (a -> [b]) -> [a] -> [b]
    const concatMap = (f, xs) => [].concat.apply([], xs.map(f));

    // splitEvery :: Int -> [a] -> [][a]]
    const splitEvery = (n, xs) => {
        if (xs.length <= n) return [xs];
        const [h, t] = [xs.slice(0, n), xs.slice(n)];
        return [h].concat(splitEvery(n, t));
    }

    // curry :: ((a, b) -> c) -> a -> b -> c
    const curry = f => a => b => f(a, b);

    // replicate :: Int -> a -> [a]
    const replicate = (n, a) => {
        let v = [a],
            o = [];
        if (n < 1) return o;
        while (n > 1) {
            if (n & 1) o = o.concat(v);
            n >>= 1;
            v = v.concat(v);
        }
        return o.concat(v);
    };

    // isInt :: Int -> Bool
    const isInt = x => x === Math.floor(x);


    // TEST AND DISPLAY FUNCTIONS -------------------------------------------

    // transpose :: [[a]] -> [[a]]
    const transpose = xs =>
        xs[0].map((_, iCol) => xs.map((row) => row[iCol]));

    // diagonals :: [[a]] -> ([a], [a])
    const diagonals = xs => {
        const nRows = xs.length,
            nCols = (nRows > 0 ? xs[0].length : 0);
        const cell = (x, y) => xs[y][x];

        if (nRows === nCols) {
            const ns = range(0, nCols - 1);
            return [zipWith(cell, ns, ns), zipWith(cell, ns, reverse(ns))];
        } else return [
            [],
            []
        ];
    };

    // zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
    const zipWith = (f, xs, ys) => {
        const ny = ys.length;
        return (xs.length <= ny ? xs : xs.slice(0, ny))
            .map((x, i) => f(x, ys[i]));
    }

    // reverse :: [a] -> [a]
    const reverse = (xs) => xs.slice(0)
        .reverse()

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // all :: (a -> Bool) -> [a] -> Bool
    const all = (f, xs) => xs.every(f);

    // show :: a -> String
    const show = x => JSON.stringify(x);

    // justifyRight :: Int -> Char -> Text -> Text
    const justifyRight = (n, cFiller, strText) =>
        n > strText.length ? (
            (cFiller.repeat(n) + strText)
            .slice(-n)
        ) : strText;

    // TEST -----------------------------------------------------------------

    //return doubleEvenMagicSquare(8)

    return [4, 8, 12]
        .map(n => {
            const lines = doubleEvenMagicSquare(n);
            const sums = lines.concat(
                    transpose(lines)
                    .concat(diagonals(lines))
                )
                .map(xs => xs.reduce((a, b) => a + b, 0));
            const sum = sums[0];
            return [
                "Order: " + n.toString(),
                "Summing to: " + sum.toString(),
                "Row, column and diagonal sums checked: " +
                all(x => x === sum, sums)
                .toString() + '\n',
                lines.map(
                    xs => xs.map(
                        x => justifyRight(3, ' ', x.toString())
                    )
                    .join('  '))
                .join('\n')
            ].join('\n')
        })
        .join('\n\n');
})();

/// rawSolutions:
=={{header|JavaScript}}==

===ES6===
{{Trans|Haskell}}
<lang JavaScript>(() => {
    'use strict';

    // doubleEvenMagicSquare :: Int -> [[Int]]
    const doubleEvenMagicSquare = n => {
        if (n % 4 > 0) return undefined;

        // truthSeries :: Int -> [Int]
        const truthSeries = n => {
            if (n <= 0) return [true];
            const xs = truthSeries(n - 1);
            return xs.concat(xs.map(x => !x));
        };

        const sqr = n * n,
            scale = curry(replicate)(n / 4),
            power = Math.log2(sqr),
            sequence = isInt(power) ? truthSeries(power) : (
                flatten(
                    scale(
                        splitEvery(4, truthSeries(4))
                        .map(scale)
                    )
                )
            );

        return splitEvery(n, sequence
            .map((x, i) => x ? i + 1 : sqr - i));
    };


    // GENERIC FUNCTIONS ----------------------------------------------------

    // flatten :: Tree a -> [a]
    const flatten = t => (t instanceof Array ? concatMap(flatten, t) : [t]);

    // concatMap :: (a -> [b]) -> [a] -> [b]
    const concatMap = (f, xs) => [].concat.apply([], xs.map(f));

    // splitEvery :: Int -> [a] -> [][a]]
    const splitEvery = (n, xs) => {
        if (xs.length <= n) return [xs];
        const [h, t] = [xs.slice(0, n), xs.slice(n)];
        return [h].concat(splitEvery(n, t));
    }

    // curry :: ((a, b) -> c) -> a -> b -> c
    const curry = f => a => b => f(a, b);

    // replicate :: Int -> a -> [a]
    const replicate = (n, a) => {
        let v = [a],
            o = [];
        if (n < 1) return o;
        while (n > 1) {
            if (n & 1) o = o.concat(v);
            n >>= 1;
            v = v.concat(v);
        }
        return o.concat(v);
    };

    // isInt :: Int -> Bool
    const isInt = x => x === Math.floor(x);


    // TEST AND DISPLAY FUNCTIONS -------------------------------------------

    // transpose :: [[a]] -> [[a]]
    const transpose = xs =>
        xs[0].map((_, iCol) => xs.map((row) => row[iCol]));

    // diagonals :: [[a]] -> ([a], [a])
    const diagonals = xs => {
        const nRows = xs.length,
            nCols = (nRows > 0 ? xs[0].length : 0);
        const cell = (x, y) => xs[y][x];

        if (nRows === nCols) {
            const ns = range(0, nCols - 1);
            return [zipWith(cell, ns, ns), zipWith(cell, ns, reverse(ns))];
        } else return [
            [],
            []
        ];
    };

    // zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
    const zipWith = (f, xs, ys) => {
        const ny = ys.length;
        return (xs.length <= ny ? xs : xs.slice(0, ny))
            .map((x, i) => f(x, ys[i]));
    }

    // reverse :: [a] -> [a]
    const reverse = (xs) => xs.slice(0)
        .reverse()

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // all :: (a -> Bool) -> [a] -> Bool
    const all = (f, xs) => xs.every(f);

    // show :: a -> String
    const show = x => JSON.stringify(x);

    // justifyRight :: Int -> Char -> Text -> Text
    const justifyRight = (n, cFiller, strText) =>
        n > strText.length ? (
            (cFiller.repeat(n) + strText)
            .slice(-n)
        ) : strText;

    // TEST -----------------------------------------------------------------

    //return doubleEvenMagicSquare(8)

    return [4, 8, 12]
        .map(n => {
            const lines = doubleEvenMagicSquare(n);
            const sums = lines.concat(
                    transpose(lines)
                    .concat(diagonals(lines))
                )
                .map(xs => xs.reduce((a, b) => a + b, 0));
            const sum = sums[0];
            return [
                "Order: " + n.toString(),
                "Summing to: " + sum.toString(),
                "Row, column and diagonal sums checked: " +
                all(x => x === sum, sums)
                .toString() + '\n',
                lines.map(
                    xs => xs.map(
                        x => justifyRight(3, ' ', x.toString())
                    )
                    .join('  '))
                .join('\n')
            ].join('\n')
        })
        .join('\n\n');
})();</lang>

{{Out}}
<pre>Order: 4
Summing to: 34
Row, column and diagonal sums checked: true

  1   15   14    4
 12    6    7    9
  8   10   11    5
 13    3    2   16

Order: 8
Summing to: 260
Row, column and diagonal sums checked: true

  1   63   62    4   60    6    7   57
 56   10   11   53   13   51   50   16
 48   18   19   45   21   43   42   24
 25   39   38   28   36   30   31   33
 32   34   35   29   37   27   26   40
 41   23   22   44   20   46   47   17
 49   15   14   52   12   54   55    9
  8   58   59    5   61    3    2   64

Order: 12
Summing to: 870
Row, column and diagonal sums checked: true

  1  143  142    4    5  139  138    8    9  135  134   12
132   14   15  129  128   18   19  125  124   22   23  121
120   26   27  117  116   30   31  113  112   34   35  109
 37  107  106   40   41  103  102   44   45   99   98   48
 49   95   94   52   53   91   90   56   57   87   86   60
 84   62   63   81   80   66   67   77   76   70   71   73
 72   74   75   69   68   78   79   65   64   82   83   61
 85   59   58   88   89   55   54   92   93   51   50   96
 97   47   46  100  101   43   42  104  105   39   38  108
 36  110  111   33   32  114  115   29   28  118  119   25
 24  122  123   21   20  126  127   17   16  130  131   13
133   11   10  136  137    7    6  140  141    3    2  144</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
