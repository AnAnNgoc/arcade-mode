Mutual recursion

{{task|recursion}}

Two functions are said to be mutually recursive if the first calls the second, 
and in turn the second calls the first.

Write two mutually recursive functions that compute members of the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Hofstadter sequence#Hofstadter Female and Male sequences" title="wp: Hofstadter sequence#Hofstadter Female and Male sequences">Hofstadter Female and Male sequences</a> defined as:
<big>
:$
\begin{align}
F(0)&=1\ ;\ M(0)=0 \\
F(n)&=n-M(F(n-1)), \quad n>0 \\
M(n)&=n-F(M(n-1)), \quad n>0.
\end{align}
$
</big>

<br>(If a language does not allow for a solution using mutually recursive functions 
then state this rather than give a solution by other means).
<br><br>


=={{header|JavaScript}}==
<lang JavaScript>function f(num) {
 return (num === 0) ? 1 : num - m(f(num - 1));
}

function m(num) {
 return (num === 0) ? 0 : num - f(m(num - 1));
}

function range(m, n) {
  return Array.apply(null, Array(n - m + 1)).map(
    function (x, i) { return m + i; }
  );
}

var a = range(0, 19);

//return a new array of the results and join with commas to print
console.log(a.map(function (n) { return f(n); }).join(', '));
console.log(a.map(function (n) { return m(n); }).join(', '));</lang>
{{out}}
<pre>1,1,2,2,3,3,4,5,5,6,6,7,8,8,9,9,10,11,11,12
0,0,1,2,2,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12</pre>

ES6 implementation
<lang JavaScript>var f = num => (num === 0) ? 1 : num - m(f(num - 1));
var m = num => (num === 0) ? 0 : num - f(m(num - 1));

function range(m, n) {
  return Array.apply(null, Array(n - m + 1)).map(
    function (x, i) { return m + i; }
  );
}

var a = range(0, 19);

//return a new array of the results and join with commas to print
console.log(a.map(n => f(n)).join(', '));
console.log(a.map(n => m(n)).join(', '));</lang>

More ES6 implementation

<lang JavaScript>var range = (m, n) => Array(... Array(n - m + 1)).map((x, i) => m + i)</lang>

