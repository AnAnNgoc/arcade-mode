
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Main step of GOST 28147-89
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/GOST (block cipher)" title="wp: GOST (block cipher)">GOST 28147-89</a> is a standard symmetric encryption based on a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Feistel cipher" title="wp: Feistel cipher">Feistel network</a>. Structure of the algorithm consists of three levels:
/// <br>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">encryption modes - simple replacement, application range, imposing a range of feedback and authentication code generation;</li>
/// <li class="rosetta__list-item--ordered">cycles - 32-З, 32-Р and 16-З, is a repetition of the main step;</li>
/// <li class="rosetta__list-item--ordered"><span class="rosetta__text--italic">main step</span>, a function that takes a 64-bit block of text and one of the eight 32-bit encryption key elements, and uses the replacement table (8x16 matrix of 4-bit values), and returns encrypted block.</li></ol>
/// Implement the main step of this encryption algorithm.
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var Таблица_замен = [
  [ 4, 10,  9,  2, 13,  8,  0, 14,  6, 11,  1, 12,  7, 15,  5,  3],
  [14, 11,  4, 12,  6, 13, 15, 10,  2,  3,  8,  1,  0,  7,  5,  9],
  [ 5,  8,  1, 13, 10,  3,  4,  2, 14, 15, 12,  7,  6,  0,  9, 11],
  [ 7, 13, 10,  1,  0,  8,  9, 15, 14,  4,  6, 12, 11,  2,  5,  3],
  [ 6, 12,  7,  1,  5, 15, 13,  8,  4, 10,  9, 14,  0,  3, 11,  2],
  [ 4, 11, 10,  0,  7,  2,  1, 13,  3,  6,  8,  5,  9, 12, 15, 14],
  [13, 11,  4,  1,  3, 15,  5,  9,  0, 10, 14,  7,  6,  8,  2, 12],
  [ 1, 15, 13,  0,  5,  7, 10,  4,  9,  2,  3, 14,  6, 11,  8, 12]];

function ОсновнойШаг(блок_текста, элемент_ключа) {
  var N = блок_текста.slice(0);
  var X = элемент_ключа;
  var S = (N[0] + X) & 0xFFFFFFFF;
  var ячейка; var нов_S = 0;
  for (var сч = 0; сч < 4; сч++) {
    ячейка = (S >>> (сч << 3)) & 0xFF;
    нов_S += (Таблица_замен[сч*2][ячейка & 0x0F] + (Таблица_замен[сч*2+1][ячейка >>> 4] << 4)) << (сч << 3);
  }
  S = (((нов_S << 11) + (нов_S >>> 21)) & 0xFFFFFFFF) ^ N[1];
  N[1] = N[0]; N[0] = S;
  return N;
}

/// rawSolutions:
=={{header|JavaScript}}==
<lang JavaScript>var Таблица_замен = [
  [ 4, 10,  9,  2, 13,  8,  0, 14,  6, 11,  1, 12,  7, 15,  5,  3],
  [14, 11,  4, 12,  6, 13, 15, 10,  2,  3,  8,  1,  0,  7,  5,  9],
  [ 5,  8,  1, 13, 10,  3,  4,  2, 14, 15, 12,  7,  6,  0,  9, 11],
  [ 7, 13, 10,  1,  0,  8,  9, 15, 14,  4,  6, 12, 11,  2,  5,  3],
  [ 6, 12,  7,  1,  5, 15, 13,  8,  4, 10,  9, 14,  0,  3, 11,  2],
  [ 4, 11, 10,  0,  7,  2,  1, 13,  3,  6,  8,  5,  9, 12, 15, 14],
  [13, 11,  4,  1,  3, 15,  5,  9,  0, 10, 14,  7,  6,  8,  2, 12],
  [ 1, 15, 13,  0,  5,  7, 10,  4,  9,  2,  3, 14,  6, 11,  8, 12]];

function ОсновнойШаг(блок_текста, элемент_ключа) {
  var N = блок_текста.slice(0);
  var X = элемент_ключа;
  var S = (N[0] + X) & 0xFFFFFFFF;
  var ячейка; var нов_S = 0;
  for (var сч = 0; сч < 4; сч++) {
    ячейка = (S >>> (сч << 3)) & 0xFF;
    нов_S += (Таблица_замен[сч*2][ячейка & 0x0F] + (Таблица_замен[сч*2+1][ячейка >>> 4] << 4)) << (сч << 3);
  }
  S = (((нов_S << 11) + (нов_S >>> 21)) & 0xFFFFFFFF) ^ N[1];
  N[1] = N[0]; N[0] = S;
  return N;
}</lang>

Note: the variable "блок_текста" is an array of two 32-bit values that make up the block.



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
