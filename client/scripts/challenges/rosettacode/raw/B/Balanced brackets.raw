
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Balanced brackets
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <span class="rosetta__text--bold">Task</span>: 
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">Generate a string with &nbsp; <span class="rosetta__text--bold">N</span> &nbsp; opening brackets &nbsp; <big><span class="rosetta__text--bold">[</span></big> &nbsp; and with &nbsp; <span class="rosetta__text--bold">N</span> &nbsp; closing brackets &nbsp; <big><span class="rosetta__text--bold">]</span></big>, &nbsp; in some arbitrary order. </li>
/// <li class="rosetta__list-item--unordered">Determine whether the generated string is <span class="rosetta__text--italic">balanced</span>; that is, whether it consists entirely of pairs of opening/closing brackets (in that order), none of which mis-nest.</li>
/// <br>
/// </ul>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Examples:</dt></dl>
///     (empty)   OK
///     []        OK   ][        NOT OK
///     [][]      OK   ][][      NOT OK
///     <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/][" title="]["></a>    OK   []][[]    NOT OK
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function shuffle(str) {
  var a = str.split(''), b, c = a.length, d
  while (c) b = Math.random() * c-- | 0, d = a[c], a[c] = a[b], a[b] = d
  return a.join('')
}

function isBalanced(str) {
  var a = str, b
  do { b = a, a = a.replace(/\[\]/g, '') } while (a != b)
  return !a
}

var M = 20
while (M-- > 0) {
  var N = Math.random() * 10 | 0, bs = shuffle('['.repeat(N) + ']'.repeat(N))
  console.log('"' + bs + '" is ' + (isBalanced(bs) ? '' : 'un') + 'balanced')
}

/// rawSolutions:
=={{header|JavaScript}}==

===ES5===
====Iterative====

<lang JavaScript>function shuffle(str) {
  var a = str.split(''), b, c = a.length, d
  while (c) b = Math.random() * c-- | 0, d = a[c], a[c] = a[b], a[b] = d
  return a.join('')
}

function isBalanced(str) {
  var a = str, b
  do { b = a, a = a.replace(/\[\]/g, '') } while (a != b)
  return !a
}

var M = 20
while (M-- > 0) {
  var N = Math.random() * 10 | 0, bs = shuffle('['.repeat(N) + ']'.repeat(N))
  console.log('"' + bs + '" is ' + (isBalanced(bs) ? '' : 'un') + 'balanced')
}</lang>

Sample output:

<pre>"[]" is balanced
"]][[]][[[]" is unbalanced
"]][[[][][][]][" is unbalanced
"[][[[[][][[[]]]]]]" is balanced
"][" is unbalanced
"[[[]]]][[]" is unbalanced
"][[]" is unbalanced
"][[][]][[[]]" is unbalanced
"[[][]]][" is unbalanced
"[[[]]][[]]]][][[" is unbalanced
"[]][[]]][[[[][]]" is unbalanced
"[]" is balanced
"][]][[][" is unbalanced
"[[]][[][]]" is balanced
"[[]]" is balanced
"]][]][[]][[[" is unbalanced
"][]][][[" is unbalanced
"[[]]" is balanced
"][][" is unbalanced
"[[]]][][][[]][" is unbalanced</pre>

===ES6===
====Functional====
With visual indication of where the balance fails:
<lang JavaScript>(() => {
    'use strict';

    // Int -> String
    let randomBrackets = n => range(1, n)
        .map(() => Math.random() < 0.5 ? '[' : ']')
        .join('');

    // imbalance :: String -> Integer
    let imbalance = strBrackets => {

        // iDepth: initial nesting depth (0 = closed)
        // iIndex: starting character position

        // errorIndex :: [Char] -> Int -> Int -> Int
        let errorIndex = (xs, iDepth, iIndex) => {
            if (xs.length > 0) {
                let tail = xs.slice(1),
                    iNext = iDepth + (xs[0] === '[' ? 1 : -1);

                if (iNext < 0) return iIndex; // unmatched closing bracket
                else return tail.length ? errorIndex(
                        tail, iNext, iIndex + 1
                    ) : iNext === 0 ? -1 : iIndex; // balanced ? problem index ?

            } else return iDepth === 0 ? -1 : iIndex;
        };

        return errorIndex(strBrackets.split(''), 0, 0);
    };


    // GENERIC FUNCTION

    // range :: Int -> Int -> [Int]
    let range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // TESTING AND FORMATTING OUTPUT

    let lngPairs = 6,
        strPad = Array(lngPairs * 2 + 4)
        .join(' ');

    return range(0, lngPairs)
        .map(n => {
            let w = n * 2,
                s = randomBrackets(w),
                i = imbalance(s),
                blnOK = i === -1;

            return "'" + s + "'" + strPad.slice(w + 2) +
                (blnOK ? 'OK' : 'problem') +
                (blnOK ? '' : '\n' + Array(i + 2)
                    .join(' ') + '^');
        })
        .join('\n');
})();
</lang>

{{Out}}
<pre>''             OK
'[]'           OK
']]]['         problem
 ^
'[]]][['       problem
   ^
'[[]]]]]['     problem
     ^
'[][[][]][]'   OK
']][[[][[[]]]' problem
 ^</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
