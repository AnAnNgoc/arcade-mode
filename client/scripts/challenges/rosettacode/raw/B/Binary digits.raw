
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Binary digits
/// type: rosetta-code

/// categories:
/// Radices

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Create and display the sequence of binary digits for a given &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Natural number" title="wp: Natural number">non-negative integer</a>.
/// <br>
///     The decimal value &nbsp;    <span class="rosetta__text--bold">5</span> &nbsp; should produce an output of &nbsp;             <span class="rosetta__text--bold">101</span>
///     The decimal value &nbsp;   <span class="rosetta__text--bold">50</span> &nbsp; should produce an output of &nbsp;          <span class="rosetta__text--bold">110010</span>
///     The decimal value &nbsp; <span class="rosetta__text--bold">9000</span> &nbsp; should produce an output of &nbsp;  <span class="rosetta__text--bold">10001100101000</span>
/// <br>
/// The results can be achieved using built-in radix functions within the language &nbsp; (if these are available), &nbsp; or alternatively a user defined function can be used. 
/// <br>
/// The output produced should consist just of the binary digits of each number followed by a &nbsp; <span class="rosetta__text--italic">newline</span>. 
/// <br>
/// There should be no other whitespace, radix or sign markers in the produced output, and <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Leading zero" title="wp: Leading zero">leading zeros</a> should not appear in the results.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function toBinary(number) {
    return new Number(number)
        .toString(2);
}
var demoValues = [5, 50, 9000];
for (var i = 0; i < demoValues.length; ++i) {
    // alert() in a browser, wscript.echo in WSH, etc.
    print(toBinary(demoValues[i])); 
}

/// rawSolutions:
=={{header|JavaScript}}==
===ES5===
<lang javascript>function toBinary(number) {
    return new Number(number)
        .toString(2);
}
var demoValues = [5, 50, 9000];
for (var i = 0; i < demoValues.length; ++i) {
    // alert() in a browser, wscript.echo in WSH, etc.
    print(toBinary(demoValues[i])); 
}</lang>

===ES6===
The simplest showBin (or showIntAtBase), using default digit characters, would use JavaScript's standard String.toString(base):

<lang JavaScript>(() => {

    // showIntAtBase_ :: // Int -> Int -> String
    const showIntAtBase_ = (base, n) => (n)
        .toString(base);

    // showBin :: Int -> String
    const showBin = n => showIntAtBase_(2, n);

    // GENERIC FUNCTIONS FOR TEST ---------------------------------------------

    // intercalate :: String -> [a] -> String
    const intercalate = (s, xs) => xs.join(s);

    // map :: (a -> b) -> [a] -> [b]
    const map = (f, xs) => xs.map(f);

    // unlines :: [String] -> String
    const unlines = xs => xs.join('\n');

    // show :: a -> String
    const show = x => JSON.stringify(x);

    // TEST -------------------------------------------------------------------

    return unlines(map(
        n => intercalate(' -> ', [show(n), showBin(n)]),
        [5, 50, 9000]
    ));
})();</lang>
{{Out}}
<pre>5 -> 101
50 -> 110010
9000 -> 10001100101000</pre>

Or, if we need more flexibility with the set of digits used, we can write a version of showIntAtBase which takes a more specific Int -> Char function as as an argument. This one is a rough translation of Haskell's Numeric.showIntAtBase:

<lang JavaScript>(() => {

    // showBin :: Int -> String
    const showBin = n => {
        const binaryChar = n => n !== 0 ? '一' : '〇';

        return showIntAtBase(2, binaryChar, n, '');
    };

    // showIntAtBase :: Int -> (Int -> Char) -> Int -> String -> String
    const showIntAtBase = (base, toChr, n, rs) => {
        const showIt = ([n, d], r) => {
            const r_ = toChr(d) + r;
            return n !== 0 ? (
                showIt(quotRem(n, base), r_)
            ) : r_;
        };
        return base <= 1 ? (
            'error: showIntAtBase applied to unsupported base'
        ) : n < 0 ? (
            'error: showIntAtBase applied to negative number'
        ) : showIt(quotRem(n, base), rs);
    };

    // quotRem :: Integral a => a -> a -> (a, a)
    const quotRem = (m, n) => [Math.floor(m / n), m % n];

    // GENERIC FUNCTIONS FOR TEST ---------------------------------------------

    // intercalate :: String -> [a] -> String
    const intercalate = (s, xs) => xs.join(s);

    // map :: (a -> b) -> [a] -> [b]
    const map = (f, xs) => xs.map(f);

    // unlines :: [String] -> String
    const unlines = xs => xs.join('\n');

    // show :: a -> String
    const show = x => JSON.stringify(x);

    // TEST -------------------------------------------------------------------

    return unlines(map(
        n => intercalate(' -> ', [show(n), showBin(n)]), [5, 50, 9000]
    ));
})();</lang>
{{Out}}
<pre>5 -> 一〇一
50 -> 一一〇〇一〇
9000 -> 一〇〇〇一一〇〇一〇一〇〇〇</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
