Bitmap

{{task|Raster graphics operations}}
{{omit from|AWK}}
{{omit from|PARI/GP}}

Show a basic storage type to handle a simple RGB raster graphics image, 
and some primitive associated functions.

If possible provide a function to allocate an uninitialised image, 
given its width and height, and provide 3 additional functions:
* one to fill an image with a plain RGB color,
* one to set a given pixel with a color,
* one to get the color of a pixel.

(If there are specificities about the storage or the allocation, explain those.)

''These functions are used as a base for the articles in the category <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Raster_graphics_operations" title="Raster_graphics_operations">raster graphics operations</a>, 
and a basic output function to check the results 
is available in the article [[write ppm file]].''


=={{header|JavaScript}}==

JavaScript can interact with a drawing context using the HTML5 Canvas API.

<lang javascript>
// Set up the canvas
var canvas = document.createElement("canvas"),
    ctx = canvas.getContext("2d"),
    width = 400, height = 400;

ctx.canvas.width = width;
ctx.canvas.height = height;

// Optionaly add it to the current page
document.body.appendChild(canvas);

// Draw an image
var img = document.createElement("img");
img.onload = function(){
    // Draw the element into the top-left of the canvas
    ctx.drawImage(img, 0, 0);
};
img.src = "//placehold.it/400x400";

// Fill the canvas with a solid blue color
ctx.fillStyle = "blue";
ctx.fillRect(0, 0, width, height);

// Place a black pixel in the middle
// Note that a pixel is a 1 by 1 rectangle
// This is the fastest method as of 2012 benchmarks
ctx.fillStyle = "black";
ctx.fillRect(width / 2, height / 2, 1, 1);
</lang>

