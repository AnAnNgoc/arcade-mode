
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Balanced ternary
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Balanced ternary" title="wp: Balanced ternary">Balanced ternary</a> is a way of representing numbers.  Unlike the prevailing binary representation, a balanced ternary integer is in base 3, and each digit can have the values 1, 0, or −1.  For example, decimal 11 = 3<sup>2</sup> + 3<sup>1</sup> − 3<sup>0</sup>, thus can be written as "++−", while 6 = 3<sup>2</sup> − 3<sup>1</sup> + 0 × 3<sup>0</sup>, i.e., "+−0".</p><br/><p class="rosetta__paragraph">For this task, implement balanced ternary representation of integers with the following</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Requirements</span></p>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">Support arbitrarily large integers, both positive and negative;</li>
/// <li class="rosetta__list-item--ordered">Provide ways to convert to and from text strings, using digits '+', '-' and '0' (unless you are already using strings to represent balanced ternary; but see requirement 5).</li>
/// <li class="rosetta__list-item--ordered">Provide ways to convert to and from native integer type (unless, improbably, your platform's native integer type <span class="rosetta__text--italic">is</span> balanced ternary).  If your native integers can't support arbitrary length, overflows during conversion must be indicated.</li>
/// <li class="rosetta__list-item--ordered">Provide ways to perform addition, negation and multiplication directly on balanced ternary integers; do <span class="rosetta__text--italic">not</span> convert to native integers first.</li>
/// <li class="rosetta__list-item--ordered">Make your implementation efficient, with a reasonable definition of "efficient" (and with a reasonable definition of "reasonable").</li></ol>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">Test case</span> With balanced ternaries <span class="rosetta__text--italic">a</span> from string "+-0++0+", <span class="rosetta__text--italic">b</span> from native integer -436, <span class="rosetta__text--italic">c</span> "+-++-":</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">write out <span class="rosetta__text--italic">a</span>, <span class="rosetta__text--italic">b</span> and <span class="rosetta__text--italic">c</span> in decimal notation;</li>
/// <li class="rosetta__list-item--unordered">calculate <span class="rosetta__text--italic">a</span> × (<span class="rosetta__text--italic">b</span> − <span class="rosetta__text--italic">c</span>), write out the result in both ternary and decimal notations.</li></ul>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">Note:</span> The pages <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/generalised floating point addition" title="generalised floating point addition">generalised floating point addition</a> and <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/generalised floating point multiplication" title="generalised floating point multiplication">generalised floating point multiplication</a> have code implementing <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/arbitrary precision" title="wp: arbitrary precision">arbitrary precision</a> <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/floating point" title="wp: floating point">floating point</a> balanced ternary.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
