
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Knuth shuffle
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// The &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Knuth shuffle" title="wp: Knuth shuffle">Knuth shuffle</a> &nbsp; (a.k.a. the Fisher-Yates shuffle) &nbsp; is an algorithm for randomly shuffling the elements of an array.
/// <br>
/// <br>
/// <br>
/// Implement the Knuth shuffle for an integer array (or, if possible, an array of any type).
/// <br>
/// <br>
/// <br>
/// Given an array <span class="rosetta__text--bold"><span class="rosetta__text--italic">items</span></span> with indices ranging from <span class="rosetta__text--italic">0</span> to <span class="rosetta__text--bold"><span class="rosetta__text--italic">last</span></span>, the algorithm can be defined as follows (pseudo-code):
/// <br>
///  <span class="rosetta__text--bold">for</span> <span class="rosetta__text--italic">i</span> <span class="rosetta__text--bold">from</span> <span class="rosetta__text--italic">last</span> <span class="rosetta__text--bold">downto</span> 1 <span class="rosetta__text--bold">do</span>:
///      <span class="rosetta__text--bold">let</span> <span class="rosetta__text--italic">j</span> = random integer in range <span class="rosetta__text--italic">0</span> $\leq$ <span class="rosetta__text--italic">j</span> $\leq$ <span class="rosetta__text--italic">i</span>
///      <span class="rosetta__text--bold">swap</span> <span class="rosetta__text--italic">items</span>[<span class="rosetta__text--italic">i</span>] <span class="rosetta__text--bold">with</span> <span class="rosetta__text--italic">items</span>[<span class="rosetta__text--italic">j</span>]
/// <br>
/// Notes:
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">It modifies the input array in-place. If that is unreasonable in your programming language, you may amend the algorithm to return the shuffled items as a new array instead.</li>
/// <li class="rosetta__list-item--unordered">The algorithm can also be amended to iterate from left to right, if that is more convenient.</li>
/// <br>
/// </ul>
/// <br>
/// <br>
/// {| class="wikitable"
/// |-
/// ! Input array
/// ! Possible output arrays
/// |-
/// | <tt>[]</tt>
/// | <tt>[]</tt>
/// |-
/// | <tt>[10]</tt>
/// | <tt>[10]</tt>
/// |-
/// | <tt>[10, 20]</tt>
/// | <tt>[10, 20]</tt><br><tt>[20, 10]</tt>
/// |-
/// | <tt>[10, 20, 30]</tt>
/// | <tt>[10, 20, 30]</tt><br><tt>[10, 30, 20]</tt><br><tt>[20, 10, 30]</tt><br><tt>[20, 30, 10]</tt><br><tt>[30, 10, 20]</tt><br><tt>[30, 20, 10]</tt>
/// |}
/// <br>
/// (These are listed here just for your convenience; no need to demonstrate them on the page.)
/// <br>
/// <br>
/// <br>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Sattolo cycle" title="Sattolo cycle"></a></li>
/// <br>
/// </ul>
/// <hr>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function knuthShuffle(arr) {
    var rand, temp, i;

    for (i = arr.length - 1; i > 0; i -= 1) {
        rand = Math.floor((i + 1) * Math.random());//get random between zero and i (inclusive)
        temp = arr[rand];//swap i and the zero-indexed number
        arr[rand] = arr[i];
        arr[i] = temp;
    }
    return arr;
}

var res = {
    '1,2,3': 0, '1,3,2': 0,
    '2,1,3': 0, '2,3,1': 0,
    '3,1,2': 0, '3,2,1': 0
};

for (var i = 0; i < 100000; i++) {
    res[knuthShuffle([1,2,3]).join(',')] += 1;
}

for (var key in res) {
    print(key + "\t" + res[key]);
}

/// rawSolutions:
=={{header|JavaScript}}==

===ES5===

<lang javascript>function knuthShuffle(arr) {
    var rand, temp, i;

    for (i = arr.length - 1; i > 0; i -= 1) {
        rand = Math.floor((i + 1) * Math.random());//get random between zero and i (inclusive)
        temp = arr[rand];//swap i and the zero-indexed number
        arr[rand] = arr[i];
        arr[i] = temp;
    }
    return arr;
}

var res = {
    '1,2,3': 0, '1,3,2': 0,
    '2,1,3': 0, '2,3,1': 0,
    '3,1,2': 0, '3,2,1': 0
};

for (var i = 0; i < 100000; i++) {
    res[knuthShuffle([1,2,3]).join(',')] += 1;
}

for (var key in res) {
    print(key + "\t" + res[key]);
}</lang>
Results in:
<pre>1,2,3   16619
1,3,2   16614
2,1,3   16752
2,3,1   16959
3,1,2   16460
3,2,1   16596</pre>


===ES6===

====Mutating in-place swap====
<lang JavaScript>(lst => {
 
    // knuthShuffle :: [a] -> [a]
    let knuthShuffle = lst =>
        range(0, lst.length - 1)
        .reduceRight((a, i) => {
            let iRand = i ? randomInteger(0, i) : 0,
                tmp = a[iRand];

            return iRand !== i ?  (
                a[iRand] = a[i],
                a[i] = tmp,
                a
            ) : a;
        }, lst),
 
        // randomInteger :: Int -> Int -> Int
        randomInteger = (low, high) =>
        low + Math.floor(
            (Math.random() * ((high - low) + 1))
        ),
 
        // range :: Int -> Int -> Maybe Int -> [Int]
        range = (m, n, step) => {
            let d = (step || 1) * (n >= m ? 1 : -1);
 
            return Array.from({
                length: Math.floor((n - m) / d) + 1
            }, (_, i) => m + (i * d));
        };
 
 
    return knuthShuffle(lst);
 
})(
    'alpha beta gamma delta epsilon zeta eta theta iota kappa lambda mu'
    .split(' ')
  );</lang>

{{Out}}
e.g.
<lang JavaScript>["iota", "epsilon", "kappa", "theta", "gamma", "delta", 
"lambda", "eta", "zeta", "beta", "mu", "alpha"]</lang>

====Non-mutating swap====

<lang JavaScript>(lst => {

    // knuthShuffle :: [a] -> [a]
    function knuthShuffle(lst) {
        let lng = lst.length;

        return lng ? range(0, lng - 1)
            .reduceRight((a, i) => {
                let iRand = i > 0 ? randomInteger(0, i) : 0;

                return i !== iRand ? swapped(a, i, iRand) : a;
            }, lst) : [];
    };


    // A non-mutating variant of swapped():

    // swapped :: [a] -> Int -> Int -> [a]        
    let swapped = (lst, iFrom, iTo) => {
            let [iLow, iHigh] = iTo > iFrom ? (
                    [iFrom, iTo]
            ) : [iTo, iFrom];

            return iLow !== iHigh ? (
                    [].concat(
                        (iLow > 0 ? lst.slice(0, iLow) : []), // pre
                        lst[iHigh],                           // DOWN
                        lst.slice(iLow + 1, iHigh),           // mid
                        lst[iLow],                            // UP
                        lst.slice(iHigh + 1)                  // post
                    )                         
                ) : lst.slice(0) // (unchanged copy)
        },

        // randomInteger :: Int -> Int -> Int
        randomInteger = (low, high) =>
        low + Math.floor(
            (Math.random() * ((high - low) + 1))
        ),

        // range :: Int -> Int -> Maybe Int -> [Int]
        range = (m, n, step) => {
            let d = (step || 1) * (n >= m ? 1 : -1);

            return Array.from({
                length: Math.floor((n - m) / d) + 1
            }, (_, i) => m + (i * d));
        };


    return knuthShuffle(lst);

})(
    'alpha beta gamma delta epsilon zeta eta theta iota kappa lambda mu'
    .split(' ')
);</lang>

{{Out}}
e.g.
<lang JavaScript>["mu", "theta", "beta", "eta", "delta", "epsilon", 
"kappa", "alpha", "gamma", "lambda", "zeta", "iota"]</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
