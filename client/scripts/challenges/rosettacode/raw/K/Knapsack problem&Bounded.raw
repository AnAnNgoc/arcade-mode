
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Knapsack problem/Bounded
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// A tourist wants to make a good trip at the weekend with his friends. 
/// <br>
/// They will go to the mountains to see the wonders of nature. &nbsp; So he needs some items during the trip. &nbsp; Food, clothing, etc. &nbsp; He has a good knapsack for carrying the things, but he knows that he can carry only 4 kg weight in his knapsack, because they will make the trip from morning to evening. 
/// <br>
/// He creates a list of what he wants to bring for the trip, but the total weight of all items is too much. &nbsp; He adds a value to each item. &nbsp; The value represents how important the thing for the tourist. 
/// <br>
/// The list contains which items are the wanted things for the trip, what is the weight and value of an item, and how many units does he have from each items.
/// <br>
/// <br>
/// This is the list:
/// {| style="text-align: left; width: 80%;" border="4" cellpadding="2" cellspacing="2"
/// |+ Table of potential knapsack items
/// |- style="background-color: rgb(255, 204, 255);"
/// ! item !! weight (dag) (each) !! value (each) !! piece(s)
/// |-
/// | map || 9 || 150 || 1
/// |-
/// | compass || 13 || 35 || 1
/// |-
/// | water || 153 || 200 || 2
/// |-
/// | sandwich || 50 || 60 || 2
/// |-
/// | glucose || 15 || 60 || 2
/// |-
/// | tin || 68 || 45 || 3
/// |-
/// | banana || 27 || 60 || 3
/// |-
/// | apple || 39 || 40 || 3
/// |-
/// | cheese || 23 || 30 || 1
/// |-
/// | beer || 52 || 10 || 3
/// |-
/// | suntan cream || 11 || 70 || 1
/// |-
/// | camera || 32 || 30 || 1
/// |-
/// | T-shirt || 24 || 15 || 2
/// |-
/// | trousers || 48 || 10 || 2
/// |-
/// | umbrella || 73 || 40 || 1
/// |-
/// | waterproof trousers || 42 || 70 || 1
/// |-
/// | waterproof overclothes || 43 || 75 || 1
/// |-
/// | note-case || 22 || 80 || 1
/// |-
/// | sunglasses || 7 || 20 || 1
/// |-
/// | towel || 18 || 12 || 2
/// |-
/// | socks || 4 || 50 || 1
/// |-
/// | book || 30 || 10 || 2
/// |- style="background-color: rgb(255, 204, 255);"
/// | knapsack || &le;400 dag || ? || ?
/// |}
/// <br>
/// <br>
/// The tourist can choose to take any combination of items from the list, and some number of each item is available &nbsp; (see the column &nbsp; <span class="rosetta__text--bold">piece(s)</span> &nbsp; in the list above). 
/// <br>
/// He may not cut the items, so he can only take whole units of any item. 
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Show which items does the tourist carry in his knapsack so that their total weight does not exceed 4 kg, and their total value is maximized.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Knapsack problem/Unbounded" title="Knapsack problem/Unbounded"></a></li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Knapsack problem/Continuous" title="Knapsack problem/Continuous"></a></li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Knapsack problem/0-1" title="Knapsack problem/0-1"></a></li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
<html><head><title></title></head><body></body></html>

<script type="text/javascript">
var data= [
  {name: 'map',                    weight:  9, value:150, pieces:1},
  {name: 'compass',                weight: 13, value: 35, pieces:1},
  {name: 'water',                  weight:153, value:200, pieces:2},
  {name: 'sandwich',               weight: 50, value: 60, pieces:2},
  {name: 'glucose',                weight: 15, value: 60, pieces:2},
  {name: 'tin',                    weight: 68, value: 45, pieces:3},
  {name: 'banana',                 weight: 27, value: 60, pieces:3},
  {name: 'apple',                  weight: 39, value: 40, pieces:3},
  {name: 'cheese',                 weight: 23, value: 30, pieces:1},
  {name: 'beer',                   weight: 52, value: 10, pieces:3},
  {name: 'suntan, cream',          weight: 11, value: 70, pieces:1},
  {name: 'camera',                 weight: 32, value: 30, pieces:1},
  {name: 'T-shirt',                weight: 24, value: 15, pieces:2},
  {name: 'trousers',               weight: 48, value: 10, pieces:2},
  {name: 'umbrella',               weight: 73, value: 40, pieces:1},
  {name: 'waterproof, trousers',   weight: 42, value: 70, pieces:1},
  {name: 'waterproof, overclothes',weight: 43, value: 75, pieces:1},
  {name: 'note-case',              weight: 22, value: 80, pieces:1},
  {name: 'sunglasses',             weight:  7, value: 20, pieces:1},
  {name: 'towel',                  weight: 18, value: 12, pieces:2},
  {name: 'socks',                  weight:  4, value: 50, pieces:1},
  {name: 'book',                   weight: 30, value: 10, pieces:2}
];

function findBestPack() {
	var m= [[0]]; // maximum pack value found so far
	var b= [[0]]; // best combination found so far
	var opts= [0]; // item index for 0 of item 0 
	var P= [1]; // item encoding for 0 of item 0
	var choose= 0;
	for (var j= 0; j<data.length; j++) {
		opts[j+1]= opts[j]+data[j].pieces; // item index for 0 of item j+1
		P[j+1]= P[j]*(1+data[j].pieces); // item encoding for 0 of item j+1
	}
	for (var j= 0; j<opts[data.length]; j++) {
		m[0][j+1]= b[0][j+1]= 0; // best values and combos for empty pack: nothing
	}
	for (var w=1; w<=400; w++) {
		m[w]= [0];
		b[w]= [0];
		for (var j=0; j<data.length; j++) {
			var N= data[j].pieces; // how many of these can we have?
			var base= opts[j]; // what is the item index for 0 of these?
			for (var n= 1; n<=N; n++) {
				var W= n*data[j].weight; // how much do these items weigh?
				var s= w>=W ?1 :0; // can we carry this many?
				var v= s*n*data[j].value; // how much are they worth?
				var I= base+n; // what is the item number for this many?
				var wN= w-s*W; // how much other stuff can we be carrying?
				var C= n*P[j] + b[wN][base]; // encoded combination
				m[w][I]= Math.max(m[w][I-1], v+m[wN][base]); // best value
				choose= b[w][I]= m[w][I]>m[w][I-1] ?C :b[w][I-1];
			}
		}
	}
	var best= [];
	for (var j= data.length-1; j>=0; j--) {
		best[j]= Math.floor(choose/P[j]);
		choose-= best[j]*P[j];
	}
	var out='<table><tr><td><b>Count</b></td><td><b>Item</b></td><th>unit weight</th><th>unit value</th>';
	var wgt= 0;
	var val= 0;
	for (var i= 0; i<best.length; i++) {
		if (0==best[i]) continue;
		out+='</tr><tr><td>'+best[i]+'</td><td>'+data[i].name+'</td><td>'+data[i].weight+'</td><td>'+data[i].value+'</td>'
		wgt+= best[i]*data[i].weight;
		val+= best[i]*data[i].value;
	}
	out+= '</tr></table><br/>Total weight: '+wgt;
	out+= '<br/>Total value: '+val;
	document.body.innerHTML= out;
}
findBestPack();
</script>

/// rawSolutions:
=={{header|JavaScript}}==
Based on the (dynamic) J implementation.  Expressed as an htm page:
<lang javascript><html><head><title></title></head><body></body></html>

<script type="text/javascript">
var data= [
  {name: 'map',                    weight:  9, value:150, pieces:1},
  {name: 'compass',                weight: 13, value: 35, pieces:1},
  {name: 'water',                  weight:153, value:200, pieces:2},
  {name: 'sandwich',               weight: 50, value: 60, pieces:2},
  {name: 'glucose',                weight: 15, value: 60, pieces:2},
  {name: 'tin',                    weight: 68, value: 45, pieces:3},
  {name: 'banana',                 weight: 27, value: 60, pieces:3},
  {name: 'apple',                  weight: 39, value: 40, pieces:3},
  {name: 'cheese',                 weight: 23, value: 30, pieces:1},
  {name: 'beer',                   weight: 52, value: 10, pieces:3},
  {name: 'suntan, cream',          weight: 11, value: 70, pieces:1},
  {name: 'camera',                 weight: 32, value: 30, pieces:1},
  {name: 'T-shirt',                weight: 24, value: 15, pieces:2},
  {name: 'trousers',               weight: 48, value: 10, pieces:2},
  {name: 'umbrella',               weight: 73, value: 40, pieces:1},
  {name: 'waterproof, trousers',   weight: 42, value: 70, pieces:1},
  {name: 'waterproof, overclothes',weight: 43, value: 75, pieces:1},
  {name: 'note-case',              weight: 22, value: 80, pieces:1},
  {name: 'sunglasses',             weight:  7, value: 20, pieces:1},
  {name: 'towel',                  weight: 18, value: 12, pieces:2},
  {name: 'socks',                  weight:  4, value: 50, pieces:1},
  {name: 'book',                   weight: 30, value: 10, pieces:2}
];

function findBestPack() {
	var m= [[0]]; // maximum pack value found so far
	var b= [[0]]; // best combination found so far
	var opts= [0]; // item index for 0 of item 0 
	var P= [1]; // item encoding for 0 of item 0
	var choose= 0;
	for (var j= 0; j<data.length; j++) {
		opts[j+1]= opts[j]+data[j].pieces; // item index for 0 of item j+1
		P[j+1]= P[j]*(1+data[j].pieces); // item encoding for 0 of item j+1
	}
	for (var j= 0; j<opts[data.length]; j++) {
		m[0][j+1]= b[0][j+1]= 0; // best values and combos for empty pack: nothing
	}
	for (var w=1; w<=400; w++) {
		m[w]= [0];
		b[w]= [0];
		for (var j=0; j<data.length; j++) {
			var N= data[j].pieces; // how many of these can we have?
			var base= opts[j]; // what is the item index for 0 of these?
			for (var n= 1; n<=N; n++) {
				var W= n*data[j].weight; // how much do these items weigh?
				var s= w>=W ?1 :0; // can we carry this many?
				var v= s*n*data[j].value; // how much are they worth?
				var I= base+n; // what is the item number for this many?
				var wN= w-s*W; // how much other stuff can we be carrying?
				var C= n*P[j] + b[wN][base]; // encoded combination
				m[w][I]= Math.max(m[w][I-1], v+m[wN][base]); // best value
				choose= b[w][I]= m[w][I]>m[w][I-1] ?C :b[w][I-1];
			}
		}
	}
	var best= [];
	for (var j= data.length-1; j>=0; j--) {
		best[j]= Math.floor(choose/P[j]);
		choose-= best[j]*P[j];
	}
	var out='<table><tr><td><b>Count</b></td><td><b>Item</b></td><th>unit weight</th><th>unit value</th>';
	var wgt= 0;
	var val= 0;
	for (var i= 0; i<best.length; i++) {
		if (0==best[i]) continue;
		out+='</tr><tr><td>'+best[i]+'</td><td>'+data[i].name+'</td><td>'+data[i].weight+'</td><td>'+data[i].value+'</td>'
		wgt+= best[i]*data[i].weight;
		val+= best[i]*data[i].value;
	}
	out+= '</tr></table><br/>Total weight: '+wgt;
	out+= '<br/>Total value: '+val;
	document.body.innerHTML= out;
}
findBestPack();
</script></lang>
This will generate (translating html to mediawiki markup):
{|
|'''Count'''
|'''Item'''
!unit weight
!unit value
|-
|1
|map
|9
|150
|-
|1
|compass
|13
|35
|-
|1
|water
|153
|200
|-
|2
|glucose
|15
|60
|-
|3
|banana
|27
|60
|-
|1
|cheese
|23
|30
|-
|1
|suntan, cream
|11
|70
|-
|1
|waterproof, overclothes
|43
|75
|-
|1
|note-case
|22
|80
|-
|1
|sunglasses
|7
|20
|-
|1
|socks
|4
|50
|}
Total weight: 396<br>
Total value: 1010



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
