
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Knight's tour
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task</dt></dl>
/// <p class="rosetta__paragraph"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Knight%27s_tour" title="wp: Knight%27s_tour">Problem</a>: you have a standard 8x8 chessboard, empty but for a single knight on some square.   Your task is to emit a series of legal knight moves that result in the knight visiting every square on the chessboard exactly once. Note that it is <span class="rosetta__text--italic">not</span> a requirement that the tour be "closed"; that is, the knight need not end within a single move of its start position.</p><br/><p class="rosetta__paragraph">Input and output may be textual or graphical, according to the conventions of the programming environment.  If textual, squares should be indicated in <a class="rosetta__link--wiki" href="http://en.wikipedia.org/wiki/Algebraic_chess_notation" title="link: http://en.wikipedia.org/wiki/Algebraic_chess_notation">algebraic notation</a>.  The output should indicate the order in which the knight visits the squares, starting with the initial position.  The form of the output may be a diagram of the board with the squares numbered according to visitation sequence, or a textual list of algebraic coordinates in order, or even an actual animation of the knight moving around the chessboard.</p><br/><p class="rosetta__paragraph">Input: starting square</p><br/><p class="rosetta__paragraph">Output: move sequence</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/A* search algorithm" title="A* search algorithm">A* search algorithm</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/N-queens problem" title="N-queens problem">N-queens problem</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Solve a Hidato puzzle" title="Solve a Hidato puzzle">Solve a Hidato puzzle</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Solve a Holy Knight's tour" title="Solve a Holy Knight's tour">Solve a Holy Knight's tour</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Solve a Hopido puzzle" title="Solve a Hopido puzzle">Solve a Hopido puzzle</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Solve a Numbrix puzzle" title="Solve a Numbrix puzzle">Solve a Numbrix puzzle</a></li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Solve the no connection puzzle" title="Solve the no connection puzzle">Solve the no connection puzzle</a></li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
