
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Knight's tour
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/File:Knight's_tour_7x7.png" title="File:Knight's_tour_7x7.png">400px||right</a>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task</dt></dl>
/// <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Knight%27s_tour" title="wp: Knight%27s_tour">Problem</a>: you have a standard 8x8 chessboard, empty but for a single knight on some square.   Your task is to emit a series of legal knight moves that result in the knight visiting every square on the chessboard exactly once. Note that it is <span class="rosetta__text--italic">not</span> a requirement that the tour be "closed"; that is, the knight need not end within a single move of its start position.
/// <br>
/// Input and output may be textual or graphical, according to the conventions of the programming environment.  If textual, squares should be indicated in [http://en.wikipedia.org/wiki/Algebraic_chess_notation algebraic notation].  The output should indicate the order in which the knight visits the squares, starting with the initial position.  The form of the output may be a diagram of the board with the squares numbered according to visitation sequence, or a textual list of algebraic coordinates in order, or even an actual animation of the knight moving around the chessboard.
/// <br>
/// Input: starting square
/// <br>
/// Output: move sequence
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">[[A* search algorithm]]</li>
/// <li class="rosetta__list-item">[[N-queens problem]]</li>
/// <li class="rosetta__list-item">[[Solve a Hidato puzzle]]</li>
/// <li class="rosetta__list-item">[[Solve a Holy Knight's tour]]</li>
/// <li class="rosetta__list-item">[[Solve a Hopido puzzle]]</li>
/// <li class="rosetta__list-item">[[Solve a Numbrix puzzle]]</li>
/// <li class="rosetta__list-item">[[Solve the no connection puzzle]]</li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
