
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Knuth's algorithm S
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// This is a method of randomly sampling n items from a set of M items, with equal probability; where M >= n and M, the number of items is unknown until the end.
/// This means that the equal probability sampling should be maintained  for all successive items > n as they become available (although the content of successive samples can change).
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">The algorithm:</dt></dl>
/// <ol class="rosetta__ordered-list">
/// <li class="rosetta__list-item--ordered">Select the first n items as the sample as they become available;</li>
/// <li class="rosetta__list-item--ordered">For the i-th item where i > n, have a random chance of n/i of keeping it.  If failing this chance, the sample remains the same.  If not, have it randomly (1/n) replace one of the previously selected n items of the sample.</li>
/// <li class="rosetta__list-item--ordered">Repeat #2 for any subsequent items.</li>
/// <br>
/// </ol>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">The Task:</dt></dl>
/// <ol class="rosetta__ordered-list">
/// <li class="rosetta__list-item--ordered">Create a function <code>s_of_n_creator</code> that given $n$ the maximum sample size, returns a function <code>s_of_n</code> that takes one parameter, <code>item</code>.</li>
/// <li class="rosetta__list-item--ordered">Function  <code>s_of_n</code> when called with successive items returns an equi-weighted random sample of up to n of its items so far, each time it is called, calculated using Knuths Algorithm S.</li>
/// <li class="rosetta__list-item--ordered">Test your functions by printing and showing the frequency of occurrences of the selected digits from 100,000 repetitions of:</li>
/// <br>
/// </ol><span class="rosetta__text--indented"># Use the s_of_n_creator with n == 3 to generate an s_of_n.</span>
/// <span class="rosetta__text--indented"># call s_of_n with each of the digits 0 to 9 in order, keeping the returned three digits of its random sampling from its last call with argument item=9.</span>
/// <br>
/// Note: A class taking n and generating a callable instance/function might also be used.
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Reference:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">The Art of Computer Programming, Vol 2, 3.4.2 p.142</li>
/// <br>
/// </ul>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Cf.</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/One of n lines in a file" title="One of n lines in a file"></a> </li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Accumulator factory" title="Accumulator factory"></a></li>
/// <br>
/// </ul>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
