
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Compiler/code generator
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// Code Generator
/// <br>
/// A code generator translates the output of the syntax analyzer and/or semantic analyzer
/// into lower level code, either assembly, object, or virtual.
/// <br>
/// <br>
/// <br>
/// Take the output of the Syntax analyzer <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/syntax_analyzer" title="Compiler/syntax_analyzer">task</a> - which is a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Flatten_a_list" title="Flatten_a_list">flattened</a> Abstract Syntax Tree (AST) - and convert it to virtual machine code, that can be run by the
/// <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/virtual_machine_interpreter" title="Compiler/virtual_machine_interpreter">Virtual machine interpreter</a>.  The output is in text format, and represents virtual assembly code.
/// <br>
/// The program should read input from a file and/or stdin, and write output to a file and/or
/// stdout.
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Example - given the simple program (below), stored in a file called while.t, create the list of tokens, using one of the Lexical analyzer <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/lexical_analyzer" title="Compiler/lexical_analyzer">solutions</a></dt></dl>
/// <br>
///  lex < while.t > while.lex
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Run one of the Syntax analyzer <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/syntax_analyzer" title="Compiler/syntax_analyzer">solutions</a>:</dt></dl>
/// <br>
///  parse < while.lex > while.ast
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">while.ast can be input into the code generator.</dt></dl>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">The following table shows the input to lex, lex output, the AST produced by the parser, and the generated virtual assembly code.</dt></dl>
/// <br>
///  Run as:  lex < while.t | parse | gen
/// <br>
/// {| class="wikitable"
/// |-
/// ! Input to lex
/// ! Output from lex, input to parse
/// ! Output from parse
/// ! Output from gen, input to VM
/// |-
/// | style="vertical-align:top" |
/// <lang c>count = 1;
/// while (count < 10) {
///     print("count is: ", count, "\n");
///     count = count + 1;
/// }</lang>
/// <br>
/// | style="vertical-align:top" |
/// <b><pre>
///     1      1   Identifier      count
///     1      7   Op_assign
///     1      9   Integer              1
///     1     10   Semicolon
///     2      1   Keyword_while
///     2      7   LeftParen
///     2      8   Identifier      count
///     2     14   Op_less
///     2     16   Integer             10
///     2     18   RightParen
///     2     20   LeftBrace
///     3      5   Keyword_print
///     3     10   LeftParen
///     3     11   String          "count is: "
///     3     23   Comma
///     3     25   Identifier      count
///     3     30   Comma
///     3     32   String          "\n"
///     3     36   RightParen
///     3     37   Semicolon
///     4      5   Identifier      count
///     4     11   Op_assign
///     4     13   Identifier      count
///     4     19   Op_add
///     4     21   Integer              1
///     4     22   Semicolon
///     5      1   RightBrace
///     6      1   End_of_input</pre></b>
/// <br>
/// | style="vertical-align:top" |
/// <b><pre>Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Assign
/// Identifier    count
/// Integer       1
/// While
/// Less
/// Identifier    count
/// Integer       10
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Sequence
/// Sequence
/// Sequence
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prts
/// String        "count is: "
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prti
/// Identifier    count
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Prts
/// String        "\n"
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"></dt></dl>
/// Assign
/// Identifier    count
/// Add
/// Identifier    count
/// Integer       1</pre></b>
/// <br>
/// | style="vertical-align:top" |
/// <b><pre>Datasize: 1 Strings: 2
/// "count is: "
/// "\n"
///    0 push  1
///    5 store [0]
///   10 fetch [0]
///   15 push  10
///   20 lt
///   21 jz     (43) 65
///   26 push  0
///   31 prts
///   32 fetch [0]
///   37 prti
///   38 push  1
///   43 prts
///   44 fetch [0]
///   49 push  1
///   54 add
///   55 store [0]
///   60 jmp    (-51) 10
///   65 halt</pre></b>
/// |}
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"> Input format:</dt></dl>
/// <br>
/// As shown in the table, above, the output from the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/syntax_analyzer" title="Compiler/syntax_analyzer">syntax analyzer</a> is a flattened AST.
/// <br>
/// In the AST, Identifier, Integer, and String, are terminal nodes, e.g, they do not have child nodes.
/// <br>
/// Loading this data into an internal parse tree should be as simple as:
/// <br>
/// <lang python>
/// def load_ast()
///     line = readline()
///     # Each line has at least one token
///     line_list = tokenize the line, respecting double quotes
/// <br>
///     text = line_list[0] # first token is always the node type
/// <br>
///     if text == ";"
///         return None
/// <br>
///     node_type = text # could convert to internal form if desired
/// <br>
///     # A line with two tokens is a leaf node
///     # Leaf nodes are: Identifier, Integer String
///     # The 2nd token is the value
///     if len(line_list) > 1
///         return make_leaf(node_type, line_list[1])
/// <br>
///     left = load_ast()
///     right = load_ast()
///     return make_node(node_type, left, right)
/// </lang>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"> Output format - refer to the table above</dt></dl>
/// <br>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">The first line is the header: Size of data, and number of constant strings.</li>
/// <br>
/// </ul>** size of data is the number of 32-bit unique variables used.  In this example, one variable, <span class="rosetta__text--bold">count</span>
/// ** number of constant strings is just that - how many there are
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">After that, the constant strings</li>
/// <li class="rosetta__list-item">Finally, the assembly code</li>
/// <br>
/// </ul>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Registers:</dt></dl>
/// <br>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">sp: the stack pointer - points to the next top of stack.  The stack is a 32-bit integer array.</li>
/// <br>
/// </ul>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">pc: the program counter - points to the current instruction to be performed.  The code is an array of bytes.</li>
/// <br>
/// </ul>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Data: </dt></dl>
/// <br>
/// 32-bit integers and strings
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Instructions:</dt></dl>
/// <br>
/// Each instruction is one byte.  The following instructions also have a 32-bit integer operand:
/// <br>
///  fetch [index]
/// <br>
/// where index is an index into the data array.
/// <br>
///  store [index]
/// <br>
/// where index is an index into the data array.
/// <br>
///  push n
/// <br>
/// where value is a 32-bit integer that will be pushed onto the stack.
/// <br>
///  jmp (n) addr
/// <br>
/// where (n) is a 32-bit integer specifying the distance between the current location and the
/// desired location.  addr is an unsigned value of the actual code address.
/// <br>
///  jz (n) addr
/// <br>
/// where (n) is a 32-bit integer specifying the distance between the current location and the
/// desired location.  addr is an unsigned value of the actual code address.
/// <br>
/// The following instructions do not have an operand.  They perform their operation directly
/// against the stack:
/// <br>
/// For the following instructions, the operation is performed against the top two entries in
/// the stack:
/// <br>
///  add
///  sub
///  mul
///  div
///  mod
///  lt
///  gt
///  le
///  ge
///  eq
///  ne
///  and
///  or
/// <br>
/// For the following instructions, the operation is performed against the top entry in the
/// stack:
/// <br>
///  neg
///  not
/// <br>
///  prtc
/// <br>
/// Print the word at stack top as a character.
/// <br>
///  prti
/// <br>
/// Print the word at stack top as an integer.
/// <br>
///  prts
/// <br>
/// Stack top points to an index into the string pool.  Print that entry.
/// <br>
///  halt
/// <br>
/// Unconditional stop.
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"> Additional examples</dt></dl>
/// <br>
/// Your solution should pass all the test cases above and the additional tests found <span class="rosetta__text--bold"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/Sample_programs" title="Compiler/Sample_programs">Here</a></span>.
/// <br>
/// <br>
/// <br>
/// The C and Python versions can be considered reference implementations.
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related Tasks</dt></dl>
/// <br>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/lexical_analyzer" title="Compiler/lexical_analyzer">Lexical Analyzer task</a></li>
/// <li class="rosetta__list-item"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/syntax_analyzer" title="Compiler/syntax_analyzer">Syntax Analyzer task</a></li>
/// <li class="rosetta__list-item"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/virtual_machine_interpreter" title="Compiler/virtual_machine_interpreter">Virtual Machine Interpreter task</a></li>
/// <li class="rosetta__list-item"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Compiler/AST_interpreter" title="Compiler/AST_interpreter">AST Interpreter task</a></li>
/// <br>
/// </ul>
/// <hr>
/// __TOC__
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
