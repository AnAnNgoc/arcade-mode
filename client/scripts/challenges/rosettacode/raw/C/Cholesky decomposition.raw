
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Cholesky decomposition
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">Every symmetric, positive definite matrix A can be decomposed into a product of a unique lower triangular matrix L and its transpose:</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">$A = LL^T$</span></p><br/><p class="rosetta__paragraph">$L$ is called the <span class="rosetta__text--italic">Cholesky factor</span> of $A$, and can be interpreted as a generalized square root of $A$, as described in <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Cholesky decomposition" title="wp: Cholesky decomposition">Cholesky decomposition</a>.</p><br/><p class="rosetta__paragraph">In a 3x3 example, we have to solve the following system of equations:</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">$\begin{align}</span></p>
/// <p class="rosetta__paragraph">A &=</p>
/// <p class="rosetta__paragraph">\begin{pmatrix}</p>
/// <p class="rosetta__paragraph">a_{11} & a_{21} & a_{31}\\</p>
/// <p class="rosetta__paragraph">a_{21} & a_{22} & a_{32}\\</p>
/// <p class="rosetta__paragraph">a_{31} & a_{32} & a_{33}\\</p>
/// <p class="rosetta__paragraph">\end{pmatrix}\\</p>
/// <p class="rosetta__paragraph">& =</p>
/// <p class="rosetta__paragraph">\begin{pmatrix}</p>
/// <p class="rosetta__paragraph">l_{11} & 0 & 0 \\</p>
/// <p class="rosetta__paragraph">l_{21} & l_{22} & 0 \\</p>
/// <p class="rosetta__paragraph">l_{31} & l_{32} & l_{33}\\</p>
/// <p class="rosetta__paragraph">\end{pmatrix}</p>
/// <p class="rosetta__paragraph">\begin{pmatrix}</p>
/// <p class="rosetta__paragraph">l_{11} & l_{21} & l_{31} \\</p>
/// <p class="rosetta__paragraph">0 & l_{22} & l_{32} \\</p>
/// <p class="rosetta__paragraph">0 & 0 & l_{33}</p>
/// <p class="rosetta__paragraph">\end{pmatrix} \equiv LL^T\\</p>
/// <p class="rosetta__paragraph">&= \begin{pmatrix}</p>
/// <p class="rosetta__paragraph">l_{11}^2     & l_{21}l_{11} & l_{31}l_{11} \\</p>
/// <p class="rosetta__paragraph">l_{21}l_{11} & l_{21}^2 + l_{22}^2& l_{31}l_{21}+l_{32}l_{22} \\</p>
/// <p class="rosetta__paragraph">l_{31}l_{11} & l_{31}l_{21}+l_{32}l_{22} & l_{31}^2 + l_{32}^2+l_{33}^2</p>
/// <p class="rosetta__paragraph">\end{pmatrix}\end{align}</p>
/// <p class="rosetta__paragraph">$</p><br/><p class="rosetta__paragraph">We can see that for the diagonal elements ($l_{kk}$) of $L$ there is a calculation pattern:</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">$l_{11} = \sqrt{a_{11}}$</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">$l_{22} = \sqrt{a_{22} - l_{21}^2}$</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">$l_{33} = \sqrt{a_{33} - (l_{31}^2 + l_{32}^2)}$</span></p><br/><p class="rosetta__paragraph">or in general:</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">$l_{kk} = \sqrt{a_{kk} - \sum_{j=1}^{k-1} l_{kj}^2}$</span></p><br/><p class="rosetta__paragraph">For the elements below the diagonal ($l_{ik}$, where $i > k $) there is also a calculation pattern:</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">$l_{21} = \frac{1}{l_{11}} a_{21}$</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">$l_{31} = \frac{1}{l_{11}} a_{31}$</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">$l_{32} = \frac{1}{l_{22}} (a_{32} - l_{31}l_{21})$</span></p><br/><p class="rosetta__paragraph">which can also be expressed in a general formula:</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--indented">$l_{ik} = \frac{1}{l_{kk}} \left ( a_{ik} - \sum_{j=1}^{k-1} l_{ij}l_{kj} \right )$</span></p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Task description</span></p><br/><p class="rosetta__paragraph">The task is to implement a routine which will return a lower Cholesky factor $L$ for every given symmetric, positive definite nxn matrix $A$. You should then test it on the following two examples and include your output.</p><br/><p class="rosetta__paragraph">Example 1:</p><br/><div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// 25  15  -5                 5   0   0
/// 15  18   0         -->     3   3   0
/// -5   0  11                -1   1   3
/// </pre></div><br/><p class="rosetta__paragraph">Example 2:</p><br/><div class="rosetta__pre-wrap"><pre class="rosetta__pre">
/// 18  22   54   42           4.24264    0.00000    0.00000    0.00000
/// 22  70   86   62   -->     5.18545    6.56591    0.00000    0.00000
/// 54  86  174  134          12.72792    3.04604    1.64974    0.00000
/// 42  62  134  106           9.89949    1.62455    1.84971    1.39262
/// </pre></div>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Note:</dt></dl>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">The Cholesky decomposition of a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Pascal matrix generation‎" title="Pascal matrix generation‎">Pascal</a> upper-triangle matrix is the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Identity matrix" title="wp: Identity matrix">Identity matrix</a> of the same size. </li>
/// <li class="rosetta__list-item--ordered">The Cholesky decomposition of a Pascal symmetric matrix is the Pascal lower-triangle matrix of the same size. </li></ol><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
