
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Checkpoint synchronization
/// type: rosetta-code

/// categories:
/// Classic CS problems and programs

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// The checkpoint synchronization is a problem of synchronizing multiple <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a>s. Consider a workshop where several workers (<a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a>s) assembly details of some mechanism. When each of them completes his work they put the details together. There is no store, so a worker who finished its part first must wait for others before starting another one. Putting details together is the <span class="rosetta__text--italic">checkpoint</span> at which <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a>s synchronize themselves before going their paths apart.
/// <br>
/// <span class="rosetta__text--bold">The task</span>
/// <br>
/// Implement checkpoint synchronization in your language.
/// <br>
/// Make sure that the solution is <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Race condition" title="Race condition">race condition</a>-free. Note that a straightforward solution based on <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/event" title="event">event</a>s is exposed to <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Race condition" title="Race condition">race condition</a>. Let two <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task" title="task">task</a>s A and B need to be synchronized at a checkpoint. Each signals its event (<span class="rosetta__text--italic">EA</span> and <span class="rosetta__text--italic">EB</span> correspondingly), then waits for the AND-combination of the events (<span class="rosetta__text--italic">EA</span>&<span class="rosetta__text--italic">EB</span>) and resets its event. Consider the following scenario: A signals <span class="rosetta__text--italic">EA</span> first and gets blocked waiting for <span class="rosetta__text--italic">EA</span>&<span class="rosetta__text--italic">EB</span>. Then B signals <span class="rosetta__text--italic">EB</span> and loses the processor. Then A is released (both events are signaled) and resets <span class="rosetta__text--italic">EA</span>. Now if B returns and enters waiting for <span class="rosetta__text--italic">EA</span>&<span class="rosetta__text--italic">EB</span>, it gets lost.
/// <br>
/// When a worker is ready it shall not continue before others finish. A typical implementation bug is when a worker is counted twice within one working cycle causing its premature completion. This happens when the quickest worker serves its cycle two times while the laziest one is lagging behind.
/// <br>
/// If you can, implement workers joining and leaving.
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
