
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Continued fraction
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// A number may be represented as a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Continued fraction" title="wp: Continued fraction">continued fraction</a> (see [http://mathworld.wolfram.com/ContinuedFraction.html Mathworld] for more information) as follows:
/// <br>
/// <span class="rosetta__text--indented">$a_0 + \cfrac{b_1}{a_1 + \cfrac{b_2}{a_2 + \cfrac{b_3}{a_3 + \ddots}}}$</span>
/// <br>
/// The task is to write a program which generates such a number and prints a real representation of it. The code should be tested by calculating and printing the square root of 2, Napier's Constant, and Pi, using the following coefficients:
/// <br>
/// For the square root of 2, use $a_0 = 1$ then $a_N = 2$. $b_N$ is always $1$.
/// <br>
/// <span class="rosetta__text--indented">$\sqrt{2} = 1 + \cfrac{1}{2 + \cfrac{1}{2 + \cfrac{1}{2 + \ddots}}}$</span>
/// <br>
/// For Napier's Constant, use $a_0 = 2$, then $a_N = N$. $b_1 = 1$ then $b_N = N-1$.
/// <br>
/// <span class="rosetta__text--indented">$e = 2 + \cfrac{1}{1 + \cfrac{1}{2 + \cfrac{2}{3 + \cfrac{3}{4 + \ddots}}}}$</span>
/// <br>
/// For Pi, use $a_0 = 3$ then $a_N = 6$. $b_N = (2N-1)^2$.
/// <br>
/// <span class="rosetta__text--indented">$\pi = 3 + \cfrac{1}{6 + \cfrac{9}{6 + \cfrac{25}{6 + \ddots}}}$</span>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">See also<nowiki>:</nowiki></dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Continued fraction/Arithmetic" title="Continued fraction/Arithmetic"></a> for tasks that do arithmetic over continued fractions.</li>
/// <br>
/// </ul>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
