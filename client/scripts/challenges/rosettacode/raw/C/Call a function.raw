
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Call a function
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Category:Functions and subroutines]] 
/// [[Category:Simple]]
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Demonstrate the different syntax and semantics provided for calling a function. 
/// <br>
/// <br>
/// This may include:
/// <span class="rosetta__text--indented">* &nbsp; Calling a function that requires no arguments</span>
/// <span class="rosetta__text--indented">* &nbsp; Calling a function with a fixed number of arguments</span>
/// <span class="rosetta__text--indented">* &nbsp; Calling a function with [[Optional parameters" title="Category:Functions and subroutines]] </span>
/// [[Category:Simple]]
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Demonstrate the different syntax and semantics provided for calling a function. 
/// <br>
/// <br>
/// This may include:
/// <span class="rosetta__text--indented">* &nbsp; Calling a function that requires no arguments</span>
/// <span class="rosetta__text--indented">* &nbsp; Calling a function with a fixed number of arguments</span>
/// <span class="rosetta__text--indented">* &nbsp; Calling a function with [[Optional parameters">optional arguments</a></span>
/// <span class="rosetta__text--indented">* &nbsp; Calling a function with a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Variadic function" title="Variadic function">variable number of arguments</a></span>
/// <span class="rosetta__text--indented">* &nbsp; Calling a function with <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Named parameters" title="Named parameters">named arguments</a></span>
/// <span class="rosetta__text--indented">* &nbsp; Using a function in statement context</span>
/// <span class="rosetta__text--indented">* &nbsp; Using a function in <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/First-class functions" title="First-class functions">first-class context</a> within an expression</span>
/// <span class="rosetta__text--indented">* &nbsp; Obtaining the return value of a function</span>
/// <span class="rosetta__text--indented">* &nbsp; Distinguishing built-in functions and user-defined functions</span>
/// <span class="rosetta__text--indented">* &nbsp; Distinguishing subroutines and functions</span>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">* &nbsp; Stating whether arguments are <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/:Category:Parameter passing" title=":Category:Parameter passing">passed</a> by value or by reference</dt></dl>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">* &nbsp; Is partial application possible and how</dt></dl>
/// <br>
/// <br>
/// This task is <span class="rosetta__text--italic">not</span> about <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Function definition" title="Function definition">defining functions</a>.
/// <br><bR>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var foo = function() { return arguments.length };
foo() // 0
foo(1, 2, 3) // 3

/// rawSolutions:
=={{header|JavaScript}}==

The arguments to a JavaScript function are stored in a special array-like object which does not enforce arity in any way; a function declared to take ''n'' arguments may be called with none‒and vice versa‒without raising an error.

<lang JavaScript>var foo = function() { return arguments.length };
foo() // 0
foo(1, 2, 3) // 3</lang>

Neither optional (see above) nor named arguments are supported, though the latter (and the inverse of the former) may be simulated with the use of a helper object to be queried for the existence and/or values of relevant keys. <span style="color: transparent;">Seriously, what is "statement context"?</span>

JavaScript functions are first-class citizens; they can be stored in variables (see above) and passed as arguments.
<lang JavaScript>var squares = [1, 2, 3].map(function (n) { return n * n }); // [1, 4, 9]</lang>

Naturally, they can also be returned, thus partial application is supported.
<lang JavaScript>
var make_adder = function(m) {
    return function(n) { return m + n }
};
var add42 = make_adder(42);
add42(10) // 52</lang>

Calling a user-defined function's <tt>toString()</tt> method returns its source verbatim; that the implementation is elided for built-ins provides a mechanism for distinguishing between the two.

<lang JavaScript>foo.toString()
"function () { return arguments.length }"
alert.toString()
"function alert() { [native code] }"</lang>

Arguments are passed by value, but the members of collections are essentially passed by reference and thus propagate modification.
<lang JavaScript>var mutate = function(victim) {
    victim[0] = null;
    victim = 42;
};
var foo = [1, 2, 3];
mutate(foo) // foo is now [null, 2, 3], not 42</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
