
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Cartesian product of two or more lists
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Show one or more idiomatic ways of generating the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Cartesian_product" title="wp: Cartesian_product">Cartesian product</a> of two arbitrary lists in your language.</p><br/><p class="rosetta__paragraph">Demonstrate that your function/method correctly returns:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:{1, 2} × {3, 4} = {(1, 3), (1, 4), (2, 3), (2, 4)}</span></p><br/><p class="rosetta__paragraph">and, in contrast:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:{3, 4} × {1, 2} = {(3, 1), (3, 2), (4, 1), (4, 2)}</span></p><br/><p class="rosetta__paragraph">Also demonstrate, using your function/method, that the product of an empty list with any other list is empty.</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">: {1, 2} × {} = {}</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">: {} × {1, 2} = {}</span></p><br/><p class="rosetta__paragraph">For extra credit, show or write a function returning the n-ary product of an arbitrary number of lists, each of arbitrary length. Your function might, for example, accept a single argument which is itself a list of lists, and return the n-ary product of those lists.</p><br/><p class="rosetta__paragraph">Use your <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Cartesian_product#Finite_n-ary_product" title="wp: Cartesian_product#Finite_n-ary_product">n-ary Cartesian product</a> function to show the following products:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">: {1776, 1789} × {7, 12} × {4, 14, 23} × {0, 1}</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">: {1, 2, 3} × {30} × {500, 100}</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">: {1, 2, 3} × {} × {500, 100}</span></p><br/><br>
/// </div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(() => {

    // CARTESIAN PRODUCT OF TWO LISTS -----------------------------------------

    // cartProd :: [a] -> [b] -> [[a, b]]
    const cartProd = (xs, ys) =>
        concatMap((x => concatMap(y => [
            [x, y]
        ], ys)), xs);


    // GENERIC FUNCTIONS ------------------------------------------------------

    // concatMap :: (a -> [b]) -> [a] -> [b]
    const concatMap = (f, xs) => [].concat.apply([], xs.map(f));

    // map :: (a -> b) -> [a] -> [b]
    const map = (f, xs) => xs.map(f);

    // show :: a -> String
    const show = x => JSON.stringify(x); //, null, 2);

    // unlines :: [String] -> String
    const unlines = xs => xs.join('\n');

    // TEST -------------------------------------------------------------------
    return unlines(map(show, [
        cartProd([1, 2], [3, 4]),
        cartProd([3, 4], [1, 2]),
        cartProd([1, 2], []),
        cartProd([], [1, 2]),
    ]));
})();

/// rawSolutions:
=={{header|JavaScript}}==
===ES6===
====Functional====
Cartesian products fall quite naturally out of '''concatMap''', and its argument-flipped twin '''bind'''.

For the Cartesian product of just two lists:
<lang JavaScript>(() => {

    // CARTESIAN PRODUCT OF TWO LISTS -----------------------------------------

    // cartProd :: [a] -> [b] -> [[a, b]]
    const cartProd = (xs, ys) =>
        concatMap((x => concatMap(y => [
            [x, y]
        ], ys)), xs);


    // GENERIC FUNCTIONS ------------------------------------------------------

    // concatMap :: (a -> [b]) -> [a] -> [b]
    const concatMap = (f, xs) => [].concat.apply([], xs.map(f));

    // map :: (a -> b) -> [a] -> [b]
    const map = (f, xs) => xs.map(f);

    // show :: a -> String
    const show = x => JSON.stringify(x); //, null, 2);

    // unlines :: [String] -> String
    const unlines = xs => xs.join('\n');

    // TEST -------------------------------------------------------------------
    return unlines(map(show, [
        cartProd([1, 2], [3, 4]),
        cartProd([3, 4], [1, 2]),
        cartProd([1, 2], []),
        cartProd([], [1, 2]),
    ]));
})();</lang>
{{Out}}
<pre>[[1,3],[1,4],[2,3],[2,4]]
[[3,1],[3,2],[4,1],[4,2]]
[]
[]</pre>

For the n-ary Cartesian product over a list of lists:
<lang JavaScript>(() => {
    // n-ary Cartesian product of a list of lists

    // cartProdN :: [[a]] -> [[a]]
    const cartProdN = lists =>
        foldr((as, xs) =>
            bind(xs, x => bind(as, a => [x.concat(a)])), [
                []
            ], lists);

    // GENERIC FUNCTIONS ------------------------------------------------------

    // bind ::  [a] -> (a -> [b]) -> [b]
    const bind = (xs, f) => [].concat.apply([], xs.map(f));

    // foldr (a -> b -> b) -> b -> [a] -> b
    const foldr = (f, a, xs) => xs.reduceRight(f, a);

    // intercalate :: String -> [a] -> String
    const intercalate = (s, xs) => xs.join(s);

    // map :: (a -> b) -> [a] -> [b]
    const map = (f, xs) => xs.map(f);

    // show :: a -> String
    const show = x => JSON.stringify(x);

    // unlines :: [String] -> String
    const unlines = xs => xs.join('\n');

    // TEST -------------------------------------------------------------------
    return intercalate('\n\n', [unlines(map(show, cartProdN([
            [1776, 1789],
            [7, 12],
            [4, 14, 23],
            [0, 1]
        ]))),
        show(cartProdN([
            [1, 2, 3],
            [30],
            [50, 100]
        ])),
        show(cartProdN([
            [1, 2, 3],
            [],
            [50, 100]
        ]))
    ])
})();</lang>
{{Out}}
<pre>[1776,7,4,0]
[1776,7,4,1]
[1776,7,14,0]
[1776,7,14,1]
[1776,7,23,0]
[1776,7,23,1]
[1776,12,4,0]
[1776,12,4,1]
[1776,12,14,0]
[1776,12,14,1]
[1776,12,23,0]
[1776,12,23,1]
[1789,7,4,0]
[1789,7,4,1]
[1789,7,14,0]
[1789,7,14,1]
[1789,7,23,0]
[1789,7,23,1]
[1789,12,4,0]
[1789,12,4,1]
[1789,12,14,0]
[1789,12,14,1]
[1789,12,23,0]
[1789,12,23,1]

[[1,30,50],[1,30,100],[2,30,50],[2,30,100],[3,30,50],[3,30,100]]

[]</pre>

====Imperative====
Imperative implementations of Cartesian products are inevitably less compact and direct, but we can certainly write an iterative translation of a fold over nested applications of '''bind''' or '''concatMap''':

<lang JavaScript>(() => {
    // n-ary Cartesian product of a list of lists
    // ( Imperative implementation )

    // cartProd :: [a] -> [b] -> [[a, b]]
    const cartProd = lists => {
        let ps = [],
            acc = [
                []
            ],
            i = lists.length;
        while (i--) {
            let subList = lists[i],
                j = subList.length;
            while (j--) {
                let x = subList[j],
                    k = acc.length;
                while (k--) ps.push([x].concat(acc[k]))
            };
            acc = ps;
            ps = [];
        };
        return acc.reverse();
    };

    // GENERIC FUNCTIONS ------------------------------------------------------

    // intercalate :: String -> [a] -> String
    const intercalate = (s, xs) => xs.join(s);

    // map :: (a -> b) -> [a] -> [b]
    const map = (f, xs) => xs.map(f);

    // show :: a -> String
    const show = x => JSON.stringify(x);

    // unlines :: [String] -> String
    const unlines = xs => xs.join('\n');

    // TEST -------------------------------------------------------------------
    return intercalate('\n\n', [show(cartProd([
            [1, 2],
            [3, 4]
        ])),
        show(cartProd([
            [3, 4],
            [1, 2]
        ])),
        show(cartProd([
            [1, 2],
            []
        ])),
        show(cartProd([
            [],
            [1, 2]
        ])),
        unlines(map(show, cartProd([
            [1776, 1789],
            [7, 12],
            [4, 14, 23],
            [0, 1]
        ]))),
        show(cartProd([
            [1, 2, 3],
            [30],
            [50, 100]
        ])),
        show(cartProd([
            [1, 2, 3],
            [],
            [50, 100]
        ]))
    ]);
})();</lang>
{{Out}}
<pre>[[1,4],[1,3],[2,4],[2,3]]

[[3,2],[3,1],[4,2],[4,1]]

[]

[]

[1776,12,4,1]
[1776,12,4,0]
[1776,12,14,1]
[1776,12,14,0]
[1776,12,23,1]
[1776,12,23,0]
[1776,7,4,1]
[1776,7,4,0]
[1776,7,14,1]
[1776,7,14,0]
[1776,7,23,1]
[1776,7,23,0]
[1789,12,4,1]
[1789,12,4,0]
[1789,12,14,1]
[1789,12,14,0]
[1789,12,23,1]
[1789,12,23,0]
[1789,7,4,1]
[1789,7,4,0]
[1789,7,14,1]
[1789,7,14,0]
[1789,7,23,1]
[1789,7,23,0]

[[1,30,50],[1,30,100],[2,30,50],[2,30,100],[3,30,50],[3,30,100]]

[]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
