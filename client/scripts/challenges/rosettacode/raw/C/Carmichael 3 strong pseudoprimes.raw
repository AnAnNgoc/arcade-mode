
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Carmichael 3 strong pseudoprimes
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">A lot of composite numbers can be separated from primes by Fermat's Little Theorem, but there are some that completely confound it.</p><br/><p class="rosetta__paragraph">The  <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Miller-Rabin primality test" title="Miller-Rabin primality test">Miller Rabin Test</a>  uses a combination of Fermat's Little Theorem and Chinese Division Theorem to overcome this.</p><br/><p class="rosetta__paragraph">The purpose of this task is to investigate such numbers using a method based on  <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Carmichael number" title="wp: Carmichael number">Carmichael numbers</a>,  as suggested in  <a class="rosetta__link--wiki" href="http://www.maths.lancs.ac.uk/~jameson/carfind.pdf" title="link: http://www.maths.lancs.ac.uk/~jameson/carfind.pdf">Notes by G.J.O Jameson March 2010</a>.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Find Carmichael numbers of the form:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">::: <big> <i>Prime</i><sub>1</sub> &times; <i>Prime</i><sub>2</sub> &times; <i>Prime</i><sub>3</sub> </big></span></p><br/><p class="rosetta__paragraph">where  <big> (<i>Prime</i><sub>1</sub>   <   <i>Prime</i><sub>2</sub>   <   <i>Prime</i><sub>3</sub>) </big>  for all    <big> <i>Prime</i><sub>1</sub> </big>     up to  <span class="rosetta__text--bold">61</span>.</p>
/// <br>(See page 7 of  <a class="rosetta__link--wiki" href="http://www.maths.lancs.ac.uk/~jameson/carfind.pdf" title="link: http://www.maths.lancs.ac.uk/~jameson/carfind.pdf">Notes by G.J.O Jameson March 2010</a>  for solutions.)
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Pseudocode:</dt></dl>
/// <p class="rosetta__paragraph">For a given  $Prime_1$</p><br/><p class="rosetta__paragraph"><tt>for 1 < h3 < Prime<sub>1</sub></tt></p>
/// <p class="rosetta__paragraph"><tt>for 0 < d < h3+Prime<sub>1</sub></tt></p>
/// <p class="rosetta__paragraph"><tt>if (h3+Prime<sub>1</sub>)*(Prime<sub>1</sub>-1) mod d == 0 and -Prime<sub>1</sub> squared mod h3 == d mod h3</tt></p>
/// <p class="rosetta__paragraph"><tt>then</tt></p>
/// <p class="rosetta__paragraph"><tt>Prime<sub>2</sub> = 1 + ((Prime<sub>1</sub>-1) * (h3+Prime<sub>1</sub>)/d)</tt></p>
/// <p class="rosetta__paragraph"><tt>next d if Prime<sub>2</sub> is not prime</tt></p>
/// <p class="rosetta__paragraph"><tt>Prime<sub>3</sub> = 1 + (Prime<sub>1</sub>*Prime<sub>2</sub>/h3)</tt></p>
/// <p class="rosetta__paragraph"><tt>next d if Prime<sub>3</sub> is not prime</tt></p>
/// <p class="rosetta__paragraph"><tt>next d if (Prime<sub>2</sub>*Prime<sub>3</sub>) mod (Prime<sub>1</sub>-1) not equal 1</tt></p>
/// <p class="rosetta__paragraph"><tt>Prime<sub>1</sub> * Prime<sub>2</sub> * Prime<sub>3</sub> is a Carmichael Number</tt></p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
