
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Combinations and permutations
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
///  
/// <br>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Implement the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Combination" title="wp: Combination">combination]] &nbsp; <big> (<sup>n</sup>C<sub>k</sub>) </big> &nbsp; and [[wp:Permutation|permutation</a> &nbsp; <big> (<sup>n</sup>P<sub>k</sub>) </big> &nbsp; operators in the target language:
/// <br>
/// <span class="rosetta__text--indented">::* $^n\operatorname C_k =\binom nk = \frac{n(n-1)\ldots(n-k+1)}{k(k-1)\dots1} $</span>
/// <br>
/// <span class="rosetta__text--indented">::* $^n\operatorname P_k = n\cdot(n-1)\cdot(n-2)\cdots(n-k+1)$</span>
/// <br>
/// <br>
/// See the Wikipedia articles for a more detailed description.
/// <br>
/// <span class="rosetta__text--bold">To test</span>, generate and print examples of:
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">&nbsp; A sample of permutations from 1 to 12 and Combinations from 10 to 60 using exact Integer arithmetic.</li>
/// <li class="rosetta__list-item">&nbsp; A sample of permutations from 5 to 15000 and Combinations from 100 to 1000 using approximate Floating point arithmetic.<br> This 'floating point' code could be implemented using an approximation, e.g., by calling the [[Gamma function]].</li>
/// <br>
/// </ul>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related task:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">&nbsp; [[Evaluate binomial coefficients]]</li>
/// <br>
/// </ul>
/// <br>
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
