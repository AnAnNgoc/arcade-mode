
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Call a foreign-language function
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Show how a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Foreign function interface" title="Foreign function interface">foreign language function</a> can be called from the language.
/// <br>
/// <br>
/// As an example, consider calling functions defined in the [[C]] language. Create a string containing "Hello World!" of the string type typical to the language. Pass the string content to [[C]]'s <code>strdup</code>. The content can be copied if necessary. Get the result from <code>strdup</code> and print it using language means. Do not forget to free the result of <code>strdup</code> (allocated in the heap).
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Notes:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">It is not mandated if the [[C]] run-time library is to be loaded statically or dynamically. You are free to use either way.</li>
/// <li class="rosetta__list-item">[[C++]] and [[C]] solutions can take some other language to communicate with.</li>
/// <li class="rosetta__list-item">It is <span class="rosetta__text--italic">not</span> mandatory to use <code>strdup</code>, especially if the foreign function interface being demonstrated makes that uninformative.</li>
/// <br>
/// </ul>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">See also:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">&nbsp; [[Use another language to call a function]]</li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
