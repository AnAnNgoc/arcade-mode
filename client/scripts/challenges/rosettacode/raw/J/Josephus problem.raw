
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Josephus problem
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Josephus problem" title="wp: Josephus problem">Josephus problem</a> is a math puzzle with a grim description: $n$ prisoners are standing on a circle, sequentially numbered from $0$ to $n-1$.  
/// <br>
/// An executioner walks along the circle, starting from prisoner $0$, 
/// removing every $k$-th prisoner and killing him.  
/// <br>
/// As the process goes on, the circle becomes smaller and smaller, until only one prisoner remains, who is then freed. >
/// <br>
/// For example, if there are $n=5$ prisoners and $k=2$, the order the prisoners are killed in (let's call it the "killing sequence") will be 1, 3, 0, and 4, and the survivor will be #2.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Given any &nbsp; <big>$n, k > 0$</big>, &nbsp; find out which prisoner will be the final survivor.  
/// <br>
/// In one such incident, there were 41 prisoners and every 3<sup>rd</sup> prisoner was being killed &nbsp; (<big>$k=3$</big>).  
/// <br>
/// Among them was a clever chap name Josephus who worked out the problem, stood at the surviving position, and lived on to tell the tale. 
///  
/// Which number was he?
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Extra:</dt></dl>
/// The captors may be especially kind and let $m$ survivors free, 
/// <br>and Josephus might just have &nbsp; <big>$m-1$</big> &nbsp; friends to save.  
/// <br>
/// Provide a way to calculate which prisoner is at any given position on the killing sequence.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Notes:</dt></dl>
/// <ol class="rosetta__ordered-list">
/// <li class="rosetta__list-item--ordered">You can always play the executioner and follow the procedure exactly as described, walking around the circle, counting (and cutting off) heads along the way.  This would yield the complete killing sequence and answer the above questions, with a complexity of probably $O(kn)$.  However, individually it takes no more than $O(m)$ to find out which prisoner is the $m$-th to die.</li>
/// <li class="rosetta__list-item--ordered">If it's more convenient, you can number prisoners from &nbsp; $1$ to $n$ &nbsp; instead. &nbsp; If you choose to do so, please state it clearly.</li>
/// <li class="rosetta__list-item--ordered">An alternative description has the people committing assisted suicide instead of being executed, and the last person simply walks away. These details are not relevant, at least not mathematically.</li>
/// <br>
/// </ol><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var Josephus = {
  init: function(n) {
    this.head = {};
    var current = this.head;
    for (var i = 0; i < n-1; i++) {
      current.label = i+1;
      current.next = {prev: current};
      current = current.next;
    }
    current.label = n;
    current.next = this.head;
    this.head.prev = current;
    return this;
  },
  kill: function(spacing) {
    var current = this.head;
    while (current.next !== current) {
      for (var i = 0; i < spacing-1; i++) {
        current = current.next;
      }
      current.prev.next = current.next;
      current.next.prev = current.prev;
      current = current.next;
    }
    return current.label;
  }
}

/// rawSolutions:
=={{header|JavaScript}}==
Labels are 1-based, executioner's solution:
<lang javascript>var Josephus = {
  init: function(n) {
    this.head = {};
    var current = this.head;
    for (var i = 0; i < n-1; i++) {
      current.label = i+1;
      current.next = {prev: current};
      current = current.next;
    }
    current.label = n;
    current.next = this.head;
    this.head.prev = current;
    return this;
  },
  kill: function(spacing) {
    var current = this.head;
    while (current.next !== current) {
      for (var i = 0; i < spacing-1; i++) {
        current = current.next;
      }
      current.prev.next = current.next;
      current.next.prev = current.prev;
      current = current.next;
    }
    return current.label;
  }
}</lang>
{{out}}
<pre>
> Josephus.init(30).kill(2)
29
</pre>

With Array methods:
<lang javascript>function Josephus(n, k, s) {
	s = s | 1
	for (var ps=[], i=n; i--; ) ps[i]=i
	for (var ks=[], i=--k; ps.length>s; i=(i+k)%ps.length) ks.push(ps.splice(i, 1))
	document.write((arguments.callee+'').split(/\s|\(/)[1], '(', [].slice.call(arguments, 0), ') -> ', ps, ' / ', ks.length<45?ks:ks.slice(0,45)+',...' , '<br>')
	return [ps, ks]
}</lang>
{{out}}
<pre>
Josephus(5,1) -> 2 / 1,3,0,4
Josephus(41,2) -> 30 / 2,5,8,11,14,17,20,23,26,29,32,35,38,0,4,9,13,18,22,27,31,36,40,6,12,19,25,33,39,7,16,28,37,10,24,1,21,3,34,15
Josephus(23482,3342,3) -> 1087,1335,13317 / 3342,6685,10028,13371,16714,20057,23400,3261,6605,9949,13293,16637,19981,23325,3187,6532,9877,13222,16567,19912,23257,3120,6466,9812,13158,16504,19850,23196,3060,6407,9754,13101,16448,19795,23142,3007,6355,9703,13051,16399,19747,23095,2961,6310,9659,...
</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
