
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Forest fire
/// type: rosetta-code

/// categories:
/// Cellular automata

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Implement the Drossel and Schwabl definition of the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Forest-fire model" title="wp: Forest-fire model">forest-fire model</a>.
/// <br>
/// <br>
/// It is basically a 2D &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Cellular automaton" title="wp: Cellular automaton">cellular automaton</a> &nbsp; where each cell can be in three distinct states (<span class="rosetta__text--italic">empty</span>, <span class="rosetta__text--italic">tree</span> and <span class="rosetta__text--italic">burning</span>) and evolves according to the following rules (as given by Wikipedia)
/// <br>
/// <ol class="rosetta__ordered-list">
/// <li class="rosetta__list-item--ordered">A burning cell turns into an empty cell</li>
/// <li class="rosetta__list-item--ordered">A tree will burn if at least one neighbor is burning</li>
/// <li class="rosetta__list-item--ordered">A tree ignites with probability &nbsp; <big><span class="rosetta__text--italic">f</span> </big> &nbsp; even if no neighbor is burning</li>
/// <li class="rosetta__list-item--ordered">An empty space fills with a tree with probability &nbsp; <big> <span class="rosetta__text--italic">p</span> </big></li>
/// <br>
/// </ol>
/// <br>Neighborhood is the &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Moore neighborhood" title="wp: Moore neighborhood">Moore neighborhood</a>; &nbsp; boundary conditions are so that on the boundary the cells are always empty ("fixed" boundary condition).
/// <br>
/// At the beginning, populate the lattice with empty and tree cells according to a specific probability (e.g. a cell has the probability 0.5 to be a tree). Then, let the system evolve.
/// <br>
/// Task's requirements do not include graphical display or the ability to change parameters (probabilities &nbsp; <big> <span class="rosetta__text--italic">p</span> </big> &nbsp; and &nbsp; <big> <span class="rosetta__text--italic">f</span> </big>) &nbsp; through a graphical or command line interface.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">&nbsp; See &nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Conway's Game of Life" title="Conway's Game of Life"></a> </li>
/// <li class="rosetta__list-item--unordered">&nbsp; See &nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Wireworld" title="Wireworld"></a>.</li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var forest = {
    X: 50,
    Y: 50,
    propTree: 0.5,
    propTree2: 0.01,
    propBurn: 0.0001,
    t: [],
    c: ['rgb(255,255,255)', 'rgb(0,255,0)', 'rgb(255,0,0)']
};

for(var i = 0; i < forest.Y; i++) {
    forest.t[i] = [];
    for(var j = 0; j < forest.Y; j++) {
        forest.t[i][j] = Math.random() < forest.propTree ? 1 : 0;
    }
}

function afterLoad(forest) {
    var canvas = document.getElementById('canvas');
    var c = canvas.getContext('2d');
    for(var i = 0; i < forest.X; i++) {
        for(var j = 0; j < forest.Y; j++) {
            c.fillStyle = forest.c[forest.t[i][j]];
            c.fillRect(10*j, 10*i, 10*j+9, 10*i+9);
        }
    }
}

function doStep(forest) {
    var to = [];
    for(var i = 0; i < forest.Y; i++) {
        to[i] = forest.t[i].slice(0);
    }

    //indices outside the array are undefined; which converts to 0=empty on forced typecast
    for(var i = 0; i < forest.Y; i++) {
        for(var j = 0; j < forest.Y; j++) {
            if(0 == to[i][j]) {
                forest.t[i][j] = Math.random() < forest.propTree2 ? 1 : 0;
            } else if(1 == to[i][j]) {
                if(
                    ((i>0) && (2 == to[i-1][j])) ||
                    ((i<forest.Y-1) && (2 == to[i+1][j])) ||
                    ((j>0) && (2 == to[i][j-1])) ||
                    ((j<forest.X-1) && (2 == to[i][j+1]))
                    ) {
                    forest.t[i][j] = 2;
                } else {
                    forest.t[i][j] = Math.random() < forest.propBurn ? 2 : 1;
                }
            } else if(2 == to[i][j]) {
                //If it burns, it gets empty ...
                forest.t[i][j] = 0;
            }
        }
    }

}

window.setInterval(function(){
    doStep(forest);
    afterLoad(forest);
}, 100);


/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>var forest = {
    X: 50,
    Y: 50,
    propTree: 0.5,
    propTree2: 0.01,
    propBurn: 0.0001,
    t: [],
    c: ['rgb(255,255,255)', 'rgb(0,255,0)', 'rgb(255,0,0)']
};

for(var i = 0; i < forest.Y; i++) {
    forest.t[i] = [];
    for(var j = 0; j < forest.Y; j++) {
        forest.t[i][j] = Math.random() < forest.propTree ? 1 : 0;
    }
}

function afterLoad(forest) {
    var canvas = document.getElementById('canvas');
    var c = canvas.getContext('2d');
    for(var i = 0; i < forest.X; i++) {
        for(var j = 0; j < forest.Y; j++) {
            c.fillStyle = forest.c[forest.t[i][j]];
            c.fillRect(10*j, 10*i, 10*j+9, 10*i+9);
        }
    }
}

function doStep(forest) {
    var to = [];
    for(var i = 0; i < forest.Y; i++) {
        to[i] = forest.t[i].slice(0);
    }

    //indices outside the array are undefined; which converts to 0=empty on forced typecast
    for(var i = 0; i < forest.Y; i++) {
        for(var j = 0; j < forest.Y; j++) {
            if(0 == to[i][j]) {
                forest.t[i][j] = Math.random() < forest.propTree2 ? 1 : 0;
            } else if(1 == to[i][j]) {
                if(
                    ((i>0) && (2 == to[i-1][j])) ||
                    ((i<forest.Y-1) && (2 == to[i+1][j])) ||
                    ((j>0) && (2 == to[i][j-1])) ||
                    ((j<forest.X-1) && (2 == to[i][j+1]))
                    ) {
                    forest.t[i][j] = 2;
                } else {
                    forest.t[i][j] = Math.random() < forest.propBurn ? 2 : 1;
                }
            } else if(2 == to[i][j]) {
                //If it burns, it gets empty ...
                forest.t[i][j] = 0;
            }
        }
    }

}

window.setInterval(function(){
    doStep(forest);
    afterLoad(forest);
}, 100);
</lang>

To actually see it work we need a small demo page with HTML5 compliant code:

<lang html5><!DOCTYPE html>
<html>
<head>
<title>Forest Fire</title>
</head>
<body>
<canvas id="canvas" width="500" height="500">
Your browser doesn't support HTML5 Canvas.
</canvas>
<script language="JavaScript">//<![CDATA[<!--
// --> HERE COMES THE SCRIPT FROM ABOVE <--
//-->]]></script>
</body>
</html>
</lang>

The output is a (mostly fluent) animation of the area.



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
