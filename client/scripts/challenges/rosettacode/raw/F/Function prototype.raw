
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Function prototype
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// Some languages provide the facility to declare functions and subroutines through the use of <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Function prototype" title="wp: Function prototype">function prototyping</a>. 
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Demonstrate the methods available for declaring prototypes within the language. The provided solutions should include:
/// <br>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">An explanation of any placement restrictions for prototype declarations</li>
/// <li class="rosetta__list-item">A prototype declaration for a function that does not require arguments</li>
/// <li class="rosetta__list-item">A prototype declaration for a function that requires two arguments</li>
/// <li class="rosetta__list-item">A prototype declaration for a function that utilizes varargs</li>
/// <li class="rosetta__list-item">A prototype declaration for a function that utilizes optional arguments</li>
/// <li class="rosetta__list-item">A prototype declaration for a function that utilizes named parameters</li>
/// <li class="rosetta__list-item">Example of prototype declarations for subroutines or procedures (if these differ from functions)</li>
/// <li class="rosetta__list-item">An explanation and example of any special forms of prototyping not covered by the above</li>
/// <br>
/// </ul>
/// <br>
/// Languages that do not provide function prototyping facilities should be omitted from this task.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:

// A prototype declaration for a function that does not require arguments
function List() {}

List.prototype.push = function() {
  return [].push.apply(this, arguments);
};

List.prototype.pop = function() {
  return [].pop.call(this);
};

var l = new List();
l.push(5);
l.length; // 1
l[0]; 5
l.pop(); // 5
l.length; // 0

// A prototype declaration for a function that utilizes varargs
function List() {
  this.push.apply(this, arguments);
}

List.prototype.push = function() {
  return [].push.apply(this, arguments);
};

List.prototype.pop = function() {
  return [].pop.call(this);
};

var l = new List(5, 10, 15);
l.length; // 3
l[0]; 5
l.pop(); // 15
l.length; // 2



/// rawSolutions:
=={{header|JavaScript}}==
=== ES5 ===
JavaScript functions may also be used to define prototype objects
<lang JavaScript>
// A prototype declaration for a function that does not require arguments
function List() {}

List.prototype.push = function() {
  return [].push.apply(this, arguments);
};

List.prototype.pop = function() {
  return [].pop.call(this);
};

var l = new List();
l.push(5);
l.length; // 1
l[0]; 5
l.pop(); // 5
l.length; // 0

// A prototype declaration for a function that utilizes varargs
function List() {
  this.push.apply(this, arguments);
}

List.prototype.push = function() {
  return [].push.apply(this, arguments);
};

List.prototype.pop = function() {
  return [].pop.call(this);
};

var l = new List(5, 10, 15);
l.length; // 3
l[0]; 5
l.pop(); // 15
l.length; // 2

</lang>

=== ES6 ===
Class Declarations are used to define prototype objects
<lang JavaScript>
// A prototype declaration for a function that does not require arguments
class List {
  push() {
    return [].push.apply(this, arguments);
  }
  pop() {
    return [].pop.call(this);  
  }
}

var l = new List();
l.push(5);
l.length; // 1
l[0]; 5
l.pop(); // 5
l.length; // 0



// A prototype declaration for a function that utilizes varargs
class List {
  constructor(...args) {
    this.push(...args);
  }
  push() {
    return [].push.apply(this, arguments);
  }
  pop() {
    return [].pop.call(this);  
  }
}

var l = new List(5, 10, 15);
l.length; // 3
l[0]; 5
l.pop(); // 15
l.length; // 2
</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
