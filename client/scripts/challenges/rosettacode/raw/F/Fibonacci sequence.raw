
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Fibonacci sequence
/// type: rosetta-code

/// categories:
/// Recursion
/// Memoization
/// Classic CS problems and programs

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// The <span class="rosetta__text--bold">Fibonacci sequence</span> is a sequence &nbsp; <big> F<sub>n</sub> </big> &nbsp;  of natural numbers defined recursively: 
/// <br>
///       <big><big> F<sub>0</sub> = 0 </big></big>
///       <big><big> F<sub>1</sub> = 1 </big></big>
///       <big><big> F<sub>n</sub> = F<sub>n-1</sub> + F<sub>n-2</sub>, if n>1 </big></big>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Write a function to generate the &nbsp; <big> n<sup>th</sup> </big> &nbsp; Fibonacci number. 
/// <br>
/// Solutions can be iterative or recursive (though recursive solutions are generally considered too slow and are mostly used as an exercise in recursion).
/// <br>
/// The sequence is sometimes extended into negative numbers by using a straightforward inverse of the positive definition:
/// <br>
///       <big><big> F<sub>n</sub> = F<sub>n+2</sub> - F<sub>n+1</sub>, if n<0   </big></big>
/// <br>
/// support for negative &nbsp; &nbsp; <big> n </big> &nbsp; &nbsp; in the solution is optional.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Fibonacci n-step number sequences‎" title="Fibonacci n-step number sequences‎">Fibonacci n-step number sequences‎</a></li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Leonardo numbers" title="Leonardo numbers">Leonardo numbers</a></li></ul>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">References:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Fibonacci number" title="wp: Fibonacci number">Wikipedia, Fibonacci number</a></li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Lucas number" title="wp: Lucas number">Wikipedia, Lucas number</a></li>
/// <li class="rosetta__list-item--unordered">&nbsp; [http://mathworld.wolfram.com/FibonacciNumber.html MathWorld, Fibonacci Number]</li>
/// <li class="rosetta__list-item--unordered">&nbsp; [http://www.math-cs.ucmo.edu/~curtisc/articles/howardcooper/genfib4.pdf Some identities for r-Fibonacci numbers]</li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/oeis:A000045" title="oeis:A000045">OEIS Fibonacci numbers</a></li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/oeis:A000032" title="oeis:A000032">OEIS Lucas numbers</a></li></ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function fib(n) {
  return function(n,a,b) {
    return n>0 ? arguments.callee(n-1,b,a+b) : a;
  }(n,0,1);
}

/// rawSolutions:
=={{header|JavaScript}}==
===ES5===
====Recursive====
One possibility familiar to Scheme programmers is to define an internal function for iteration through anonymous tail recursion:
<lang javascript>function fib(n) {
  return function(n,a,b) {
    return n>0 ? arguments.callee(n-1,b,a+b) : a;
  }(n,0,1);
}</lang>
===Iterative===
<lang javascript>function fib(n) {
  var a = 0, b = 1, t;
  while (n-- > 0) {
    t = a;
    a = b;
    b += t;
    console.log(a);
  }
  return a;
}</lang>

====Memoization====

With the keys of a dictionary,

<lang javascript>var fib = (function(cache){
    return cache = cache || {}, function(n){
        if (cache[n]) return cache[n];
        else return cache[n] = n == 0 ? 0 : n < 0 ? -fib(-n)
            : n <= 2 ? 1 : fib(n-2) + fib(n-1);
    };
})();
</lang>

with the indices of an array,

<lang javascript>(function () {
    'use strict';

    function fib(n) {
        return Array.apply(null, Array(n + 1))
            .map(function (_, i, lst) {
                return lst[i] = (
                    i ? i < 2 ? 1 :
                    lst[i - 2] + lst[i - 1] :
                    0
                );
            })[n];
    }

    return fib(32);

})();</lang>



{{Out}}
<pre>2178309</pre>

====Y-Combinator====
<lang javascript>function Y(dn) {
    return (function(fn) {
        return fn(fn);
    }(function(fn) {
        return dn(function() {
            return fn(fn).apply(null, arguments);
        });
    }));
}
var fib = Y(function(fn) {
    return function(n) {
        if (n === 0 || n === 1) {
            return n;
        }
        return fn(n - 1) + fn(n - 2);
    };
});</lang>

====Generators====
<lang javascript>function* fibonacciGenerator() {
    var prev = 0;
    var curr = 1;
    while (true) {
        yield curr;
        curr = curr + prev;
        prev = curr - prev;
    }
}
var fib = fibonacciGenerator();</lang>

===ES6===

====Memoized====

If we want access to the whole preceding series, as well as a memoized route to a particular member, 
we can use an accumulating fold.

<lang JavaScript>(() => {
    'use strict';

    // Nth member of fibonacci series

    // fib :: Int -> Int
    function fib(n) {
        return mapAccumL(([a, b]) => [
            [b, a + b], b
        ], [0, 1], range(1, n))[0][0];
    };

    // GENERIC FUNCTIONS

    // mapAccumL :: (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])
    let mapAccumL = (f, acc, xs) => {
        return xs.reduce((a, x) => {
            let pair = f(a[0], x);

            return [pair[0], a[1].concat(pair[1])];
        }, [acc, []]);
    }

    // range :: Int -> Int -> Maybe Int -> [Int]
    let range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);


    // TEST
    return fib(32);

    // --> 2178309
})();</lang>

Otherwise, a simple fold will suffice.

{{Trans|Haskell}} (Memoized fold example)

<lang JavaScript>(() => {
    'use strict';

    // fib :: Int -> Int
    let fib = n => range(1, n)
        .reduce(([a, b]) => [b, a + b], [0, 1])[0];


    // GENERIC [m..n]

    // range :: Int -> Int -> [Int]
    let range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);


    // TEST
    return fib(32);

    // --> 2178309
})();</lang>

{{Out}}
<pre>2178309</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
