
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Floyd-Warshall algorithm
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// The <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm" title="wp: Floyd–Warshall_algorithm">Floyd–Warshall algorithm</a> is an algorithm for finding shortest paths in a weighted graph with positive or negative edge weights.
/// <br><br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task</dt></dl>
/// Find the lengths of the shortest paths between all pairs of vertices of the given directed graph. Your code may assume that the input has already been checked for loops, parallel edges and negative cycles.
/// <br>
/// [[File:Floyd_warshall_graph.gif]]
/// <br>
/// Print the pair, the distance and (optionally) the path. 
/// <br><br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Example</dt></dl>
/// <pre>pair     dist    path
/// 1 -> 2    -1     1 -> 3 -> 4 -> 2
/// 1 -> 3    -2     1 -> 3
/// 1 -> 4     0     1 -> 3 -> 4
/// 2 -> 1     4     2 -> 1
/// 2 -> 3     2     2 -> 1 -> 3
/// 2 -> 4     4     2 -> 1 -> 3 -> 4
/// 3 -> 1     5     3 -> 4 -> 2 -> 1
/// 3 -> 2     1     3 -> 4 -> 2
/// 3 -> 4     2     3 -> 4
/// 4 -> 1     3     4 -> 2 -> 1
/// 4 -> 2    -1     4 -> 2
/// 4 -> 3     1     4 -> 2 -> 1 -> 3</pre>
/// <br><br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">See also</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">[https://www.youtube.com/watch?v=8WSZQwNtXPU Floyd-Warshall Algorithm - step by step guide (youtube)]</li>
/// <br>
/// </ul><br><br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var graph = [];
for (i = 0; i < 10; ++i) {
  graph.push([]);
  for (j = 0; j < 10; ++j)
    graph[i].push(i == j ? 0 : 9999999);
}

for (i = 1; i < 10; ++i) {
  graph[0][i] = graph[i][0] = parseInt(Math.random() * 9 + 1);
}

for (k = 0; k < 10; ++k) {
  for (i = 0; i < 10; ++i) {
    for (j = 0; j < 10; ++j) {
      if (graph[i][j] > graph[i][k] + graph[k][j])
        graph[i][j] = graph[i][k] + graph[k][j]
    }
  }
}

console.log(graph);

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>var graph = [];
for (i = 0; i < 10; ++i) {
  graph.push([]);
  for (j = 0; j < 10; ++j)
    graph[i].push(i == j ? 0 : 9999999);
}

for (i = 1; i < 10; ++i) {
  graph[0][i] = graph[i][0] = parseInt(Math.random() * 9 + 1);
}

for (k = 0; k < 10; ++k) {
  for (i = 0; i < 10; ++i) {
    for (j = 0; j < 10; ++j) {
      if (graph[i][j] > graph[i][k] + graph[k][j])
        graph[i][j] = graph[i][k] + graph[k][j]
    }
  }
}

console.log(graph);</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
