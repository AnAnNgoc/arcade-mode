First-class functions

{{task|Programming language concepts}}

A language has <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/First-class function" title="wp: First-class function">first-class functions]] if it can do each of the following without recursively invoking a compiler or interpreter or otherwise [[metaprogramming</a>:

* Create new functions from preexisting functions at run-time
* Store functions in collections
* Use functions as arguments to other functions
* Use functions as return values of other functions


<br>
;Task:
Write a program to create an ordered collection <span class="rosetta__text--italic">A</span> of functions of a real number. At least one function should be built-in and at least one should be user-defined; try using the sine, cosine, and cubing functions. Fill another collection <span class="rosetta__text--italic">B</span> with the inverse of each function in <span class="rosetta__text--italic">A</span>. Implement function composition as in [[Functional Composition]]. Finally, demonstrate that the result of applying the composition of each function in <span class="rosetta__text--italic">A</span> and its inverse in <span class="rosetta__text--italic">B</span> to a value, is the original value. <small>(Within the limits of computational accuracy)</small>.

(A solution need not actually call the collections "A" and "B". These names are only used in the preceding paragraph for clarity.)
 

;Related task: 
[[First-class Numbers]]
<br><br>


=={{header|JavaScript}}==
===ES5===
<lang javascript>// Functions as values of a variable
var cube = function (x) {
  return Math.pow(x, 3);
};
var cuberoot = function (x) {
  return Math.pow(x, 1 / 3);
};

// Higher order function
var compose = function (f, g) {
  return function (x) {
    return f(g(x));
  };
};

// Storing functions in a array
var fun = [Math.sin, Math.cos, cube];
var inv = [Math.asin, Math.acos, cuberoot];

for (var i = 0; i < 3; i++) {
  // Applying the composition to 0.5
  console.log(compose(inv[i], fun[i])(0.5));
}</lang>

===ES6===
<lang javascript>// Functions as values of a variable
var cube = x => Math.pow(x, 3);

var cuberoot = x => Math.pow(x, 1 / 3);


// Higher order function
var compose = (f, g) => (x => f(g(x)));

// Storing functions in a array
var fun = [ Math.sin, Math.cos, cube ];
var inv = [ Math.asin, Math.acos, cuberoot ];

for (var i = 0; i < 3; i++) {
  // Applying the composition to 0.5
  console.log(compose(inv[i], fun[i])(0.5));
}</lang>


Result is always: 
<pre>0.5
0.4999999999999999
0.5</pre>

