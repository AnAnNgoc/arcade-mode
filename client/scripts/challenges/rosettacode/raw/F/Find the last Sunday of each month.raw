
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Find the last Sunday of each month
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
///   [[Category:Date and time]]
/// Write a program or a script that returns the last Sundays of each month of a given year. The year may be given through any simple input method in your language (command line, std in, etc).
/// <br>
/// Example of an expected output:
/// <br>
/// <pre>./last_sundays 2013
/// 2013-01-27
/// 2013-02-24
/// 2013-03-31
/// 2013-04-28
/// 2013-05-26
/// 2013-06-30
/// 2013-07-28
/// 2013-08-25
/// 2013-09-29
/// 2013-10-27
/// 2013-11-24
/// 2013-12-29</pre>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">[[Day of the week]]</li>
/// <li class="rosetta__list-item">[[Five weekends]]</li>
/// <li class="rosetta__list-item">[[Last Friday of each month]]</li>
/// <br>
/// </ul><br><br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function lastSundayOfEachMonths(year) {
	var lastDay = [31,28,31,30,31,30,31,31,30,31,30,31]
	if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) lastDay[2] = 29
	for (var date = new Date(), month=0; month<12; month+=1) {
		date.setFullYear(year, month, lastDay[month])
		date.setDate(date.getDate()-date.getDay())
		document.write(date.toISOString().substring(0,10), '<br>')
	}   
}
	
lastSundayOfEachMonths(2013)

/// rawSolutions:
=={{header|JavaScript}}==
===ES5===
====Iteration====
<lang javascript>function lastSundayOfEachMonths(year) {
	var lastDay = [31,28,31,30,31,30,31,31,30,31,30,31]
	if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) lastDay[2] = 29
	for (var date = new Date(), month=0; month<12; month+=1) {
		date.setFullYear(year, month, lastDay[month])
		date.setDate(date.getDate()-date.getDay())
		document.write(date.toISOString().substring(0,10), '<br>')
	}   
}
	
lastSundayOfEachMonths(2013)</lang>
{{output}}
<pre>2013-01-27
2013-02-24
2013-03-31
2013-04-28
2013-05-26
2013-06-30
2013-07-28
2013-08-25
2013-09-29
2013-10-27
2013-11-24
2013-12-29</pre>

====Functional composition====
<lang JavaScript>(function () {
    'use strict';

    // lastSundaysOfYear :: Int -> [Date]
    function lastSundaysOfYear(y) {
        return lastWeekDaysOfYear(y, days.sunday);
    }

    // lastWeekDaysOfYear :: Int -> Int -> [Date]
    function lastWeekDaysOfYear(y, iWeekDay) {
        return [
                31,
                0 === y % 4 && 0 !== y % 100 || 0 === y % 400 ? 29 : 28,
                31, 30, 31, 30, 31, 31, 30, 31, 30, 31
            ]
            .map(function (d, m) {
                var dte = new Date(Date.UTC(y, m, d));

                return new Date(Date.UTC(
                    y, m, d - (
                        (dte.getDay() + (7 - iWeekDay)) % 7
                    )
                ));
            });
    }

    // isoDateString :: Date -> String
    function isoDateString(dte) {
        return dte.toISOString()
            .substr(0, 10);
    }

    // range :: Int -> Int -> [Int]
    function range(m, n) {
        return Array.apply(null, Array(n - m + 1))
            .map(function (x, i) {
                return m + i;
            });
    }

    // transpose :: [[a]] -> [[a]]
    function transpose(lst) {
        return lst[0].map(function (_, iCol) {
            return lst.map(function (row) {
                return row[iCol];
            });
        });
    }

    var days = {
        sunday: 0,
        monday: 1,
        tuesday: 2,
        wednesday: 3,
        thursday: 4,
        friday: 5,
        saturday: 6
    }

    // TEST

    return transpose(
            range(2012, 2016)
            .map(lastSundaysOfYear)
        )
        .map(function (row) {
            return row
                .map(isoDateString)
                .join('\t');
        })
        .join('\n');

})();</lang>

{{Out}}
<pre>2013-01-27	2014-01-26	2015-01-25	2016-01-31	2017-01-29
2013-02-24	2014-02-23	2015-02-22	2016-02-28	2017-02-26
2013-03-31	2014-03-30	2015-03-29	2016-03-27	2017-03-26
2013-04-28	2014-04-27	2015-04-26	2016-04-24	2017-04-30
2013-05-26	2014-05-25	2015-05-31	2016-05-29	2017-05-28
2013-06-30	2014-06-29	2015-06-28	2016-06-26	2017-06-25
2013-07-28	2014-07-27	2015-07-26	2016-07-31	2017-07-30
2013-08-25	2014-08-31	2015-08-30	2016-08-28	2017-08-27
2013-09-29	2014-09-28	2015-09-27	2016-09-25	2017-09-24
2013-10-27	2014-10-26	2015-10-25	2016-10-30	2017-10-29
2013-11-24	2014-11-30	2015-11-29	2016-11-27	2017-11-26
2013-12-29	2014-12-28	2015-12-27	2016-12-25	2017-12-31</pre>

===ES6===
<lang JavaScript>(() => {
    'use strict'

    // lastWeekDaysOfYear :: Int -> Int -> [Date]
    const lastWeekDaysOfYear = (iWeekDay, y) => [
            31,
            0 === y % 4 && 0 !== y % 100 || 0 === y % 400 ? 29 : 28,
            31, 30, 31, 30, 31, 31, 30, 31, 30, 31
        ]
        .map((d, m) =>
            new Date(Date.UTC(
                y, m, d - ((new Date(Date.UTC(y, m, d))
                    .getDay() + (7 - iWeekDay)) % 7))));

    const days = {
        sunday: 0,
        monday: 1,
        tuesday: 2,
        wednesday: 3,
        thursday: 4,
        friday: 5,
        saturday: 6
    };

    // GENERIC FUNCTIONS

    // curry :: ((a, b) -> c) -> a -> b -> c
    const curry = f => a => b => f(a, b);

    // isoDateString :: Date -> String
    const isoDateString = dte =>
        dte.toISOString()
        .substr(0, 10);

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // transpose :: [[a]] -> [[a]]
    const transpose = lst =>
        lst[0].map((_, iCol) =>
            lst.map(row => row[iCol]));

    // TEST
    return transpose(
            range(2015, 2019)
            .map(curry(lastWeekDaysOfYear)(days.sunday))
        )
        .map(row => row
            .map(isoDateString)
            .join('\t'))
        .join('\n');
})();</lang>
{{Out}}
<pre>2015-01-25    2016-01-31    2017-01-29    2018-01-28    2019-01-27
2015-02-22    2016-02-28    2017-02-26    2018-02-25    2019-02-24
2015-03-29    2016-03-27    2017-03-26    2018-03-25    2019-03-31
2015-04-26    2016-04-24    2017-04-30    2018-04-29    2019-04-28
2015-05-31    2016-05-29    2017-05-28    2018-05-27    2019-05-26
2015-06-28    2016-06-26    2017-06-25    2018-06-24    2019-06-30
2015-07-26    2016-07-31    2017-07-30    2018-07-29    2019-07-28
2015-08-30    2016-08-28    2017-08-27    2018-08-26    2019-08-25
2015-09-27    2016-09-25    2017-09-24    2018-09-30    2019-09-29
2015-10-25    2016-10-30    2017-10-29    2018-10-28    2019-10-27
2015-11-29    2016-11-27    2017-11-26    2018-11-25    2019-11-24
2015-12-27    2016-12-25    2017-12-31    2018-12-30    2019-12-29</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
