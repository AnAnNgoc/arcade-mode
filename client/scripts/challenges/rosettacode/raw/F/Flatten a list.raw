Flatten a list

{{task}}

;Task:
Write a function to flatten the nesting in an arbitrary &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/List (computing)" title="wp: List (computing)">list</a> of values. 


Your program should work on the equivalent of this list:
   [[1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []]
Where the correct result would be the list:
    [1, 2, 3, 4, 5, 6, 7, 8]


;Related task:
* &nbsp; [[Tree traversal]]
<br><br>


=={{header|JavaScript}}==
===ES5===
<lang javascript>function flatten(list) {
  return list.reduce(function (acc, val) {
    return acc.concat(val.constructor === Array ? flatten(val) : val);
  }, []);
}</lang>


Or, expressed in terms of the more generic '''concatMap''' function:

<lang JavaScript>(function () {
    'use strict';

    // flatten :: Tree a -> [a]
    function flatten(t) {
        return (t instanceof Array ? concatMap(flatten, t) : t);
    }

    // concatMap :: (a -> [b]) -> [a] -> [b]
    function concatMap(f, xs) {
        return [].concat.apply([], xs.map(f));
    }

    return flatten(
        [[1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []]
    );

})();</lang>


From fusion of ''flatten'' with ''concatMap'' we can then derive:

<lang JavaScript>    // flatten :: Tree a -> [a]
    function flatten(a) {
        return a instanceof Array ? [].concat.apply([], a.map(flatten)) : a;
    }</lang>

For example:

<lang JavaScript>(function () {
    'use strict';

    // flatten :: Tree a -> [a]
    function flatten(a) {
        return a instanceof Array ? [].concat.apply([], a.map(flatten)) : a;
    }

    return flatten(
        [[1], 2, [[3, 4], 5], [[[]]], [[[6]]], 7, 8, []]
    );

})();</lang>

{{Out}}

<pre>[1, 2, 3, 4, 5, 6, 7, 8]</pre>

===ES6===
====Recursive====
<lang javascript>let flatten = list => list.reduce(
    (a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []
);</lang>

====Iterative====
<lang javascript>function flatten(list) {
  for (let i = 0; i < list.length; i++) {
    while (true) {
      if (Array.isArray(list[i])) {
      	list.splice(i, 1, ...list[i]);
      } else {
      	break;
      }
    }
  }
  return list;
}</lang>

Result is always: 
<pre>[1, 2, 3, 4, 5, 6, 7, 8]</pre>

