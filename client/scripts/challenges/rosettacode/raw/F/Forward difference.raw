Forward difference

{{task|Arithmetic operations}} 

;Task:
Provide code that produces a list of numbers which is the &nbsp; <big>n<sup>th</sup></big> &nbsp;order forward difference, given a non-negative integer (specifying the order) and a list of numbers. 


The first-order forward difference of a list of numbers &nbsp; <big>'''A'''</big> &nbsp; is a new list &nbsp; <big>'''B'''</big>, &nbsp; where &nbsp; <big><b>B</b><sub>n</sub> = <b>A</b><sub>n+1</sub> - <b>A</b><sub>n</sub></big>. 

List &nbsp; <big>'''B'''</big> &nbsp; should have one fewer element as a result. 

The second-order forward difference of &nbsp; <big>'''A'''</big> &nbsp; will be:
<pre>
tdefmodule Diff do
	def forward(arr,i\\1) do
		forward(arr,[],i)
	end

	def forward([_|[]],diffs,i) do
		if i == 1 do
			IO.inspect diffs
		else 
			forward(diffs,[],i-1)
		end
	end

	def forward([val1|[val2|vals]],diffs,i) do
		forward([val2|vals],diffs++[val2-val1],i) 
	end
end 
</pre>
The same as the first-order forward difference of &nbsp; <big>'''B'''</big>. 

That new list will have two fewer elements than &nbsp; <big>'''A'''</big> &nbsp; and one less than &nbsp; <big>'''B'''</big>. 

The goal of this task is to repeat this process up to the desired order.

For a more formal description, see the related &nbsp; [http://mathworld.wolfram.com/ForwardDifference.html Mathworld article].


;Algorithmic options:
* Iterate through all previous forward differences and re-calculate a new array each time.
* Use this formula (from [[wp:Forward difference|Wikipedia]]):
<big><big>
::: <math>\Delta^n [f](x)= \sum_{k=0}^n {n \choose k} (-1)^{n-k} f(x+k)</math>
</big></big>
::: ([[Pascal's Triangle]] &nbsp; may be useful for this option.)
<br><br>


=={{header|JavaScript}}==

===ES6===

<lang JavaScript>(() => {
    'use strict';

    // forwardDifference :: [Int] -> [Int]
    const forwardDifference = (n, xs) => {
        const fd = xs => zipWith((a, b) => a - b, tail(xs), xs);
        return until(
                m => m.index < 1,
                m => ({
                    index: m.index - 1,
                    list: fd(m.list)
                }), {
                    index: n,
                    list: xs
                }
            )
            .list;
    };


    // GENERIC FUNCTIONS ---------------------------------------

    // zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
    const zipWith = (f, xs, ys) => {
        const ny = ys.length;
        return (xs.length <= ny ? xs : xs.slice(0, ny))
            .map((x, i) => f(x, ys[i]));
    };

    // until :: (a -> Bool) -> (a -> a) -> a -> a
    const until = (p, f, x) => {
        const go = x => p(x) ? x : go(f(x));
        return go(x);
    };

    // tail :: [a] -> [a]
    const tail = xs => xs.length ? xs.slice(1) : undefined;


    // TEST ----------------------------------------------------

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // show :: a -> String
    const show = x => JSON.stringify(x);

    // Sample
    const test = [90, 47, 58, 29, 22, 32, 55, 5, 55, 73];

    return range(1, 9)
        .map(x => `${x}    ${show(forwardDifference(x, test))}`)
        .join('\n');
})();</lang>

{{Out}}
<pre>1    [-43,11,-29,-7,10,23,-50,50,18]
2    [54,-40,22,17,13,-73,100,-32]
3    [-94,62,-5,-4,-86,173,-132]
4    [156,-67,1,-82,259,-305]
5    [-223,68,-83,341,-564]
6    [291,-151,424,-905]
7    [-442,575,-1329]
8    [1017,-1904]
9    [-2921]</pre>

