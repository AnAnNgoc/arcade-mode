
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: 24 game
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// The <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/24 Game" title="wp: 24 Game">24 Game</a> tests one's mental arithmetic. 
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task</dt></dl>
/// Write a program that <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task feature::Rosetta Code:randomness" title="task feature::Rosetta Code:randomness">randomly</a> chooses and <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task feature::Rosetta Code:user output" title="task feature::Rosetta Code:user output">displays</a> four digits, each from 1 ──► 9 (inclusive) with repetitions allowed.
/// <br>
/// The program should prompt for the player to enter an arithmetic expression using <span class="rosetta__text--italic">just</span> those, and <span class="rosetta__text--italic">all</span> of those four digits, used exactly <span class="rosetta__text--italic">once</span> each. The program should <span class="rosetta__text--italic">check</span> then <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task feature::Rosetta Code:parsing" title="task feature::Rosetta Code:parsing">evaluate the expression</a>. 
/// <br>
/// The goal is for the player to <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/task feature::Rosetta Code:user input" title="task feature::Rosetta Code:user input">enter</a> an expression that (numerically) evaluates to <span class="rosetta__text--bold">24</span>.
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item"> Only the following operators/functions are allowed: multiplication, division, addition, subtraction</li>
/// <li class="rosetta__list-item"> Division should use floating point or rational arithmetic, etc, to preserve remainders.</li>
/// <li class="rosetta__list-item"> Brackets are allowed, if using an infix expression evaluator.</li>
/// <li class="rosetta__list-item"> Forming multiple digit numbers from the supplied digits is <span class="rosetta__text--italic">disallowed</span>. (So an answer of 12+12 when given 1, 2, 2, and 1 is wrong).</li>
/// <li class="rosetta__list-item"> The order of the digits when given does not have to be preserved.</li>
/// <br>
/// </ul>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Notes</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">The type of expression evaluator used is not mandated. An <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Reverse Polish notation" title="wp: Reverse Polish notation">RPN</a> evaluator is equally acceptable for example.</li>
/// <li class="rosetta__list-item">The task is not for the program to generate the expression, or test whether an expression is even possible.</li>
/// <br>
/// </ul>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">[[24 game/Solve]]</li>
/// <br>
/// </ul>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Reference</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">[http://www.bbc.co.uk/dna/h2g2/A933121 The 24 Game] on h2g2.</li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:

function twentyfour(numbers, input) {
    var invalidChars = /[^\d\+\*\/\s-\(\)]/;

    var validNums = function(str) {
        // Create a duplicate of our input numbers, so that
        // both lists will be sorted.
        var mnums = numbers.slice();
        mnums.sort();

        // Sort after mapping to numbers, to make comparisons valid.
        return str.replace(/[^\d\s]/g, " ")
            .trim()
            .split(/\s+/)
            .map(function(n) { return parseInt(n, 10); })
            .sort()
            .every(function(v, i) { return v === mnums[i]; });
    };

    var validEval = function(input) {
        try {
            return eval(input);
        } catch (e) {
            return {error: e.toString()};
        }
    };

    if (input.trim() === "") return "You must enter a value.";
    if (input.match(invalidChars)) return "Invalid chars used, try again. Use only:\n + - * / ( )";
    if (!validNums(input)) return "Wrong numbers used, try again.";
    var calc = validEval(input);
    if (typeof calc !== 'number') return "That is not a valid input; please try again.";
    if (calc !== 24) return "Wrong answer: " + String(calc) + "; please try again.";
    return input + " == 24.  Congratulations!";
};

// I/O below.

while (true) {
    var numbers = [1, 2, 3, 4].map(function() {
        return Math.floor(Math.random() * 8 + 1);
    });

    var input = prompt(
        "Your numbers are:\n" + numbers.join(" ") +
        "\nEnter expression. (use only + - * / and parens).\n", +"'x' to exit.", "");

    if (input === 'x') {
        break;
    }
    alert(twentyfour(numbers, input));
}


/// rawSolutions:
=={{header|JavaScript}}==

<lang javascript>
function twentyfour(numbers, input) {
    var invalidChars = /[^\d\+\*\/\s-\(\)]/;

    var validNums = function(str) {
        // Create a duplicate of our input numbers, so that
        // both lists will be sorted.
        var mnums = numbers.slice();
        mnums.sort();

        // Sort after mapping to numbers, to make comparisons valid.
        return str.replace(/[^\d\s]/g, " ")
            .trim()
            .split(/\s+/)
            .map(function(n) { return parseInt(n, 10); })
            .sort()
            .every(function(v, i) { return v === mnums[i]; });
    };

    var validEval = function(input) {
        try {
            return eval(input);
        } catch (e) {
            return {error: e.toString()};
        }
    };

    if (input.trim() === "") return "You must enter a value.";
    if (input.match(invalidChars)) return "Invalid chars used, try again. Use only:\n + - * / ( )";
    if (!validNums(input)) return "Wrong numbers used, try again.";
    var calc = validEval(input);
    if (typeof calc !== 'number') return "That is not a valid input; please try again.";
    if (calc !== 24) return "Wrong answer: " + String(calc) + "; please try again.";
    return input + " == 24.  Congratulations!";
};

// I/O below.

while (true) {
    var numbers = [1, 2, 3, 4].map(function() {
        return Math.floor(Math.random() * 8 + 1);
    });

    var input = prompt(
        "Your numbers are:\n" + numbers.join(" ") +
        "\nEnter expression. (use only + - * / and parens).\n", +"'x' to exit.", "");

    if (input === 'x') {
        break;
    }
    alert(twentyfour(numbers, input));
}
</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
