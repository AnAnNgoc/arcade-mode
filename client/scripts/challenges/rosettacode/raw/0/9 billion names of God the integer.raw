
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: 9 billion names of God the integer
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">This task is a variation of the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/The Nine Billion Names of God#Plot_summary" title="wp: The Nine Billion Names of God#Plot_summary">short story by Arthur C. Clarke</a>.</p><br/><p class="rosetta__paragraph">(Solvers should be aware of the consequences of completing this task.)</p><br/><p class="rosetta__paragraph">In detail, to specify what is meant by a  “name”:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">The integer 1 has 1 name     “1”.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">The integer 2 has 2 names  “1+1”,  and  “2”.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">The integer 3 has 3 names  “1+1+1”,  “2+1”,  and  “3”.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">The integer 4 has 5 names  “1+1+1+1”,  “2+1+1”,  “2+2”,  “3+1”,  “4”.</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">The integer 5 has 7 names  “1+1+1+1+1”,  “2+1+1+1”,  “2+2+1”,  “3+1+1”,  “3+2”,  “4+1”,  “5”.</span></p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task</dt></dl>
/// <p class="rosetta__paragraph">Display the first 25 rows of a number triangle which begins:</p>
/// <div class="rosetta__pre-wrap"><pre class="rosetta__pre">
///                                       1
///                                     1   1
///                                   1   1   1 
///                                 1   2   1   1
///                               1   2   2   1   1
///                             1   3   3   2   1   1
/// </pre></div><br/><p class="rosetta__paragraph">Where row  $n$  corresponds to integer  $n$,  and each column  $C$  in row  $m$  from left to right corresponds to the number of names beginning with  $C$.</p><br/><p class="rosetta__paragraph">A function  $G(n)$  should return the sum of the  $n$-th  row.</p><br/><p class="rosetta__paragraph">Demonstrate this function by displaying:  $G(23)$,  $G(123)$,  $G(1234)$,  and  $G(12345)$.</p><br/><p class="rosetta__paragraph">Optionally note that the sum of the  $n$-th  row  $P(n)$  is the   <a class="rosetta__link--wiki" href="http://mathworld.wolfram.com/PartitionFunctionP.html" title="link: http://mathworld.wolfram.com/PartitionFunctionP.html">integer partition function</a>.</p><br/><p class="rosetta__paragraph">Demonstrate this is equivalent to  $G(n)$  by displaying:  $P(23)$,  $P(123)$,  $P(1234)$,  and  $P(12345)$.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Extra credit</dt></dl><br/><p class="rosetta__paragraph">If your environment is able, plot  $P(n)$  against  $n$  for  $n=1\ldots 999$.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:

(function () {
    var cache = [
        [1]
    ];
//this was never needed.
   /* function PyRange(start, end, step) {
        step = step || 1;
        if (!end) {
            end = start;
            start = 0;
        }
        var arr = [];
        for (var i = start; i < end; i += step) arr.push(i);
        return arr;
    }*/ 

    function cumu(n) {
        var /*ra = PyRange(cache.length, n + 1),*/ //Seems there is a better version for this
            r, l, x, Aa, Mi;
       // for (ll in ra) { too pythony
       for (l=cache.length;l<n+1;l++) {
            r = [0];
//            l = ra[ll];
//            ran = PyRange(1, l + 1);
//            for (xx in ran) {
            for(x=1;x<l+1;x++){
//                x = ran[xx];
                r.push(r[r.length - 1] + (Aa = cache[l - x < 0 ? cache.length - (l - x) : l - x])[(Mi = Math.min(x, l - x)) < 0 ? Aa.length - Mi : Mi]);
            }
            cache.push(r);
        }
        return cache[n];
    }

    function row(n) {
        var r = cumu(n),
//            rra = PyRange(n),
            leArray = [],
            i;
//        for (ii in rra) {
        for (i=0;i<n;i++) {
//            i = rra[ii];
            leArray.push(r[i + 1] - r[i]);
        }
        return leArray;
    }

    console.log("Rows:");
    for (iterator = 1; iterator < 12; iterator++) {
        console.log(row(iterator));
    }

    console.log("Sums")[23, 123, 1234, 12345].foreach(function (a) {
        var s = cumu(a);
        console.log(a, s[s.length - 1]);
    });
})()


/// rawSolutions:
=={{header|JavaScript}}==
{{trans|Python}}
<lang JavaScript>
(function () {
    var cache = [
        [1]
    ];
//this was never needed.
   /* function PyRange(start, end, step) {
        step = step || 1;
        if (!end) {
            end = start;
            start = 0;
        }
        var arr = [];
        for (var i = start; i < end; i += step) arr.push(i);
        return arr;
    }*/ 

    function cumu(n) {
        var /*ra = PyRange(cache.length, n + 1),*/ //Seems there is a better version for this
            r, l, x, Aa, Mi;
       // for (ll in ra) { too pythony
       for (l=cache.length;l<n+1;l++) {
            r = [0];
//            l = ra[ll];
//            ran = PyRange(1, l + 1);
//            for (xx in ran) {
            for(x=1;x<l+1;x++){
//                x = ran[xx];
                r.push(r[r.length - 1] + (Aa = cache[l - x < 0 ? cache.length - (l - x) : l - x])[(Mi = Math.min(x, l - x)) < 0 ? Aa.length - Mi : Mi]);
            }
            cache.push(r);
        }
        return cache[n];
    }

    function row(n) {
        var r = cumu(n),
//            rra = PyRange(n),
            leArray = [],
            i;
//        for (ii in rra) {
        for (i=0;i<n;i++) {
//            i = rra[ii];
            leArray.push(r[i + 1] - r[i]);
        }
        return leArray;
    }

    console.log("Rows:");
    for (iterator = 1; iterator < 12; iterator++) {
        console.log(row(iterator));
    }

    console.log("Sums")[23, 123, 1234, 12345].foreach(function (a) {
        var s = cumu(a);
        console.log(a, s[s.length - 1]);
    });
})()
</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
