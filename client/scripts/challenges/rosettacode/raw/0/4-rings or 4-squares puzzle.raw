4-rings or 4-squares puzzle

[[Category:Games]]
[[Category:Puzzles]]
{{task}}
<!--  Squares were chosen as it's much easier to display squares instead of rings.  !-->

;Task:
Replace &nbsp; &nbsp; &nbsp; <span class="rosetta__text--bold">a, b, c, d, e, f,</span> &nbsp; and
&nbsp; <span class="rosetta__text--bold">g </span> &nbsp; &nbsp; &nbsp; with the decimal
digits &nbsp; LOW &nbsp; ───► &nbsp; HIGH
<br>such that the sum of the letters inside of each of the four large squares add up to
the same sum.

<pre>
            ╔══════════════╗      ╔══════════════╗
            ║              ║      ║              ║
            ║      a       ║      ║      e       ║
            ║              ║      ║              ║
            ║          ┌───╫──────╫───┐      ┌───╫─────────┐
            ║          │   ║      ║   │      │   ║         │
            ║          │ b ║      ║ d │      │ f ║         │
            ║          │   ║      ║   │      │   ║         │
            ║          │   ║      ║   │      │   ║         │
            ╚══════════╪═══╝      ╚═══╪══════╪═══╝         │
                       │       c      │      │      g      │
                       │              │      │             │
                       │              │      │             │
                       └──────────────┘      └─────────────┘
</pre>

Show all output here.


:* &nbsp; Show all solutions for each letter being unique with
         LOW=1     HIGH=7
:* &nbsp; Show all solutions for each letter being unique with
         LOW=3     HIGH=9
:* &nbsp; Show only the &nbsp; <span class="rosetta__text--italic">number</span> &nbsp; of solutions when each letter can be non-unique
         LOW=0     HIGH=9


;Related task:
* [[Solve the no connection puzzle]]
<br><br>


=={{header|JavaScript}}==
===ES6===
{{Trans|Haskell}} (Structured search version)
<lang javascript>(() => {

    // RINGS -------------------------------------------------------------------

    // rings :: noRepeatedDigits -> DigitList -> Lists of solutions
    // rings :: Bool -> [Int] -> [[Int]]
    const rings = (u, digits) => {
        const
            ds = sortBy(flip(compare), digits),
            h = head(ds);

        // QUEEN (i.e. middle digit of 7)---------------------------------------
        return concatMap(
            q => {
                const
                    ts = filter(x => (x + q) <= h, ds),
                    bs = u ? delete_(q, ts) : ds;

                // LEFT BISHOP (next to queen) AND ITS ROOK (leftmost digit)----
                return concatMap(
                    lb => {
                        const lRook = lb + q;
                        return lRook > h ? [] : (() => {
                            const rbs = u ? difference(ts, [q, lb, lRook]) : ds;

                            // RIGHT BISHOP AND ITS ROOK -----------------------
                            return concatMap(rb => {
                                const rRook = q + rb;
                                return ((rRook > h) || (u && (rRook === lb))) ? (
                                    []
                                ) : (() => {
                                    const
                                        rookDelta = lRook - rRook,
                                        ks = u ? difference(
                                            ds, [q, lb, rb, rRook, lRook]
                                        ) : ds;

                                    // KNIGHTS LEFT AND RIGHT ------------------
                                    return concatMap(k => {
                                        const k2 = k + rookDelta;
                                        return (elem(k2, ks) &&
                                            (!u || notElem(k2, [
                                                lRook, k, lb, q, rb, rRook
                                            ]))) ? (
                                            [
                                                [lRook, k, lb, q, rb, k2, rRook]
                                            ]
                                        ) : [];
                                    }, ks);
                                })();
                            }, rbs);
                        })();
                    },
                    bs
                );
            },
            ds
        );
    };

    // GENERIC FUNCTIONS ------------------------------------------------------

    // compare :: a -> a -> Ordering
    const compare = (a, b) => a < b ? -1 : (a > b ? 1 : 0);

    // concatMap :: (a -> [b]) -> [a] -> [b]
    const concatMap = (f, xs) => [].concat.apply([], xs.map(f));

    // delete_ :: Eq a => a -> [a] -> [a]
    const delete_ = (x, xs) =>
        xs.length > 0 ? (
            (x === xs[0]) ? (
                xs.slice(1)
            ) : [xs[0]].concat(delete_(x, xs.slice(1)))
        ) : [];

    //  (\\)  :: (Eq a) => [a] -> [a] -> [a]
    const difference = (xs, ys) =>
        ys.reduce((a, x) => delete_(x, a), xs);

    // elem :: Eq a => a -> [a] -> Bool
    const elem = (x, xs) => xs.indexOf(x) !== -1;

    // enumFromTo :: Int -> Int -> [Int]
    const enumFromTo = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // filter :: (a -> Bool) -> [a] -> [a]
    const filter = (f, xs) => xs.filter(f);

    // flip :: (a -> b -> c) -> b -> a -> c
    const flip = f => (a, b) => f.apply(null, [b, a]);

    // head :: [a] -> a
    const head = xs => xs.length ? xs[0] : undefined;

    // length :: [a] -> Int
    const length = xs => xs.length;

    // map :: (a -> b) -> [a] -> [b]
    const map = (f, xs) => xs.map(f);

    // notElem :: Eq a => a -> [a] -> Bool
    const notElem = (x, xs) => xs.indexOf(x) === -1;

    // show :: a -> String
    const show = x => JSON.stringify(x); //, null, 2);

    // sortBy :: (a -> a -> Ordering) -> [a] -> [a]
    const sortBy = (f, xs) => xs.sort(f);

    // unlines :: [String] -> String
    const unlines = xs => xs.join('\n');


    // TEST --------------------------------------------------------------------
    return unlines([
        'rings(true, enumFromTo(1,7))\n',
        unlines(map(show, rings(true, enumFromTo(1, 7)))),
        '\nrings(true, enumFromTo(3, 9))\n',
        unlines(map(show, rings(true, enumFromTo(3, 9)))),
        '\nlength(rings(false, enumFromTo(0, 9)))\n',
        length(rings(false, enumFromTo(0, 9)))
        .toString(),
        ''
    ]);
})();</lang>
{{Out}}
<pre>rings(true, enumFromTo(1,7))

[7,3,2,5,1,4,6]
[6,4,1,5,2,3,7]
[5,6,2,3,1,7,4]
[4,7,1,3,2,6,5]
[7,2,6,1,3,5,4]
[6,4,5,1,2,7,3]
[4,5,3,1,6,2,7]
[3,7,2,1,5,4,6]

rings(true, enumFromTo(3, 9))

[9,6,4,5,3,7,8]
[8,7,3,5,4,6,9]
[9,6,5,4,3,8,7]
[7,8,3,4,5,6,9]

length(rings(false, enumFromTo(0, 9)))

2860</pre>

