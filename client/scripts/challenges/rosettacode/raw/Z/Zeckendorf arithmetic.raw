
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Zeckendorf arithmetic
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// This task is a <span class="rosetta__text--italic">total immersion</span> zeckendorf task; using decimal numbers will attract serious disapprobation.
/// <br>
/// The task is to implement addition, subtraction, multiplication, and division using <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Zeckendorf number representation" title="Zeckendorf number representation">Zeckendorf number representation</a>. <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Zeckendorf number representation#Using_a_C.2B.2B11_User_Defined_Literal" title="Zeckendorf number representation#Using_a_C.2B.2B11_User_Defined_Literal">Optionally</a> provide decrement, increment and comparitive operation functions.
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Addition</dt></dl>
/// Like binary 1 + 1 = 10, note carry 1 left. There the similarity ends. 10 + 10 = 101, note carry 1 left and 1 right. 100 + 100 = 1001, note carry 1 left and 2 right, this is the general case. 
/// <br>
/// Occurrences of 11 must be changed to 100. Occurrences of 111 may be changed from the right by replacing 11 with 100, or from the left converting 111 to 100 + 100;
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Subtraction</dt></dl>
/// 10 - 1 = 1. The general rule is borrow 1 right carry 1 left. eg:
/// <pre>
///   abcde
///   10100 -
///    1000
///   _____
///     100  borrow 1 from a leaves 100
///   + 100  add the carry
///   _____
///    1001
/// </pre>
/// A larger example:
/// <pre>
///   abcdef
///   100100 -
///     1000
///   ______
///   1*0100 borrow 1 from b
///    + 100 add the carry
///   ______
///   1*1001
/// <br>
/// Sadly we borrowed 1 from b which didn't have it to lend. So now b borrows from a:
/// <br>
///     1001
///   + 1000 add the carry
///     ____
///    10100
/// </pre>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Multiplication</dt></dl>
/// Here you teach your computer its zeckendorf tables. eg. 101 * 1001:
/// <pre>
///   a = 1 * 101 = 101
///   b = 10 * 101 = a + a = 10000
///   c = 100 * 101 = b + a = 10101
///   d = 1000 * 101 = c + b = 101010
/// <br>
///   1001 = d + a therefore 101 * 1001 =
///  
///   101010
///    + 101
///   ______
///  1000100
/// </pre>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Division</dt></dl>
/// Lets try 1000101 divided by 101, so we can use the same table used for multiplication.
/// <pre>
///   1000101 -
///    101010 subtract d (1000 * 101)
///   _______
///      1000 -
///       101 b and c are too large to subtract, so subtract a
///      ____
///         1 so 1000101 divided by 101 is d + a (1001) remainder 1
/// </pre>
/// <br>
/// [http://arxiv.org/pdf/1207.4497.pdf Efficient algorithms for Zeckendorf arithmetic] is interesting. The sections on addition and subtraction are particularly relevant for this task.
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
