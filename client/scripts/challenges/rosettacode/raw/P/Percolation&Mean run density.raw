
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Percolation/Mean run density
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// Let $v$ be a vector of $n$ values of either <tt>1</tt> or <tt>0</tt> where the probability of any 
/// value being <tt>1</tt> is $p$; the probability of a value being <tt>0</tt> is therefore $1-p$. 
/// Define a run of <tt>1</tt>s as being a group of consecutive <tt>1</tt>s in the vector bounded 
/// either by the limits of the vector or by a <tt>0</tt>. Let the number of such runs in a given
/// vector of length $n$ be $R_n$.
/// <br>
/// For example, the following vector has $R_{10} = 3$
/// <pre>
/// [1 1 0 0 0 1 0 1 1 1]
///  ^^^       ^   ^^^^^
/// </pre>
/// Percolation theory states that 
/// <br>
/// <span class="rosetta__text--indented">$K(p) = \lim_{n\to\infty} R_n / n = p(1 - p)$</span>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task</dt></dl>
/// <br>
/// Any calculation of $R_n / n$ for finite $n$ is subject to randomness so should be 
/// computed as the average of $t$ runs, where $t \ge 100$.
/// <br>
/// For values of $p$ of 0.1, 0.3, 0.5, 0.7, and 0.9, show the effect of varying $n$
/// on the accuracy of simulated $K(p)$.
/// <br>
/// Show your output here.
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">See also</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">[http://mathworld.wolfram.com/s-Run.html s-Run] on Wolfram mathworld.</li></ul>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
