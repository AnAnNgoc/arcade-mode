
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Polymorphic copy
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// An object is <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/polymorphism" title="polymorphism">polymorphic</a> when its specific type may vary. 
/// The types a specific value may take, is called <span class="rosetta__text--italic">class</span>.
/// <br>
/// It is trivial to copy an object if its type is known:
/// <lang c>int x;
/// int y = x;</lang>
/// Here x is not polymorphic, so y is declared of same type (<span class="rosetta__text--italic">int</span>) as x. 
/// But if the specific type of x were unknown, then y could not be declared of any specific type.
/// <br>
/// The task: let a polymorphic object contain an instance of some specific type S derived from a type T. 
/// The type T is known. 
/// The type S is possibly unknown until <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/run time" title="run time"></a>. 
/// The objective is to create an exact copy of such polymorphic object (not to create a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/reference" title="reference"></a>, nor a pointer to). 
/// Let further the type T have a method overridden by S. 
/// This method is to be called on the copy to demonstrate that the specific type of the copy is indeed S.
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function clone(obj){
    if (obj == null || typeof(obj) != 'object')
        return obj;

    var temp = {};
    for (var key in obj)
        temp[key] = clone(obj[key]);
    return temp;
}

/// rawSolutions:
=={{header|JavaScript}}==
Copied from [http://keithdevens.com/weblog/archive/2007/Jun/07/javascript.clone here]:
<lang javascript>function clone(obj){
    if (obj == null || typeof(obj) != 'object')
        return obj;

    var temp = {};
    for (var key in obj)
        temp[key] = clone(obj[key]);
    return temp;
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
