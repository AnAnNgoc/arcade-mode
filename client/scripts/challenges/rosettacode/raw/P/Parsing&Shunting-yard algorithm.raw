
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Parsing/Shunting-yard algorithm
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Given the operator characteristics and input from the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Shunting-yard_algorithm" title="wp: Shunting-yard_algorithm">Shunting-yard algorithm</a> page and tables, use the algorithm to show the changes in the operator stack and RPN output
/// as each individual token is processed.
/// <br>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">Assume an input of a correct, space separated, string of tokens representing an infix expression</li>
/// <li class="rosetta__list-item">Generate a space separated output string representing the RPN</li>
/// <li class="rosetta__list-item">Test with the input string:</li>
/// <br>
/// </ul><span class="rosetta__text--indented">::: <big><big><code> 3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3 </code></big></big> </span>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">print and display the output here.</li>
/// <li class="rosetta__list-item">Operator precedence is given in this table:</li>
/// <br>
/// </ul><span class="rosetta__text--indented">{| class="wikitable"</span>
/// <br>
/// ! operator !! <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Order_of_operations" title="wp: Order_of_operations">precedence]] !! [[wp:Operator_associativity|associativity</a> !! operation
/// |- || align="center"
/// |                    <big><big> ^ </big></big>  ||  4  ||  right  ||  exponentiation 
/// |- || align="center" 
/// |                    <big><big> * </big></big>  ||  3  ||  left   ||  multiplication
/// |- || align="center" 
/// |                    <big><big> / </big></big>  ||  3  ||  left   ||  division
/// |- || align="center" 
/// |                    <big><big> + </big></big>  ||  2  ||  left   ||  addition
/// |- || align="center"
/// |                    <big><big> - </big></big>  ||  2  ||  left   ||  subtraction
/// |}
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Extra credit</dt></dl>
/// Add extra text explaining the actions and an optional comment for the action on receipt of each token.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Note</dt></dl>
/// The handling of functions and arguments is not required.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">See also:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">[[Parsing/RPN calculator algorithm]] for a method of calculating a final value from this output RPN expression.</li>
/// <li class="rosetta__list-item">[[Parsing/RPN to infix conversion]].</li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function Stack() {
  this.dataStore = [];
  this.top = 0;
  this.push = push;
  this.pop = pop;
  this.peek = peek;
  this.length = length;
}
  
function push(element) {
  this.dataStore[this.top++] = element;
}
  
function pop() {
  return this.dataStore[--this.top];
}
  
function peek() {
  return this.dataStore[this.top-1];
}
  
function length() {
  return this.top;
}
  
var infix = "3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3";
infix = infix.replace(/\s+/g, ''); // remove spaces, so infix[i]!=" "

var s = new Stack();
var ops = "-+/*^";
var precedence = {"^":4, "*":3, "/":3, "+":2, "-":2};
var associativity = {"^":"Right", "*":"Left", "/":"Left", "+":"Left", "-":"Left"};
var token;
var postfix = "";
var o1, o2;

for (var i = 0; i < infix.length; i++) {
  token = infix[i];
  if (token >= "0" && token <= "9") { // if token is operand (here limited to 0 <= x <= 9)
    postfix += token + " ";
  }
  else if (ops.indexOf(token) != -1) { // if token is an operator
    o1 = token;
    o2 = s.peek();
    while (ops.indexOf(o2)!=-1 && ( // while operator token, o2, on top of the stack
      // and o1 is left-associative and its precedence is less than or equal to that of o2
      (associativity[o1] == "Left" && (precedence[o1] <= precedence[o2]) ) || 
      // the algorithm on wikipedia says: or o1 precedence < o2 precedence, but I think it should be
      // or o1 is right-associative and its precedence is less than that of o2
      (associativity[o1] == "Right" && (precedence[o1] < precedence[o2])) 
      )){
        postfix += o2 + " "; // add o2 to output queue
        s.pop(); // pop o2 of the stack
        o2 = s.peek(); // next round
    }
    s.push(o1); // push o1 onto the stack
  }
  else if (token == "(") { // if token is left parenthesis
    s.push(token); // then push it onto the stack
  }
  else if (token == ")") { // if token is right parenthesis 
    while (s.peek() != "("){ // until token at top is (
      postfix += s.pop() + " ";
    }
    s.pop(); // pop (, but not onto the output queue
  }
}
while (s.length()>0){
  postfix += s.pop() + " ";
}
print(postfix);

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>function Stack() {
  this.dataStore = [];
  this.top = 0;
  this.push = push;
  this.pop = pop;
  this.peek = peek;
  this.length = length;
}
  
function push(element) {
  this.dataStore[this.top++] = element;
}
  
function pop() {
  return this.dataStore[--this.top];
}
  
function peek() {
  return this.dataStore[this.top-1];
}
  
function length() {
  return this.top;
}
  
var infix = "3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3";
infix = infix.replace(/\s+/g, ''); // remove spaces, so infix[i]!=" "

var s = new Stack();
var ops = "-+/*^";
var precedence = {"^":4, "*":3, "/":3, "+":2, "-":2};
var associativity = {"^":"Right", "*":"Left", "/":"Left", "+":"Left", "-":"Left"};
var token;
var postfix = "";
var o1, o2;

for (var i = 0; i < infix.length; i++) {
  token = infix[i];
  if (token >= "0" && token <= "9") { // if token is operand (here limited to 0 <= x <= 9)
    postfix += token + " ";
  }
  else if (ops.indexOf(token) != -1) { // if token is an operator
    o1 = token;
    o2 = s.peek();
    while (ops.indexOf(o2)!=-1 && ( // while operator token, o2, on top of the stack
      // and o1 is left-associative and its precedence is less than or equal to that of o2
      (associativity[o1] == "Left" && (precedence[o1] <= precedence[o2]) ) || 
      // the algorithm on wikipedia says: or o1 precedence < o2 precedence, but I think it should be
      // or o1 is right-associative and its precedence is less than that of o2
      (associativity[o1] == "Right" && (precedence[o1] < precedence[o2])) 
      )){
        postfix += o2 + " "; // add o2 to output queue
        s.pop(); // pop o2 of the stack
        o2 = s.peek(); // next round
    }
    s.push(o1); // push o1 onto the stack
  }
  else if (token == "(") { // if token is left parenthesis
    s.push(token); // then push it onto the stack
  }
  else if (token == ")") { // if token is right parenthesis 
    while (s.peek() != "("){ // until token at top is (
      postfix += s.pop() + " ";
    }
    s.pop(); // pop (, but not onto the output queue
  }
}
while (s.length()>0){
  postfix += s.pop() + " ";
}
print(postfix);</lang>

Output:

<pre>infix:   3 + 4 * 2 / ( 1 - 5 ) ^ 2 ^ 3
postfix: 3 4 2 * 1 5 - 2 3 ^ ^ / + </pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
