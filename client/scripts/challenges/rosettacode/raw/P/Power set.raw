
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Power set
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/><p class="rosetta__paragraph">A  <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/set" title="set">set</a>  is a collection (container) of certain values,</p>
/// <p class="rosetta__paragraph">without any particular order, and no repeated values.</p><br/><p class="rosetta__paragraph">It corresponds with a finite set in mathematics.</p><br/><p class="rosetta__paragraph">A set can be implemented as an associative array (partial mapping)</p>
/// <p class="rosetta__paragraph">in which the value of each key-value pair is ignored.</p><br/><p class="rosetta__paragraph">Given a set S, the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Power_set" title="wp: Power_set">power set</a> (or powerset) of S, written P(S), or 2<sup>S</sup>, is the set of all subsets of S.</p>
/// <br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">By using a library or built-in set type, or by defining a set type with necessary operations, write a function with a set S as input that yields the power set 2<sup>S</sup> of S.</p>
/// <br/><p class="rosetta__paragraph">For example, the power set of   {1,2,3,4}   is</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:: .</span></p><br/><p class="rosetta__paragraph">For a set which contains n elements, the corresponding power set has 2<sup>n</sup> elements, including the edge cases of <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Empty_set" title="wp: Empty_set">empty set</a>.<br /></p><br/><p class="rosetta__paragraph">The power set of the empty set is the set which contains itself (2<sup>0</sup> = 1):<br /></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:: $\mathcal{P}$($\varnothing$) = { $\varnothing$ }<br /></span></p><br/><p class="rosetta__paragraph">And the power set of the set which contains only the empty set, has two subsets, the empty set and the set which contains the empty set (2<sup>1</sup> = 2):<br /></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:: $\mathcal{P}$({$\varnothing$}) = { $\varnothing$,  { $\varnothing$ } }<br></span></p>
/// <br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Extra credit: </span> Demonstrate that your language supports these last two powersets.</p>
/// <br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function powerset(ary) {
    var ps = [[]];
    for (var i=0; i < ary.length; i++) {
        for (var j = 0, len = ps.length; j < len; j++) {
            ps.push(ps[j].concat(ary[i]));
        }
    }
    return ps;
}

var res = powerset([1,2,3,4]);

load('json2.js');
print(JSON.stringify(res));

/// rawSolutions:
=={{header|JavaScript}}==

===ES5===
====Iteration====
Uses a JSON stringifier from http://www.json.org/js.html

{{works with|SpiderMonkey}}
<lang javascript>function powerset(ary) {
    var ps = [[]];
    for (var i=0; i < ary.length; i++) {
        for (var j = 0, len = ps.length; j < len; j++) {
            ps.push(ps[j].concat(ary[i]));
        }
    }
    return ps;
}

var res = powerset([1,2,3,4]);

load('json2.js');
print(JSON.stringify(res));</lang>

{{out}}
<pre>[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3],[4],[1,4],[2,4],[1,2,4],[3,4],[1,3,4],[2,3,4],[1,2,3,4]]</pre>


====Functional composition====

{{trans|Haskell}}

<lang JavaScript>(function () {

   // translating:  powerset = foldr (\x acc -> acc ++ map (x:) acc) [[]]

    function powerset(xs) {
        return xs.reduceRight(function (a, x) {
            return a.concat(a.map(function (y) {
                return [x].concat(y);
            }));
        }, [[]]);
    }


    // TEST
    return {
        '[1,2,3] ->': powerset([1, 2, 3]),
        'empty set ->': powerset([]),
        'set which contains only the empty set ->': powerset([[]])
    }

})();</lang>

{{Out}}

<lang JavaScript>{
 "[1,2,3] ->":[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]],
 "empty set ->":[[]],
 "set which contains only the empty set ->":[[], [[]]]
}</lang>

===ES6===

<lang JavaScript>(() => {
    'use strict';

    // powerset :: [a] -> [[a]]
    const powerset = xs =>
        xs.reduceRight((a, x) => a.concat(a.map(y => [x].concat(y))), [
            []
        ]);


    // TEST
    return {
        '[1,2,3] ->': powerset([1, 2, 3]),
        'empty set ->': powerset([]),
        'set which contains only the empty set ->': powerset([
            []
        ])
    };
})()</lang>

{{Out}}
<lang JavaScript>{"[1,2,3] ->":[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]], 
"empty set ->":[[]], 
"set which contains only the empty set ->":[[], [[]]]}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
