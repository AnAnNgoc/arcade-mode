
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Parsing/RPN calculator algorithm
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Create a stack-based evaluator for an expression in &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Reverse Polish notation" title="wp: Reverse Polish notation"><u>r</u>everse <u>P</u>olish <u>n</u>otation (RPN)</a> &nbsp; that also shows the changes in the stack as each individual token is processed <span class="rosetta__text--italic">as a table</span>.
/// <br>
/// <br>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Assume an input of a correct, space separated, string of tokens of an RPN expression</li>
/// <li class="rosetta__list-item--unordered">Test with the RPN expression generated from the &nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Parsing/Shunting-yard algorithm" title="Parsing/Shunting-yard algorithm">Parsing/Shunting-yard algorithm</a> &nbsp; task: <br></li></ul>&nbsp; &nbsp; &nbsp; &nbsp; <big><big><code> 3 4 2 * 1 5 - 2 3 ^ ^ / + </code></big></big> 
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">Print or display the output here</li></ul>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Notes:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">&nbsp; <big><b> <span class="rosetta__text--bold">^</span> </b></big> &nbsp; means exponentiation in the expression above.</li>
/// <li class="rosetta__list-item--unordered">&nbsp; <big><b> <span class="rosetta__text--bold">/</span> </b></big> &nbsp; means division.</li></ul>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">See also:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Parsing/Shunting-yard algorithm" title="Parsing/Shunting-yard algorithm">Parsing/Shunting-yard algorithm</a> for a method of generating an RPN from an infix expression.</li>
/// <li class="rosetta__list-item--unordered">&nbsp; Several solutions to <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/24 game/Solve" title="24 game/Solve">24 game/Solve</a> make use of RPN evaluators (although tracing how they work is not a part of that task).</li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Parsing/RPN to infix conversion" title="Parsing/RPN to infix conversion">Parsing/RPN to infix conversion</a>.</li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Arithmetic evaluation" title="Arithmetic evaluation">Arithmetic evaluation</a>.</li></ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var e = '3 4 2 * 1 5 - 2 3 ^ ^ / +'
var s=[], e=e.split(' ')
for (var i in e) {
	var t=e[i], n=+t
	if (n == t)
		s.push(n)
	else {
		var o2=s.pop(), o1=s.pop()
		switch (t) {
			case '+': s.push(o1+o2); break;
			case '-': s.push(o1-o2); break;
			case '*': s.push(o1*o2); break;
			case '/': s.push(o1/o2); break;
			case '^': s.push(Math.pow(o1,o2)); break;
		}
	}
	document.write(t, ': ', s, '<br>')
}

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>var e = '3 4 2 * 1 5 - 2 3 ^ ^ / +'
var s=[], e=e.split(' ')
for (var i in e) {
	var t=e[i], n=+t
	if (n == t)
		s.push(n)
	else {
		var o2=s.pop(), o1=s.pop()
		switch (t) {
			case '+': s.push(o1+o2); break;
			case '-': s.push(o1-o2); break;
			case '*': s.push(o1*o2); break;
			case '/': s.push(o1/o2); break;
			case '^': s.push(Math.pow(o1,o2)); break;
		}
	}
	document.write(t, ': ', s, '<br>')
}</lang>
{{out}}
<pre>
3: 3
4: 3,4
2: 3,4,2
*: 3,8
1: 3,8,1
5: 3,8,1,5
-: 3,8,-4
2: 3,8,-4,2
3: 3,8,-4,2,3
^: 3,8,-4,8
^: 3,8,65536
/: 3,0.0001220703125
+: 3.0001220703125
</pre>
==== With checks and messages ====
<lang javascript>var e = '3 4 2 * 1 5 - 2 3 ^ ^ / +'
eval: {
	document.write(e, '<br>')
	var s=[], e=e.split(' ')
	for (var i in e) {
		var t=e[i], n=+t
		if (!t) continue
		if (n == t)
			s.push(n)
		else {
			if ('+-*/^'.indexOf(t) == -1) {
				document.write(t, ': ', s, '<br>', 'Unknown operator!<br>')
				break eval
			}
			if (s.length<2) {
				document.write(t, ': ', s, '<br>', 'Insufficient operands!<br>')
				break eval
			}
			var o2=s.pop(), o1=s.pop()
			switch (t) {
				case '+': s.push(o1+o2); break
				case '-': s.push(o1-o2); break
				case '*': s.push(o1*o2); break
				case '/': s.push(o1/o2); break
				case '^': s.push(Math.pow(o1,o2))
			}
		}
		document.write(t, ': ', s, '<br>')
	}
	if (s.length>1) {
		document.write('Insufficient operators!<br>')
	}
}</lang>
{{out}}
<pre>
3 4 2 * 1 5 - 2 3 ^ ^ / +
3: 3
4: 3,4
2: 3,4,2
*: 3,8
1: 3,8,1
5: 3,8,1,5
-: 3,8,-4
2: 3,8,-4,2
3: 3,8,-4,2,3
^: 3,8,-4,8
^: 3,8,65536
/: 3,0.0001220703125
+: 3.0001220703125
</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
