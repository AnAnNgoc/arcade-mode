
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Playing cards
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
///  
/// [[Category:Cards]]
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Create a data structure and the associated methods to define and manipulate a deck of &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Playing-cards#Anglo-American-French" title="wp: Playing-cards#Anglo-American-French">playing cards</a>. 
/// <br>
/// The deck should contain 52 unique cards. 
/// <br>
/// The methods must include the ability to:
/// <span class="rosetta__text--indented">::* &nbsp; make a new deck</span>
/// <span class="rosetta__text--indented">::* &nbsp; shuffle (randomize) the deck</span>
/// <span class="rosetta__text--indented">::* &nbsp; deal from the deck</span>
/// <span class="rosetta__text--indented">::* &nbsp; print the current contents of a deck </span>
/// <br>
/// Each card must have a pip value and a suit value which constitute the unique value of the card.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function Card(pip, suit) {
    this.pip = pip;
    this.suit = suit; 

    this.toString = function () {
        return this.pip + ' ' + this.suit;
    };
}
 
function Deck() {
    var pips = '2 3 4 5 6 7 8 9 10 Jack Queen King Ace'.split(' ');
    var suits = 'Clubs Hearts Spades Diamonds'.split(' ');
    this.deck = [];
    for (var i = 0; i < suits.length; i++)
        for (var j = 0; j < pips.length; j++)
            this.deck.push(new Card(pips[j], suits[i]));

    this.toString = function () {
        return '[' + this.deck.join(', ') + ']';
    };
 
    this.shuffle = function () {
        for (var i = 0; i < this.deck.length; i++)
            this.deck[i] = this.deck.splice(
                parseInt(this.deck.length * Math.random()), 1, this.deck[i])[0];
    };

    this.deal = function () {
        return this.deck.shift();
    };
}

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>function Card(pip, suit) {
    this.pip = pip;
    this.suit = suit; 

    this.toString = function () {
        return this.pip + ' ' + this.suit;
    };
}
 
function Deck() {
    var pips = '2 3 4 5 6 7 8 9 10 Jack Queen King Ace'.split(' ');
    var suits = 'Clubs Hearts Spades Diamonds'.split(' ');
    this.deck = [];
    for (var i = 0; i < suits.length; i++)
        for (var j = 0; j < pips.length; j++)
            this.deck.push(new Card(pips[j], suits[i]));

    this.toString = function () {
        return '[' + this.deck.join(', ') + ']';
    };
 
    this.shuffle = function () {
        for (var i = 0; i < this.deck.length; i++)
            this.deck[i] = this.deck.splice(
                parseInt(this.deck.length * Math.random()), 1, this.deck[i])[0];
    };

    this.deal = function () {
        return this.deck.shift();
    };
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
