
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Exponentiation operator
/// type: rosetta-code

/// categories:
/// Arithmetic

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
///  
/// <br>
/// <br>
/// Most programming languages have a built-in implementation of exponentiation. 
///  
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Re-implement integer exponentiation for both &nbsp; <big>int<sup>int</sup></big> &nbsp; and &nbsp; <big>float<sup>int</sup></big> &nbsp; as both a procedure, &nbsp; and an operator (if your language supports operator definition).
/// <br>
/// If the language supports operator (or procedure) overloading, then an overloaded form should be provided for both &nbsp; <big>int<sup>int</sup></big> &nbsp; and &nbsp; <big>float<sup>int</sup></big> &nbsp; variants. 
/// <br><br> 
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function pow(base, exp) {
    if (exp != Math.floor(exp)) 
        throw "exponent must be an integer";
    if (exp < 0) 
        return 1 / pow(base, -exp);
    var ans = 1;
    while (exp > 0) {
        ans *= base;
        exp--;
    }
    return ans;
}

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>function pow(base, exp) {
    if (exp != Math.floor(exp)) 
        throw "exponent must be an integer";
    if (exp < 0) 
        return 1 / pow(base, -exp);
    var ans = 1;
    while (exp > 0) {
        ans *= base;
        exp--;
    }
    return ans;
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
