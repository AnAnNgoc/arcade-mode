
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Executable library
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <br>
/// <br>
/// <br>
/// The general idea behind an executable library is to create a library 
/// that when used as a library does one thing; 
/// but has the ability to be run directly via command line. 
/// Thus the API comes with a CLI in the very same source code file.
/// <br>
/// <span class="rosetta__text--bold">Task detail</span>
/// <br>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">Create a library/module/dll/shared object/... for a programming language that contains a function/method called hailstone that is a function taking a positive integer and returns the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Hailstone sequence" title="Hailstone sequence"></a> for that number.</li>
/// <br>
/// </ul>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">The library, when executed directly should satisfy the remaining requirements of the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Hailstone sequence" title="Hailstone sequence"></a> task:</li>
/// <br>
/// </ul><span class="rosetta__text--indented">: 2.  Use the routine to show that the hailstone sequence for the number 27 has 112 elements starting with 27, 82, 41, 124 and ending with 8, 4, 2, 1</span>
/// <span class="rosetta__text--indented">: 3.  Show the number less than 100,000 which has the longest hailstone sequence together with that sequence's length.</span>
/// <br>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">Create a second executable to calculate the following:</li>
/// <li class="rosetta__list-item--unordered">* Use the library's hailstone function, in the standard manner, (or document how this use deviates from standard use of a library), together with extra code in this executable, to find the hailstone length returned most often for 1 â‰¤ n < 100,000.</li>
/// <br>
/// </ul>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">Explain any extra setup/run steps needed to complete the task.</li>
/// <br>
/// </ul>
/// <span class="rosetta__text--bold">Notes:</span> 
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">It is assumed that for a language that overwhelmingly ships in a compiled form, such as C, the library must also be an executable and the compiled user of that library is to do so without changing the compiled library. I.e. the compile tool-chain is assumed <span class="rosetta__text--italic">not</span> to be present in the runtime environment.</li>
/// <li class="rosetta__list-item--unordered">Interpreters are present in the runtime environment.</li>
/// <br>
/// </ul>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
