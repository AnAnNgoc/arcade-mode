Extensible prime generator

{{task}}

;Task:
Write a generator of prime numbers, in order, that will automatically adjust to accommodate the generation of any reasonably high prime.

The routine should demonstrably rely on either:
# Being based on an open-ended counter set to count without upper limit other than system or programming language limits. In this case, explain where this counter is in the code.
# Being based on a limit that is extended automatically. In this case, choose a small limit that ensures the limit will be passed when generating some of the values to be asked for below.
# If other methods of creating an extensible prime generator are used, the algorithm's means of extensibility/lack of limits should be stated.


The routine should be used to:
* Show the first twenty primes.
* Show the primes between 100 and 150.
* Show the ''number'' of primes between 7,700 and 8,000.
* Show the 10,000th prime.

<br>
Show output on this page.

'''Note:''' You may reference code already on this site if it is written to be imported/included, then only the code necessary for import and the performance of this task need be shown. (It is also important to leave a forward link on the referenced tasks entry so that later editors know that the code is used for multiple tasks). 

'''Note 2:''' If a languages in-built prime generator is extensible or is guaranteed to generate primes up to a system limit, (2<sup>31</sup> or memory overflow for example), then this may be used as long as an explanation of the limits of the prime generator is also given. (Which may include a link to/excerpt from, language documentation). 

;See also:
* The task is written so it may be useful in solving task [[Emirp primes]] as well as others (depending on its efficiency).
<br><br>


=={{header|JavaScript}}==

'''primeGenerator(num, showPrimes)'''
This function takes two arguments:

'''num''' is either an integer as a limit, or an array of two integers to present a range;

'''showPrimes''' is a boolean to indicate whether the result should be a list (if ''true'') or a single number (if ''false'').

Sounds a bit weird, but I hope it will be intelligible by the testing examples below. First the code:

<lang JavaScript>function primeGenerator(num, showPrimes) {
  var i,
      arr = [];

  function isPrime(num) {
    // try primes <= 16
    if (num <= 16) return (
      num == 2 || num == 3 || num == 5 || num == 7 || num == 11 || num == 13
    );
    // cull multiples of 2, 3, 5 or 7
    if (num % 2 == 0 || num % 3 == 0 || num % 5 == 0 || num % 7 == 0)
      return false;
    // cull square numbers ending in 1, 3, 7 or 9
    for (var i = 10; i * i <= num; i += 10) {
      if (num % (i + 1) == 0) return false;
      if (num % (i + 3) == 0) return false;
      if (num % (i + 7) == 0) return false;
      if (num % (i + 9) == 0) return false;
    }
    return true;
  }

  if (typeof num == "number") {
    for (i = 0; arr.length < num; i++) if (isPrime(i)) arr.push(i);
    // first x primes
    if (showPrimes) return arr;
    // xth prime
    else return arr.pop();
  }

  if (Array.isArray(num)) {
    for (i = num[0]; i <= num[1]; i++) if (isPrime(i)) arr.push(i);
    // primes between x .. y
    if (showPrimes) return arr;
    // number of primes between x .. y
    else return arr.length;
  }
  // throw a default error if nothing returned yet
  // (surrogate for a quite long and detailed try-catch-block anywhere before)
  throw("Invalid arguments for primeGenerator()");
}</lang>

'''Test'''
<lang>// first 20 primes
console.log(primeGenerator(20, true));

// primes between 100 and 150
console.log(primeGenerator([100, 150], true));

// numbers of primes between 7700 and 8000
console.log(primeGenerator([7700, 8000], false));

// the 10,000th prime
console.log(primeGenerator(10000, false));</lang>

'''Output'''
<lang>Array [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71 ]

Array [ 101, 103, 107, 109, 113, 127, 131, 137, 139, 149 ]

30

104729</lang>

