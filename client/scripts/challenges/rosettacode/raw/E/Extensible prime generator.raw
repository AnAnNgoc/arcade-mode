
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Extensible prime generator
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Write a generator of prime numbers, in order, that will automatically adjust to accommodate the generation of any reasonably high prime.
/// <br>
/// The routine should demonstrably rely on either:
/// <ol class="rosetta__ordered-list">
/// <li class="rosetta__list-item--ordered">Being based on an open-ended counter set to count without upper limit other than system or programming language limits. In this case, explain where this counter is in the code.</li>
/// <li class="rosetta__list-item--ordered">Being based on a limit that is extended automatically. In this case, choose a small limit that ensures the limit will be passed when generating some of the values to be asked for below.</li>
/// <li class="rosetta__list-item--ordered">If other methods of creating an extensible prime generator are used, the algorithm's means of extensibility/lack of limits should be stated.</li>
/// <br>
/// </ol>
/// <br>
/// The routine should be used to:
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">Show the first twenty primes.</li>
/// <li class="rosetta__list-item--unordered">Show the primes between 100 and 150.</li>
/// <li class="rosetta__list-item--unordered">Show the <span class="rosetta__text--italic">number</span> of primes between 7,700 and 8,000.</li>
/// <li class="rosetta__list-item--unordered">Show the 10,000th prime.</li>
/// <br>
/// </ul>
/// <br>
/// Show output on this page.
/// <br>
/// <span class="rosetta__text--bold">Note:</span> You may reference code already on this site if it is written to be imported/included, then only the code necessary for import and the performance of this task need be shown. (It is also important to leave a forward link on the referenced tasks entry so that later editors know that the code is used for multiple tasks). 
/// <br>
/// <span class="rosetta__text--bold">Note 2:</span> If a languages in-built prime generator is extensible or is guaranteed to generate primes up to a system limit, (2<sup>31</sup> or memory overflow for example), then this may be used as long as an explanation of the limits of the prime generator is also given. (Which may include a link to/excerpt from, language documentation). 
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">See also:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">The task is written so it may be useful in solving task <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Emirp primes" title="Emirp primes"></a> as well as others (depending on its efficiency).</li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function primeGenerator(num, showPrimes) {
  var i,
      arr = [];

  function isPrime(num) {
    // try primes <= 16
    if (num <= 16) return (
      num == 2 || num == 3 || num == 5 || num == 7 || num == 11 || num == 13
    );
    // cull multiples of 2, 3, 5 or 7
    if (num % 2 == 0 || num % 3 == 0 || num % 5 == 0 || num % 7 == 0)
      return false;
    // cull square numbers ending in 1, 3, 7 or 9
    for (var i = 10; i * i <= num; i += 10) {
      if (num % (i + 1) == 0) return false;
      if (num % (i + 3) == 0) return false;
      if (num % (i + 7) == 0) return false;
      if (num % (i + 9) == 0) return false;
    }
    return true;
  }

  if (typeof num == "number") {
    for (i = 0; arr.length < num; i++) if (isPrime(i)) arr.push(i);
    // first x primes
    if (showPrimes) return arr;
    // xth prime
    else return arr.pop();
  }

  if (Array.isArray(num)) {
    for (i = num[0]; i <= num[1]; i++) if (isPrime(i)) arr.push(i);
    // primes between x .. y
    if (showPrimes) return arr;
    // number of primes between x .. y
    else return arr.length;
  }
  // throw a default error if nothing returned yet
  // (surrogate for a quite long and detailed try-catch-block anywhere before)
  throw("Invalid arguments for primeGenerator()");
}

/// rawSolutions:
=={{header|JavaScript}}==

'''primeGenerator(num, showPrimes)'''
This function takes two arguments:

'''num''' is either an integer as a limit, or an array of two integers to present a range;

'''showPrimes''' is a boolean to indicate whether the result should be a list (if ''true'') or a single number (if ''false'').

Sounds a bit weird, but I hope it will be intelligible by the testing examples below. First the code:

<lang JavaScript>function primeGenerator(num, showPrimes) {
  var i,
      arr = [];

  function isPrime(num) {
    // try primes <= 16
    if (num <= 16) return (
      num == 2 || num == 3 || num == 5 || num == 7 || num == 11 || num == 13
    );
    // cull multiples of 2, 3, 5 or 7
    if (num % 2 == 0 || num % 3 == 0 || num % 5 == 0 || num % 7 == 0)
      return false;
    // cull square numbers ending in 1, 3, 7 or 9
    for (var i = 10; i * i <= num; i += 10) {
      if (num % (i + 1) == 0) return false;
      if (num % (i + 3) == 0) return false;
      if (num % (i + 7) == 0) return false;
      if (num % (i + 9) == 0) return false;
    }
    return true;
  }

  if (typeof num == "number") {
    for (i = 0; arr.length < num; i++) if (isPrime(i)) arr.push(i);
    // first x primes
    if (showPrimes) return arr;
    // xth prime
    else return arr.pop();
  }

  if (Array.isArray(num)) {
    for (i = num[0]; i <= num[1]; i++) if (isPrime(i)) arr.push(i);
    // primes between x .. y
    if (showPrimes) return arr;
    // number of primes between x .. y
    else return arr.length;
  }
  // throw a default error if nothing returned yet
  // (surrogate for a quite long and detailed try-catch-block anywhere before)
  throw("Invalid arguments for primeGenerator()");
}</lang>

'''Test'''
<lang>// first 20 primes
console.log(primeGenerator(20, true));

// primes between 100 and 150
console.log(primeGenerator([100, 150], true));

// numbers of primes between 7700 and 8000
console.log(primeGenerator([7700, 8000], false));

// the 10,000th prime
console.log(primeGenerator(10000, false));</lang>

'''Output'''
<lang>Array [ 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61, 67, 71 ]

Array [ 101, 103, 107, 109, 113, 127, 131, 137, 139, 149 ]

30

104729</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
