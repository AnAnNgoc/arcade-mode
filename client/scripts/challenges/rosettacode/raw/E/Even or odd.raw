Even or odd

{{task}}

;Task:
Test whether an integer is even or odd.

There is more than one way to solve this task:

* Use the even and odd predicates, if the language provides them.
* Check the least significant digit. With binary integers, <span class="rosetta__text--italic">i <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/bitwise operations" title="bitwise operations">bitwise-and</a> 1</span> equals 0 <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/wikt:iff" title="wikt:iff">iff</a> <span class="rosetta__text--italic">i</span> is even, or equals 1 iff <span class="rosetta__text--italic">i</span> is odd.
* Divide <span class="rosetta__text--italic">i</span> by 2. The remainder equals 0 iff <span class="rosetta__text--italic">i</span> is even. The remainder equals +1 or -1 iff <span class="rosetta__text--italic">i</span> is odd.
* Use modular congruences:
** <span class="rosetta__text--italic">i</span> &equiv; 0 (mod 2) iff <span class="rosetta__text--italic">i</span> is even.
** <span class="rosetta__text--italic">i</span> &equiv; 1 (mod 2) iff <span class="rosetta__text--italic">i</span> is odd.
<br><br>


=={{header|JavaScript}}==
===ES5===
Bitwise:
<lang javascript>function isEven( i ) {
  return (i & 1) === 0;
}
</lang>
Modulo:
<lang javascript>function isEven( i ) {
  return i % 2 === 0;
}

// Alternative
function isEven( i ) {
  return !(i % 2);
}</lang>

===ES6===
Lambda:
<lang javascript>// EMCAScript 6
const isEven = x => !(x % 2)</lang>

or, avoiding type coercion:
<lang javascript>(() => {
    'use strict';

    // even : Integral a => a -> Bool
    const even = x => (x % 2) === 0;

    // odd : Integral a => a -> Bool
    const odd = x => !even(x);


    // TEST ----------------------------------------
    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // show :: a -> String
    const show = JSON.stringify;

    // xs :: [Int]
    const xs = range(-6, 6);

    return show([xs.filter(even), xs.filter(odd)]);
})();</lang>

{{Out}}
<pre>[[-6,-4,-2,0,2,4,6],[-5,-3,-1,1,3,5]]</pre>

