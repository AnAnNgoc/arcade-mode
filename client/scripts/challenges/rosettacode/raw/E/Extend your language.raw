
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Extend your language
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// Some programming languages allow you to <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Extensible_programming" title="wp: Extensible_programming">extend</a> the language. While this can be done to a certain degree in most languages (e.g. by using macros), other languages go much further. Most notably in the Forth and Lisp families, programming per se is done by extending the language without any formal distinction between built-in and user-defined elements.
/// <br>
/// If your language supports it, show how to introduce a new flow control mechanism. A practical and useful example is a four-way branch:
/// <br>
/// Occasionally, code must be written that depends on <span class="rosetta__text--italic">two</span> conditions, resulting in up to four branches (depending on whether both, only the first, only the second, or none of the conditions are "true"). In a C-like language this could look like the following:
/// <br>
///    if (condition1isTrue) {
///       if (condition2isTrue)
///          bothConditionsAreTrue();
///       else
///          firstConditionIsTrue();
///    }
///    else if (condition2isTrue)
///       secondConditionIsTrue();
///    else
///       noConditionIsTrue();
/// <br>
/// Besides being rather cluttered, the statement(s) for 'condition2isTrue' must be written down twice. If 'condition2isTrue' were a lengthy and involved expression, it would be quite unreadable, and the code generated by the compiler might be unnecessarily large.
/// <br>
/// This can be improved by introducing a new keyword <span class="rosetta__text--bold">if2</span>. It is similar to <span class="rosetta__text--bold">if</span>, but takes two conditional statements instead of one, and up to three 'else' statements. One proposal (in pseudo-C syntax) might be:
/// <br>
///    if2 (condition1isTrue) (condition2isTrue)
///       bothConditionsAreTrue();
///    else1
///       firstConditionIsTrue();
///    else2
///       secondConditionIsTrue();
///    else
///       noConditionIsTrue();
/// <br>
/// Pick the syntax which suits your language. The keywords 'else1' and 'else2' are just examples. The new conditional expression should look, nest and behave analogously to the language's built-in 'if' statement.
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
