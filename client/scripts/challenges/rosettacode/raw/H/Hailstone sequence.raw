Hailstone sequence

{{task}}

The Hailstone sequence of numbers can be generated from a starting positive integer, &nbsp; n &nbsp; by:
* &nbsp; If &nbsp; n &nbsp; is &nbsp; &nbsp; <span class="rosetta__text--bold">1</span> &nbsp; &nbsp; then the sequence ends.
* &nbsp; If &nbsp; n &nbsp; is &nbsp; <span class="rosetta__text--bold">even</span> then the next &nbsp; n &nbsp; of the sequence &nbsp; <big><code> = n/2 </code></big>
* &nbsp; If &nbsp; n &nbsp; is &nbsp; <span class="rosetta__text--bold">odd</span>  &nbsp; then the next &nbsp; n &nbsp; of the sequence &nbsp; <big><code> = (3 * n) + 1 </code></big>


The (unproven) <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Collatz conjecture" title="wp: Collatz conjecture">Collatz conjecture</a> is that the hailstone sequence for any starting number always terminates.


The hailstone sequence is also known as <span class="rosetta__text--italic">hailstone numbers</span> (because the values are usually subject to multiple descents and ascents like hailstones in a cloud), or as the <span class="rosetta__text--italic">Collatz sequence</span>.


;Task:
# Create a routine to generate the hailstone sequence for a number.
# Use the routine to show that the hailstone sequence for the number 27 has 112 elements starting with <code>27, 82, 41, 124</code> and ending with <code>8, 4, 2, 1</code>
# Show the number less than 100,000 which has the longest hailstone sequence together with that sequence's length.<br> &nbsp;  (But don't show the actual sequence!)


;See also:
* &nbsp; [http://xkcd.com/710 xkcd] (humourous).
<br><br>


=={{header|JavaScript}}==
===ES5===
====Imperative====
<lang javascript>function hailstone (n) {
    var seq = [n];
    while (n > 1) {
        n = n % 2 ? 3 * n + 1 : n / 2;
        seq.push(n);
    }
    return seq;
}

// task 2: verify the sequence for n = 27
var h = hailstone(27), hLen = h.length;
print("sequence 27 is (" + h.slice(0, 4).join(", ") + " ... "
    + h.slice(hLen - 4, hLen).join(", ") + "). length: " + hLen);

// task 3: find the longest sequence for n < 100000
for (var n, max = 0, i = 100000; --i;) {
    var seq = hailstone(i), sLen = seq.length;
    if (sLen > max) {
        n = i;
        max = sLen;
    }
}
print("longest sequence: " + max + " numbers for starting point " + n);</lang>
{{out}}
<pre>sequence 27 is (27, 82, 41, 124 ... 8, 4, 2, 1). length: 112
longest sequence: 351 numbers for starting point 77031</pre>

====Functional====

This simple problem turns out to be a good test of the constraints on composing
(ES5) JavaScript code in a functional style.

The first sub-problem falls easily within reach of a basic recursive definition 
(translating one of the Haskell solutions).

<lang JavaScript>(function () {

  // Hailstone Sequence
  // n -> [n]
  function hailstone(n) {
    return n === 1 ? [1] : (
      [n].concat(
        hailstone(n % 2 ? n * 3 + 1 : n / 2)
      )
    )
  }

  var lstCollatz27 = hailstone(27);

  return {
    length: lstCollatz27.length,
    sequence: lstCollatz27
  };

})();</lang>

{{out}}

<lang JavaScript>{"length":112,"sequence":[27,82,41,124,62,31,94,47,142,71,214,
107,322,161,484,242,121,364,182,91,274,137,412,206,103,310,155,466,233,700,350,
175,526, 263,790,395,1186,593,1780,890,445,1336,668,334,167,502,251,754,377,
1132,566,283,850,425,1276,638,319,958,479,1438,719,2158,1079,3238,1619,4858,
2429,7288,3644,1822,911,2734,1367,4102,2051,6154,3077,9232,4616,2308,1154,577,
1732,866,433,1300,650,325,976,488,244,122,61,184,92,46,23,70,35,106,53,160,80,
40,20,10,5,16,8,4,2,1]}</lang> 

Attempting to fold that recursive function over an array of 100,000 elements, 
however, (to solve the second part of the problem) soon runs out of stack 
space, at least on the system used here.

The stack problem can be quickly fixed, as often, by simply applying a generic '''memoized()''' function 
to derive a version of '''hailstone()''', which reuses previously calculated paths.

<lang JavaScript>(function () {

  function memoized(fn) {
    var dctMemo = {};

    return function (x) {
      var varValue = dctMemo[x];

      if ('u' === (typeof varValue)[0])
        dctMemo[x] = varValue = fn(x);
      return varValue;
    };
  }
  // Hailstone Sequence
  // n -> [n]
  function hailstone(n) {
    return n === 1 ? [1] : (
      [n].concat(
        hailstone(n % 2 ? n * 3 + 1 : n / 2)
      )
    )
  }
  
   // Derived a memoized version of the function,
  //  which can reuse previously calculated paths
  
  var fnCollatz = memoized(hailstone);

  // Iterative version of range
  // [m..n]
  function range(m, n) {
    var a = Array(n - m + 1),
      i = n + 1;
    while (i--) a[i - 1] = i;
    return a;
  }
  
  // Fold/reduce over an array to find the maximum length
  function longestBelow(n) {
    return range(1, n).reduce(
      function (a, x, i) {
        var lng = fnCollatz(x).length;

        return lng > a.l ? {
          n: i + 1,
          l: lng
        } : a

      }, {
        n: 0,
        l: 0
      }
    )
  }

  return longestBelow(100000);

})();</lang>

{{out}}

<lang JavaScript>// Number, length of sequence
{"n":77031, "l":351}</lang> 

For better time (as well as space) we can continue to memoize while falling back to a function which returns the
sequence length alone, and is iteratively implemented. This also proves more scaleable, 
and we can still use a fold/reduce pattern over a list to find the longest collatz sequences 
for integers below one million, or ten million and beyond, without hitting the limits of system resources.

<lang JavaScript>(function (n) {

  var dctMemo = {};

  // Length only of hailstone sequence
  // n -> n
  function collatzLength(n) {
    var i = 1,
      a = n,
      lng;

    while (a !== 1) {
      lng = dctMemo[a];
      if ('u' === (typeof lng)[0]) {
        a = (a % 2 ? 3 * a + 1 : a / 2);
        i++;
      } else return lng + i - 1;
    }
    return i;
  }

  // Iterative version of range
  // [m..n]
  function range(m, n) {
    var a = Array(n - m + 1),
      i = n + 1;
    while (i--) a[i - 1] = i;
    return a;
  }

  // Fold/reduce over an array to find the maximum length
  function longestBelow(n) {

    return range(1, n).reduce(
      function (a, x) {
        
        var lng = dctMemo[x] || (dctMemo[x] = collatzLength(x));

        return lng > a.l ? {
          n: x,
          l: lng
        } : a

      }, {
        n: 0,
        l: 0
      }
    )
  }

  return [100000, 1000000, 10000000].map(longestBelow);

})();</lang>

{{out}}

<lang JavaScript>[
  {"n":77031, "l":351},   // 100,000
  {"n":837799, "l":525},  // 1,000,000
  {"n":8400511, "l":686}  // 10,000,000
]</lang>

<lang JavaScript>longestBelow(100000000)
-> {"n":63728127, "l":950}</lang>

===ES6===

Longest sequence for an integer under N:
<lang javascript>(() => {
    const dctMemo = {};

    // Length only of hailstone sequence
    // collatzLength :: Int -> Int
    const collatzLength = n => {
        let i = 1;
        let a = n;
        let lng;

        while (a !== 1) {
            lng = dctMemo[a];
            if ('u' === (typeof lng)[0]) {
                a = (a % 2 ? 3 * a + 1 : a / 2);
                i++;
            } else return lng + i - 1;
        }
        return i;
    };

    // range :: Int -> Int -> Maybe Int -> [Int]
    const range = (m, n, delta) => {
        const blnUp = n > m,
            d = blnUp ? (delta || 1) : -(delta || 1),
            lng = Math.abs(Math.floor((blnUp ? n - m : m - n) / d) + 1),
            a = Array(lng);
        let i = lng;

        while (i--) a[i] = (d * i) + m;
        return a;
    };

    // longestBelow :: Int -> {Number::Int, Length:Int}
    const longestBelow = n =>
        range(1, n)
        .reduce(
            (a, x) => {
                const lng = dctMemo[x] || (dctMemo[x] = collatzLength(x));

                return lng > a.l ? {
                    n: x,
                    l: lng
                } : a

            }, {
                n: 0,
                l: 0
            }
        );

    // TEST
    // show :: a -> String
    const show = x => JSON.stringify(x, null, 2);

    return show(
        [100000, 1000000, 10000000].map(longestBelow)
    );
})();</lang>
{{Out}}
(Run in the Atom editor, through the Script package)
<pre>[
  {
    "n": 77031,
    "l": 351
  },
  {
    "n": 837799,
    "l": 525
  },
  {
    "n": 8400511,
    "l": 686
  }
]
[Finished in 2.897s]</pre>

