
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: History variables
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// ''Storing the history of objects in a program is a common task. 
/// Maintaining the history of an object in a program has traditionally required programmers either to write specific code for handling the historical data, or to use a library which supports history logging.''
/// <br>
/// ''History variables are variables in a programming language which store not only their current value, but also the values they have contained in the past. Some existing languages do provide support for history variables. However these languages typically have many limits and restrictions on use of history variables.
/// '' 
/// <br>
/// [http://www.bod.com/index.php?id=3435&objk_id=148050 "History Variables: 
/// The Semantics, Formal Correctness, and Implementation of History Variables 
/// in an Imperative Programming Language" by Mallon and Takaoka]
/// <br>
/// Concept also discussed on [http://lambda-the-ultimate.org/node/3111 LtU] and [http://www.patents.com/us-7111283.html Patents.com].
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task: </dt></dl>
/// Demonstrate History variable support: 
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">enable history variable support (if needed) </li>
/// <li class="rosetta__list-item--unordered">define a history variable</li>
/// <li class="rosetta__list-item--unordered">assign three values</li>
/// <li class="rosetta__list-item--unordered">non-destructively display the history</li>
/// <li class="rosetta__list-item--unordered">recall the three values. </li></ul>
/// <br>For extra points, if the language of choice does not support history variables, 
/// demonstrate how this might be implemented.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
