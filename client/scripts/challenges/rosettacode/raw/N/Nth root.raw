
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Nth root
/// type: rosetta-code

/// categories:
/// Simple

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
///  
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <br>
/// Implement the algorithm to compute the principal <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Nth root" title="wp: Nth root"><span class="rosetta__text--italic">n</span>th root</a> <big>$\sqrt[n]A$</big> of a positive real number <big><span class="rosetta__text--italic">A</span></big>, as explained at the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Nth root algorithm" title="wp: Nth root algorithm">Wikipedia page</a>.
/// <br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function nthRoot(num, nArg, precArg) {
  var n = nArg || 2;
  var prec = precArg || 12;
  
  var x = 1; // Initial guess.
  for (var i=0; i<prec; i++) {
    x = 1/n * ((n-1)*x + (num / Math.pow(x, n-1)));
  }
  
  return x;
}

/// rawSolutions:
=={{header|JavaScript}}==
Gives the ''n'':nth root of ''num'', with precision ''prec''. (''n'' defaults to 2 [e.g. sqrt], ''prec'' defaults to 12.)

<lang javascript>function nthRoot(num, nArg, precArg) {
  var n = nArg || 2;
  var prec = precArg || 12;
  
  var x = 1; // Initial guess.
  for (var i=0; i<prec; i++) {
    x = 1/n * ((n-1)*x + (num / Math.pow(x, n-1)));
  }
  
  return x;
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
