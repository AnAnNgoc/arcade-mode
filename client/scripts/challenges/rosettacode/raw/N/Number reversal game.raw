
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Number reversal game
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Given a jumbled list of the numbers <span class="rosetta__text--bold">1</span> to <span class="rosetta__text--bold">9</span> that are definitely <span class="rosetta__text--italic">not</span> in 
/// ascending order.
/// <br>
/// Show the list, &nbsp; and then ask the player how many digits from the 
/// left to reverse. 
/// <br>
/// Reverse those digits, &nbsp; then ask again, &nbsp; until all the digits end up in ascending order.
/// <br>
/// <br>
/// The score is the count of the reversals needed to attain the ascending order.
/// <br>
/// <br>
/// Note: Assume the player's input does not need extra validation.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Sorting algorithms/Pancake sort" title="Sorting algorithms/Pancake sort">Sorting algorithms/Pancake sort</a></li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Pancake sorting" title="wp: Pancake sorting">Pancake sorting</a>.</li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Topswops" title="Topswops">Topswops</a></li></ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function endGame(progress) {
    var scoreId = progress.scoreId,
        result = 'You took ' + progress.count + ' attempts to put the digits in order!';
    if (progress.abort === true) {
        result = 'Game aborted.';
    }
    document.getElementById(scoreId).innerHTML = result;
}

function reverseFirstN(arr, n) {
    var reversed = arr.slice(0, n).reverse();
    return reversed.concat(arr.slice(n));
}

function isSorted(arr) {
    return arr.slice(0).sort().toString() === arr.toString();
}

function gameLoop(progress) {
    if (isSorted(progress.arr)) {
        endGame(progress);
    } else {
        var n = parseInt(window.prompt('How many elements to reverse?', ''), 10);
        if (isNaN(n)) {
            progress.abort = true;
        } else {
            progress.arr = reverseFirstN(progress.arr, n);
            progress.innerHTML += '<p>' + progress.arr + '</p>';
            progress.count += 1;
        }
        if (progress.abort !== true) {
            // allow window to repaint before next guess
            setTimeout(function () {
                gameLoop(progress);
            }, 1);
        }
    }
}

function knuth_shuffle(a) {
    var n = a.length,
        r,
        temp;
    while (n > 1) {
        r = Math.floor(n * Math.random());
        n -= 1;
        temp = a[n];
        a[n] = a[r];
        a[r] = temp;
    }
    return a;
}

function playGame(startId, progressId, scoreId) {
    var progress = document.getElementById(progressId);
    progress.arr = knuth_shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);
    document.getElementById(startId).innerHTML = '<p>' + progress.arr.toString() + '</p>';

    progress.count = 0;
    progress.scoreId = scoreId;

    // allow window to repaint before prompting for a guess
    setTimeout(function () {
        gameLoop(progress);
    }, 1);
}

playGame('start', 'progress', 'score');

/// rawSolutions:
=={{header|JavaScript}}==
Use <code>knuth_shuffle()</code> function from [[Knuth shuffle#JavaScript|here]].

<lang html4strict><html>
<head>
    <title>Number Reversal Game</title>
</head>
 
<body>
<div id="start"></div>
<div id="progress"></div>
<div id="score"></div>
<script type="text/javascript"></lang>
<lang javascript>function endGame(progress) {
    var scoreId = progress.scoreId,
        result = 'You took ' + progress.count + ' attempts to put the digits in order!';
    if (progress.abort === true) {
        result = 'Game aborted.';
    }
    document.getElementById(scoreId).innerHTML = result;
}

function reverseFirstN(arr, n) {
    var reversed = arr.slice(0, n).reverse();
    return reversed.concat(arr.slice(n));
}

function isSorted(arr) {
    return arr.slice(0).sort().toString() === arr.toString();
}

function gameLoop(progress) {
    if (isSorted(progress.arr)) {
        endGame(progress);
    } else {
        var n = parseInt(window.prompt('How many elements to reverse?', ''), 10);
        if (isNaN(n)) {
            progress.abort = true;
        } else {
            progress.arr = reverseFirstN(progress.arr, n);
            progress.innerHTML += '<p>' + progress.arr + '</p>';
            progress.count += 1;
        }
        if (progress.abort !== true) {
            // allow window to repaint before next guess
            setTimeout(function () {
                gameLoop(progress);
            }, 1);
        }
    }
}

function knuth_shuffle(a) {
    var n = a.length,
        r,
        temp;
    while (n > 1) {
        r = Math.floor(n * Math.random());
        n -= 1;
        temp = a[n];
        a[n] = a[r];
        a[r] = temp;
    }
    return a;
}

function playGame(startId, progressId, scoreId) {
    var progress = document.getElementById(progressId);
    progress.arr = knuth_shuffle([1, 2, 3, 4, 5, 6, 7, 8, 9]);
    document.getElementById(startId).innerHTML = '<p>' + progress.arr.toString() + '</p>';

    progress.count = 0;
    progress.scoreId = scoreId;

    // allow window to repaint before prompting for a guess
    setTimeout(function () {
        gameLoop(progress);
    }, 1);
}

playGame('start', 'progress', 'score');</lang>
<lang html4strict></script>
</body>
</html></lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
