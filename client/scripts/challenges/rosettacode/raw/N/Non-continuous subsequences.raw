
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Non-continuous subsequences
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// Consider some sequence of elements. (It differs from a mere set of elements by having an ordering among members.)
/// <br>
/// A <span class="rosetta__text--italic">subsequence</span> contains some subset of the elements of this sequence, in the same order.
/// <br>
/// A <span class="rosetta__text--italic">continuous</span> subsequence is one in which no elements are missing between the first and last elements of the subsequence.
/// <br>
/// Note: Subsequences are defined <span class="rosetta__text--italic">structurally</span>, not by their contents. 
/// So a sequence <span class="rosetta__text--italic">a,b,c,d</span> will always have the same subsequences and continuous subsequences, no matter which values are substituted; it may even be the same value.
/// <br>
/// <span class="rosetta__text--bold">Task</span>: Find all non-continuous subsequences for a given sequence. 
/// <br>
/// Example: For the sequence &nbsp; <span class="rosetta__text--italic">1,2,3,4</span>, &nbsp; there are five non-continuous subsequences, namely: 
/// <span class="rosetta__text--indented">:::* &nbsp; <span class="rosetta__text--italic">1,3</span></span>
/// <span class="rosetta__text--indented">:::* &nbsp; <span class="rosetta__text--italic">1,4</span></span>
/// <span class="rosetta__text--indented">:::* &nbsp; <span class="rosetta__text--italic">2,4</span></span>
/// <span class="rosetta__text--indented">:::* &nbsp; <span class="rosetta__text--italic">1,3,4</span></span>
/// <span class="rosetta__text--indented">:::* &nbsp; <span class="rosetta__text--italic">1,2,4</span></span>
/// <br>
/// <span class="rosetta__text--bold">Goal</span>: There are different ways to calculate those subsequences. Demonstrate algorithm(s) that are natural for the language.
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function non_continuous_subsequences(ary) {
    var non_continuous = new Array();
    for (var i = 0; i < ary.length; i++) {
        if (! is_array_continuous(ary[i])) {
            non_continuous.push(ary[i]);
        }
    }
    return non_continuous;
}

function is_array_continuous(ary) {
    if (ary.length < 2)
        return true;
    for (var j = 1; j < ary.length; j++) {
        if (ary[j] - ary[j-1] != 1) {
            return false;
        }
    }
    return true;
}

load('json2.js'); /* http://www.json.org/js.html */

print(JSON.stringify( non_continuous_subsequences( powerset([1,2,3,4]))));

/// rawSolutions:
=={{header|JavaScript}}==
Uses powerset() function from [[Power Set#JavaScript|here]]. Uses a JSON stringifier from http://www.json.org/js.html

{{works with|SpiderMonkey}}
<lang javascript>function non_continuous_subsequences(ary) {
    var non_continuous = new Array();
    for (var i = 0; i < ary.length; i++) {
        if (! is_array_continuous(ary[i])) {
            non_continuous.push(ary[i]);
        }
    }
    return non_continuous;
}

function is_array_continuous(ary) {
    if (ary.length < 2)
        return true;
    for (var j = 1; j < ary.length; j++) {
        if (ary[j] - ary[j-1] != 1) {
            return false;
        }
    }
    return true;
}

load('json2.js'); /* http://www.json.org/js.html */

print(JSON.stringify( non_continuous_subsequences( powerset([1,2,3,4]))));</lang>

{{out}}
<pre>[[1,3],[1,4],[2,4],[1,2,4],[1,3,4]]</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
