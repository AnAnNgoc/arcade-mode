
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Narcissist
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// Quoting from the [http://esolangs.org/wiki/Narcissist Esolangs wiki page]:
/// <br>
/// <blockquote>
/// A <span class="rosetta__text--bold">narcissist</span> (or <span class="rosetta__text--bold">Narcissus program</span>) is the decision-problem version of a <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/quine" title="quine">quine</a>.
/// </blockquote><blockquote>
/// A quine, when run, takes no input, but produces a copy of its own source code at its output. In contrast, a narcissist reads a string of symbols from its input, and produces no output except a "1" or "accept" if that string matches its own source code, or a "0" or "reject" if it does not.
/// </blockquote>
/// <br>
/// For concreteness, in this task we shall assume that symbol = character. 
/// <br>
/// The narcissist should be able to cope with any finite input, whatever its length. 
/// <br>
/// Any form of output is allowed, as long as the program always halts, and "accept", "reject" and "not yet finished" are distinguishable.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var code='var q=String.fromCharCode(39);print("var code=" + q + code + q + "; eval(code)" == readline())'; eval(code)

/// rawSolutions:
=={{header|JavaScript}}==
{{works with|SpiderMonkey|1.7.0}}
Based upon [[Quine#Using_eval|one of the quines]]. Outputs 'true' if source is equal to inputted line (newline terminated), 'false' otherwise.
<lang javascript>var code='var q=String.fromCharCode(39);print("var code=" + q + code + q + "; eval(code)" == readline())'; eval(code)</lang>

{{works with|JScript}}
<lang javascript>var oFSO = new ActiveXObject("Scripting.FileSystemObject");
function readfile(fname) {
	var h = oFSO.OpenTextFile(fname, 1, false);
	var result = h.ReadAll();
	h.Close();
	return result;
}

if (0 === WScript.Arguments.UnNamed.Count) {
	WScript.Echo(WScript.ScriptName,"filename");
	WScript.Quit();
}

// first read self 
var self = readfile(WScript.ScriptFullName);
// read whatever file is given on commmand line
var whatever = readfile(WScript.Arguments.UnNamed(0));

// compare and contrast
WScript.Echo(self === whatever ? "Accept" : "Reject");
</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
