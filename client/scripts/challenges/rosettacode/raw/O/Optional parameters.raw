
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Optional parameters
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// <p class="rosetta__paragraph">Define a function/method/subroutine which sorts a sequence ("table") of sequences ("rows") of strings ("cells"), by one of the strings. Besides the input to be sorted, it shall have the following optional parameters:</p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">{|</span></p>
/// <p class="rosetta__paragraph">|</p>
/// <p class="rosetta__paragraph">----</p>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"> ordering</dt></dl>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented"> A function specifying the ordering of strings; lexicographic by default.</span></p>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"> column</dt></dl>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented"> An integer specifying which string of each row to compare; the first by default.</span></p>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"> reverse</dt></dl>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented"> Reverses the ordering.</span></p>
/// <p class="rosetta__paragraph">----</p>
/// <p class="rosetta__paragraph">|}</p><br/><p class="rosetta__paragraph">This task should be considered to include both positional and named optional parameters, as well as overloading on argument count as in Java or selector name as in Smalltalk, or, in the extreme, using different function names. Provide these variations of sorting <span class="rosetta__text--bold">in whatever way is most natural to your language</span>. If the language supports both methods naturally, you are encouraged to describe both.</p><br/><p class="rosetta__paragraph">Do not implement a sorting algorithm; this task is about the interface. If you can't use a built-in sort routine, just omit the implementation (with a comment).</p><br/><p class="rosetta__paragraph">See also:</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Named Arguments" title="Named Arguments">Named Arguments</a></li></ul><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function sorter(table, options) {
    opts = {}
    opts.ordering = options.ordering || 'lexicographic';
    opts.column   = options.column || 0;
    opts.reverse  = options.reverse || false;
    
    // ...
}

sorter(the_data, {reverse: true, ordering: 'numeric'});

/// rawSolutions:
=={{header|JavaScript}}==
See [[Named parameters#JavaScript]], to pass named parameters one uses an object with properties set:
<lang javascript>function sorter(table, options) {
    opts = {}
    opts.ordering = options.ordering || 'lexicographic';
    opts.column   = options.column || 0;
    opts.reverse  = options.reverse || false;
    
    // ...
}

sorter(the_data, {reverse: true, ordering: 'numeric'});</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
