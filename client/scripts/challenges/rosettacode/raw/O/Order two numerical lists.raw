
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Order two numerical lists
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// Write a function that orders two lists or arrays filled with numbers.
/// The function should accept two lists as arguments and return <code>true</code> if the first list should be ordered before the second, and <code>false</code> otherwise.
/// <br>
/// The order is determined by <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Lexicographical order#Ordering of sequences of various lengths" title="wp: Lexicographical order#Ordering of sequences of various lengths">lexicographic order</a>: Comparing the first element of each list. 
/// If the first elements are equal, then the second elements should be compared, and so on, until one of the list has no more elements. 
/// If the first list runs out of elements the result is <code>true</code>. 
/// If the second list or both run out of elements the result is <code>false</code>.
/// <br>
/// <small>Note: further clarification of lexicographical ordering is expounded on the talk page <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Talk:Order_two_numerical_lists#Lexicographic_order" title="Talk:Order_two_numerical_lists#Lexicographic_order">here</a> and <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Talk:Order_two_numerical_lists#Is_the_task_statement_consistent.3F" title="Talk:Order_two_numerical_lists#Is_the_task_statement_consistent.3F">here</a>.</small>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
(() => {
    'use strict';

    // <= is already defined for lists in JS

    // compare :: [a] -> [a] -> Bool
    const compare = (xs, ys) => xs <= ys;


    // TEST
    return [
        compare([1, 2, 1, 3, 2], [1, 2, 0, 4, 4, 0, 0, 0]),
        compare([1, 2, 0, 4, 4, 0, 0, 0], [1, 2, 1, 3, 2])
    ];

    // --> [false, true]
})()


/// rawSolutions:
=={{header|JavaScript}}==

===ES6===

<= is already defined for numeric lists in JavaScript

<lang JavaScript>(() => {
    'use strict';

    // <= is already defined for lists in JS

    // compare :: [a] -> [a] -> Bool
    const compare = (xs, ys) => xs <= ys;


    // TEST
    return [
        compare([1, 2, 1, 3, 2], [1, 2, 0, 4, 4, 0, 0, 0]),
        compare([1, 2, 0, 4, 4, 0, 0, 0], [1, 2, 1, 3, 2])
    ];

    // --> [false, true]
})()
</lang>

{{Out}}
<lang JavaScript>[false, true]</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
