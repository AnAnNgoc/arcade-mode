
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Operator precedence
/// type: rosetta-code

/// categories:
/// Simple

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
///  
/// <br>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Provide a list of &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/order of operations" title="wp: order of operations">precedence</a> &nbsp; and &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/operator associativity" title="wp: operator associativity">associativity</a> &nbsp; of all the operators and constructs that the language utilizes in descending order of precedence such that an operator which is listed on some row will be evaluated prior to any operator that is listed on a row further below it. 
/// <br>
/// Operators that are in the same cell (there may be several rows of operators listed in a cell) are evaluated with the same level of precedence, in the given direction. 
/// <br>
/// State whether arguments are passed by value or by reference.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
