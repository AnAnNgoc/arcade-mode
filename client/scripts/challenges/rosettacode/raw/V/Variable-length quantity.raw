
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Variable-length quantity
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph">Implement some operations on <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Variable-length quantity" title="wp: Variable-length quantity">variable-length quantities</a>, at least including conversions from a normal number in the language to the binary representation of the variable-length quantity for that number, and <span class="rosetta__text--italic">vice versa</span>. Any variants are acceptable.</p><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Task :</span> With above operations,</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">convert these two numbers 0x200000 (2097152 in decimal) and 0x1fffff (2097151 in decimal) into sequences of octets (an eight-bit byte); </li>
/// <li class="rosetta__list-item--unordered">display these sequences of octets;</li>
/// <li class="rosetta__list-item--unordered">convert these sequences of octets back to numbers, and check that they are equal to original numbers.</li></ul>
/// </div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
