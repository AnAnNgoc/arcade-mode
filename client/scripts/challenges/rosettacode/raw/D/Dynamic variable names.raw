
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Dynamic variable names
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Create a variable with a user-defined name. 
/// <br>
/// The variable name should <span class="rosetta__text--italic">not</span> be written in the program text, but should be taken from the user dynamically.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">See also</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Eval in environment" title="Eval in environment"></a> is a similar task.</li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var varname = 'foo';  // pretend a user input that
var value = 42;
eval('var ' + varname + '=' + value);

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>var varname = 'foo';  // pretend a user input that
var value = 42;
eval('var ' + varname + '=' + value);</lang>
Alternatively, without using eval:
<lang javascript>var varname = prompt('Variable name:');
var value = 42;
this[varname] = value;</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
