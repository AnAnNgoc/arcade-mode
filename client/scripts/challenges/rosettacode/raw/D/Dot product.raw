
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Dot product
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Create a function/use an in-built function, to compute the &nbsp; <span class="rosetta__text--bold"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Dot product" title="wp: Dot product">dot product</a></span>, &nbsp; also known as the &nbsp; <span class="rosetta__text--bold">scalar product</span> &nbsp; of two vectors. 
/// <br>
/// If possible, make the vectors of arbitrary length.
/// <br>
/// <br>
/// As an example, compute the dot product of the vectors:
/// <span class="rosetta__text--indented">::: &nbsp; <big> <code> [1, &nbsp;3, -5] </code> </big> &nbsp; &nbsp; and </span>
/// <span class="rosetta__text--indented">::: &nbsp; <big> <code> [4,      -2, -1] </code> </big> </span>
/// <br>
/// <br>
/// If implementing the dot product of two vectors directly:
/// <span class="rosetta__text--indented">::* &nbsp; each vector must be the same length</span>
/// <span class="rosetta__text--indented">::* &nbsp; multiply corresponding terms from each vector</span>
/// <span class="rosetta__text--indented">::* &nbsp; sum the products &nbsp; (to produce the answer)</span>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related task:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Vector products" title="Vector products">Vector products</a></li></ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function dot_product(ary1, ary2) {
    if (ary1.length != ary2.length)
        throw "can't find dot product: arrays have different lengths";
    var dotprod = 0;
    for (var i = 0; i < ary1.length; i++)
        dotprod += ary1[i] * ary2[i];
    return dotprod;
}

print(dot_product([1,3,-5],[4,-2,-1])); // ==> 3
print(dot_product([1,3,-5],[4,-2,-1,0])); // ==> exception

/// rawSolutions:
=={{header|JavaScript}}==
===ES5===
<lang javascript>function dot_product(ary1, ary2) {
    if (ary1.length != ary2.length)
        throw "can't find dot product: arrays have different lengths";
    var dotprod = 0;
    for (var i = 0; i < ary1.length; i++)
        dotprod += ary1[i] * ary2[i];
    return dotprod;
}

print(dot_product([1,3,-5],[4,-2,-1])); // ==> 3
print(dot_product([1,3,-5],[4,-2,-1,0])); // ==> exception</lang>

We could also use map and reduce in lieu of iteration,

<lang javascript>function dotp(x,y) {
    function dotp_sum(a,b) { return a + b; }
    function dotp_times(a,i) { return x[i] * y[i]; }
    if (x.length != y.length)
        throw "can't find dot product: arrays have different lengths";
    return x.map(dotp_times).reduce(dotp_sum,0);
}

dotp([1,3,-5],[4,-2,-1]); // ==> 3
dotp([1,3,-5],[4,-2,-1,0]); // ==> exception</lang>

===ES6===
Composing functional primitives into a '''dotProduct()''' which returns '''undefined''' (rather than an error) when the array lengths are unmatched.

<lang JavaScript>(() => {
    'use strict';

    // dotProduct :: [Int] -> [Int] -> Int
    const dotProduct = (xs, ys) => {
        const sum = xs => xs ? xs.reduce((a, b) => a + b, 0) : undefined;

        return xs.length === ys.length ? (
            sum(zipWith((a, b) => a * b, xs, ys))
        ) : undefined;
    }

    // zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
    const zipWith = (f, xs, ys) => {
        const ny = ys.length;
        return (xs.length <= ny ? xs : xs.slice(0, ny))
            .map((x, i) => f(x, ys[i]));
    }

    return dotProduct([1, 3, -5], [4, -2, -1]);
})();</lang>

{{Out}}
<lang JavaScript>3</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
