Digital root

{{task}}

The digital root, $X$, of a number, $n$, is calculated:
: find $X$ as the sum of the digits of $n$
: find a new $X$ by summing the digits of $X$, repeating until $X$ has only one digit.

The additive persistence is the number of summations required to obtain the single digit. 

The task is to calculate the additive persistence and the digital root of a number, e.g.:
:$627615$ has additive persistence $2$ and digital root of $9$;
:$39390$ has additive persistence $2$ and digital root of $6$;
:$588225$ has additive persistence $2$ and digital root of $3$;
:$393900588225$ has additive persistence $2$ and digital root of $9$;

The digital root may be calculated in bases other than 10.


;See:
* <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Casting out nines]] for this wiki's use of this procedure.
* [[Digital root/Multiplicative digital root]]
* [[Sum digits of an integer]]
* [[oeis:A010888" title="Casting out nines]] for this wiki's use of this procedure.
* [[Digital root/Multiplicative digital root]]
* [[Sum digits of an integer]]
* [[oeis:A010888">Digital root sequence on OEIS</a>
* <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/oeis:A031286" title="oeis:A031286">Additive persistence sequence on OEIS</a>
* [[Iterated digits squaring]]
<br><br>


=={{header|JavaScript}}==
<lang JavaScript>/// Digital root of 'x' in base 'b'.
/// @return {addpers, digrt}
function digitalRootBase(x,b) {
   if (x < b)
      return {addpers:0, digrt:x};

   var fauxroot = 0;
   while (b <= x) {
      x = (x / b) | 0;
      fauxroot += x % b;
   }
   
   var rootobj = digitalRootBase(fauxroot,b);
   rootobj.addpers += 1;
   return rootobj;
}</lang>

