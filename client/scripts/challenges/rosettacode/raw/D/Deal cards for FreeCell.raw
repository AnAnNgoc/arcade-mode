
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Deal cards for FreeCell
/// type: rosetta-code

/// categories:
/// Cards

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
///  
/// <br>
/// <span class="rosetta__text--italic">Free Cell</span> is the solitaire card game that Paul Alfille introduced to the PLATO system in 1978. Jim Horne, at Microsoft, changed the name to <span class="rosetta__text--italic">FreeCell</span> and reimplemented the game for <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/DOS" title="DOS">DOS</a>, then <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Windows" title="Windows">Windows</a>. <br>
/// This version introduced 32000 numbered deals. (The [http://www.solitairelaboratory.com/fcfaq.html FreeCell FAQ] tells this history.)
/// <br>
/// As the game became popular, Jim Horne disclosed [http://www.solitairelaboratory.com/mshuffle.txt the algorithm], and other implementations of FreeCell began to reproduce the Microsoft deals. <br>
/// These deals are numbered from 1 to 32000. 
/// Newer versions from Microsoft have 1 million deals, numbered from 1 to 1000000; some implementations allow numbers outside that range.
/// <br>
/// The algorithm uses this <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/linear congruential generator" title="linear congruential generator">linear congruential generator</a> from Microsoft C:
/// <br>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">$state_{n + 1} \equiv 214013 \times state_n + 2531011 \pmod{2^{31}}$</li>
/// <li class="rosetta__list-item--unordered">$rand_n = state_n \div 2^{16}$</li>
/// <li class="rosetta__list-item--unordered">$rand_n$ is in range 0 to 32767.</li>
/// <li class="rosetta__list-item--unordered">Rosetta Code has another task, <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/linear congruential generator" title="linear congruential generator">linear congruential generator</a>, with code for this RNG in several languages.</li></ul>
/// <br>
/// The algorithm follows:
/// <br>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">Seed the RNG with the number of the deal.</li>
/// <li class="rosetta__list-item--ordered">Create an <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/array" title="array">array</a> of 52 cards: Ace of Clubs, Ace of Diamonds, Ace of Hearts, Ace of Spades, 2 of Clubs, 2 of Diamonds, and so on through the ranks: Ace, 2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King. The array indexes are 0 to 51, with Ace of Clubs at 0, and King of Spades at 51.</li>
/// <li class="rosetta__list-item--ordered">Until the array is empty:</li>
/// <li class="rosetta__list-item--ordered">* Choose a random card at <span class="rosetta__text--italic">index</span> &equiv; <span class="rosetta__text--italic">next random number</span> (mod <span class="rosetta__text--italic">array length</span>).</li>
/// <li class="rosetta__list-item--ordered">* Swap this random card with the last card of the array.</li>
/// <li class="rosetta__list-item--ordered">* Remove this random card from the array. (Array length goes down by 1.)</li>
/// <li class="rosetta__list-item--ordered">* Deal this random card.</li>
/// <li class="rosetta__list-item--ordered">Deal all 52 cards, face up, across 8 columns. The first 8 cards go in 8 columns, the next 8 cards go on the first 8 cards, and so on.</li></ol>
/// {| class="wikitable"
/// !| Order to deal cards
/// !| Game #1
/// !| Game #617
/// |-
/// || <pre> 1  2  3  4  5  6  7  8
///  9 10 11 12 13 14 15 16
/// 17 18 19 20 21 22 23 24
/// 25 26 27 28 29 30 31 32
/// 33 34 35 36 37 38 39 40
/// 41 42 43 44 45 46 47 48
/// 49 50 51 52</pre>
/// || <pre>JD 2D 9H JC 5D 7H 7C 5H
/// KD KC 9S 5S AD QC KH 3H
/// 2S KS 9D QD JS AS AH 3C
/// 4C 5C TS QH 4H AC 4D 7S
/// 3S TD 4S TH 8H 2C JH 7D
/// 6D 8S 8D QS 6C 3D 8C TC
/// 6S 9C 2H 6H</pre>
/// || <pre>7D AD 5C 3S 5S 8C 2D AH
/// TD 7S QD AC 6D 8H AS KH
/// TH QC 3H 9D 6S 8D 3D TC
/// KD 5H 9S 3C 8S 7H 4D JS
/// 4C QS 9C 9H 7C 6H 2C 2S
/// 4S TS 2H 5D JC 6C JH QH
/// JD KS KC 4H</pre>
/// |}
/// <br>
/// Deals can also be checked against [http://freecellgamesolutions.com/ FreeCell solutions to 1000000 games]. 
/// (Summon a video solution, and it displays the initial deal.)
/// <br>
/// Write a program to take a deal number and deal cards in the same order as this algorithm. 
/// The program may display the cards with ASCII, with Unicode, by drawing graphics, or any other way.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
"use strict";
/*
 * Microsoft C Run-time-Library-compatible Random Number Generator
 * Copyright by Shlomi Fish, 2011.
 * Released under the MIT/X11 License
 * ( http://en.wikipedia.org/wiki/MIT_License ).
 * */
/* This uses Joose 2.x-or-above, an object system for JavaScript - http://code.google.com/p/joose-js/ . */

Class('MSRand', {
    has: {
        seed: { is: rw, },
    },
    methods: {
        rand: function() {
            this.setSeed((this.getSeed() * 214013 + 2531011) & 0x7FFFFFFF);
            return ((this.getSeed() >> 16) & 0x7fff);
        },
        max_rand: function(mymax) {
            return this.rand() % mymax;
        },
        shuffle: function(deck) {
            if (deck.length) {
                var i = deck.length;
                while (--i) {
                    var j = this.max_rand(i+1);
                    var tmp = deck[i];
                    deck[i] = deck[j];
                    deck[j] = tmp;
                }
            }
            return deck;
        },
    },
});

/*
 * Microsoft Windows Freecell / Freecell Pro boards generation.
 *
 * See:
 *
 * - http://rosettacode.org/wiki/Deal_cards_for_FreeCell
 *
 * - http://www.solitairelaboratory.com/mshuffle.txt
 *
 * Under MIT/X11 Licence.
 *
 * */

function deal_ms_fc_board(seed) {
    var randomizer = new MSRand({ seed: seed });
    var num_cols = 8;

    var _perl_range = function(start, end) {
        var ret = [];

        for (var i = start; i <= end; i++) {
            ret.push(i);
        }

        return ret;
    };

    var columns = _perl_range(0, num_cols-1).map(function () { return []; });
    var deck = _perl_range(0, 4*13-1);

    randomizer.shuffle(deck);

    deck = deck.reverse()

    for (var i = 0; i < 52; i++) {
        columns[i % num_cols].push(deck[i]);
    }

    var render_card = function (card) {
        var suit = (card % 4);
        var rank = Math.floor(card / 4);

        return "A23456789TJQK".charAt(rank) + "CDHS".charAt(suit);
    }

    var render_column = function(col) {
        return ": " + col.map(render_card).join(" ") + "\n";
    }

    return columns.map(render_column).join("");
}


/// rawSolutions:
=={{header|JavaScript}}==

<lang javascript>"use strict";
/*
 * Microsoft C Run-time-Library-compatible Random Number Generator
 * Copyright by Shlomi Fish, 2011.
 * Released under the MIT/X11 License
 * ( http://en.wikipedia.org/wiki/MIT_License ).
 * */
/* This uses Joose 2.x-or-above, an object system for JavaScript - http://code.google.com/p/joose-js/ . */

Class('MSRand', {
    has: {
        seed: { is: rw, },
    },
    methods: {
        rand: function() {
            this.setSeed((this.getSeed() * 214013 + 2531011) & 0x7FFFFFFF);
            return ((this.getSeed() >> 16) & 0x7fff);
        },
        max_rand: function(mymax) {
            return this.rand() % mymax;
        },
        shuffle: function(deck) {
            if (deck.length) {
                var i = deck.length;
                while (--i) {
                    var j = this.max_rand(i+1);
                    var tmp = deck[i];
                    deck[i] = deck[j];
                    deck[j] = tmp;
                }
            }
            return deck;
        },
    },
});

/*
 * Microsoft Windows Freecell / Freecell Pro boards generation.
 *
 * See:
 *
 * - http://rosettacode.org/wiki/Deal_cards_for_FreeCell
 *
 * - http://www.solitairelaboratory.com/mshuffle.txt
 *
 * Under MIT/X11 Licence.
 *
 * */

function deal_ms_fc_board(seed) {
    var randomizer = new MSRand({ seed: seed });
    var num_cols = 8;

    var _perl_range = function(start, end) {
        var ret = [];

        for (var i = start; i <= end; i++) {
            ret.push(i);
        }

        return ret;
    };

    var columns = _perl_range(0, num_cols-1).map(function () { return []; });
    var deck = _perl_range(0, 4*13-1);

    randomizer.shuffle(deck);

    deck = deck.reverse()

    for (var i = 0; i < 52; i++) {
        columns[i % num_cols].push(deck[i]);
    }

    var render_card = function (card) {
        var suit = (card % 4);
        var rank = Math.floor(card / 4);

        return "A23456789TJQK".charAt(rank) + "CDHS".charAt(suit);
    }

    var render_column = function(col) {
        return ": " + col.map(render_card).join(" ") + "\n";
    }

    return columns.map(render_column).join("");
}
</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
