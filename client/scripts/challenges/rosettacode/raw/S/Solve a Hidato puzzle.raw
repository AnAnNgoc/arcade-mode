
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Solve a Hidato puzzle
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// The task is to write a program which solves <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Hidato" title="wp: Hidato">Hidato (aka Hidoku) puzzles</a>.
/// <br>
/// The rules are:
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">You are given a grid with some numbers placed in it. The other squares in the grid will be blank.</li>
/// <br>
/// </ul>** The grid is not necessarily rectangular.
/// ** The grid may have holes in it.
/// ** The grid is always connected.
/// ** The number “1” is always present, as is another number that is equal to the number of squares in the grid. Other numbers are present so as to force the solution to be unique.
/// ** It may be assumed that the difference between numbers present on the grid is not greater than lucky 13.
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">The aim is to place a natural number in each blank square so that in the sequence of numbered squares from “1” upwards, each square is in the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Moore neighborhood]] of the squares immediately before and after it in the sequence (except for the first and last squares, of course, which only have one-sided constraints).</li>
/// <br>
/// </ul>** Thus, if the grid was overlaid on a chessboard, a king would be able to make legal moves along the path from first to last square in numerical order.
/// ** A square may only contain one number.
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">In a proper Hidato puzzle, the solution is unique.</li>
/// <br>
/// </ul>
/// <br>For example the following problem
/// [[File:Hidato_Start.png" title="wp: Moore neighborhood]] of the squares immediately before and after it in the sequence (except for the first and last squares, of course, which only have one-sided constraints).
/// ** Thus, if the grid was overlaid on a chessboard, a king would be able to make legal moves along the path from first to last square in numerical order.
/// ** A square may only contain one number.
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">In a proper Hidato puzzle, the solution is unique.</li>
/// <br>
/// </ul>
/// <br>For example the following problem
/// [[File:Hidato_Start.png">center|Sample Hidato problem, from Wikipedia</a>
/// <br>
/// has the following solution, with path marked on it:
/// <br>
/// <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/File:HEnd.png" title="File:HEnd.png">center|Solution to sample Hidato problem</a>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">[[A* search algorithm]]</li>
/// <li class="rosetta__list-item">[[N-queens problem]]</li>
/// <li class="rosetta__list-item">[[Solve a Holy Knight's tour]]</li>
/// <li class="rosetta__list-item">[[Solve a Knight's tour]]</li>
/// <li class="rosetta__list-item">[[Solve a Hopido puzzle]]</li>
/// <li class="rosetta__list-item">[[Solve a Numbrix puzzle]]</li>
/// <li class="rosetta__list-item">[[Solve the no connection puzzle]];</li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
