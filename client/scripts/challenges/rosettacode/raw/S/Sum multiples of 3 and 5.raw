Sum multiples of 3 and 5

{{task}}

;Task:
The objective is to write a function that finds the sum of all positive multiples of 3 or 5 below <span class="rosetta__text--italic">n</span>. 

Show output for <span class="rosetta__text--italic">n</span> = 1000.


<span class="rosetta__text--bold">Extra credit:</span> do this efficiently for <span class="rosetta__text--italic">n</span> = 1e20 or higher.
<br><br>


=={{header|JavaScript}}==

===ES5===

JavaScript is better equipped for flexibility than for scale. The value of  <lang JavaScript> Number.MAX_SAFE_INTEGER</lang> is 9007199254740991, or 2^53 - 1 – resulting from an IEEE 754 double-precision floating point representation of numeric values).

As ''Number.MAX_SAFE_INTEGER < 1E20'' evaluates to ''true'', the most obvious JS attack on a solution for 1E20 might involve some string processing …  

At more modest scales, however, we can generalise a little to allow for an arbitrary list of integer factors, and write a simple generate, filter and sum approach:

<lang JavaScript>(function (lstFactors, intExponent) {

    // [n] -> n -> n
    function sumMultiplesBelow(lstIntegers, limit) {
        return range(1, limit - 1).filter(function (x) {
            return isMultiple(lstIntegers, x);
        }).reduce(function (a, n) {
            return a + n;
        }, 0)
    }

    // [n] -> n -> bool
    function isMultiple(lst, n) {
        var i = lng;
        while (i--)
            if (n % (lst[i]) === 0) return true;
        return false;
    }

    // [m..n]
    function range(m, n) {
        var a = Array(n - m + 1),
            i = n + 1;
        while (i--) a[i - 1] = i;
        return a;
    }


    /*      TESTING     */

    // [[a]] -> bool -> s -> s
    function wikiTable(lstRows, blnHeaderRow, strStyle) {
        return '{| class="wikitable" ' + (
            strStyle ? 'style="' + strStyle + '"' : ''
        ) + lstRows.map(function (lstRow, iRow) {
            var strDelim = ((blnHeaderRow && !iRow) ? '!' : '|');

            return '\n|-\n' + strDelim + ' ' + lstRow.map(function (v) {
                return typeof v === 'undefined' ? ' ' : v;
            }).join(' ' + strDelim + strDelim + ' ');
        }).join('') + '\n|}';
    }

    var lng = lstFactors.length,
        lstSorted = lstFactors.slice(0).sort();

    var lstTable = [['Below', 'Sum']].concat(
        range(1, intExponent).map(function (x) {
            var pwr = Math.pow(10, x);

            return ['10^' + x, sumMultiplesBelow(lstSorted, pwr)];
        })
    );

    return 'For ' + JSON.stringify(lstFactors) + ':\n\n' +
        wikiTable(lstTable, true) + '\n\n' +
        JSON.stringify(lstTable);

})([3, 5], 8);</lang>


For [3,5]:

{| class="wikitable" 
|-
! Below !! Sum
|-
| 10^1 || 23
|-
| 10^2 || 2318
|-
| 10^3 || 233168
|-
| 10^4 || 23331668
|-
| 10^5 || 2333316668
|-
| 10^6 || 233333166668
|-
| 10^7 || 23333331666668
|-
| 10^8 || 2333333316666668
|}

<lang JavaScript> [["Below","Sum"],["10^1",23],["10^2",2318],["10^3",233168],
 ["10^4",23331668],["10^5",2333316668],["10^6",233333166668],
 ["10^7",23333331666668],["10^8",2333333316666668]]</lang>
====With wheel increments====
<lang JavaScript>function sm35(n){
	var s=0, inc=[3,2,1,3,1,2,3]
	for (var j=6, i=0; i<n; j+=j==6?-j:1, i+=inc[j]) s+=i
	return s
}</lang>
====With triangular numbers====
<lang JavaScript>function sm35(n){
	return tri(n,3) + tri(n,5) - tri(n,15)
	function tri(n, f) {
		n = Math.floor((n-1) / f)
		return f * n * (n+1) / 2
	}
}</lang>
'''This:'''
<lang JavaScript>for (var i=1, n=10; i<9; n*=10, i+=1) {
	document.write(10, '<sup>', i, '</sup> ',  sm35(n), '<br>')
}</lang>
{{out}}
 10<sup>1</sup> 23
 10<sup>2</sup> 2318
 10<sup>3</sup> 233168
 10<sup>4</sup> 23331668
 10<sup>5</sup> 2333316668
 10<sup>6</sup> 233333166668
 10<sup>7</sup> 23333331666668
 10<sup>8</sup> 2333333316666668


===ES6===

<lang JavaScript>(() => {

    // Area under straight line
    // between first multiple and last.

    // sumMults :: Int -> Int -> Int
    const sumMults = (n, factor) => {
        const n1 = quot(n - 1, factor);
        return quot(factor * n1 * (n1 + 1), 2);
    };

    // sum35 :: Int -> Int
    const sum35 = n => sumMults(n, 3) + sumMults(n, 5) - sumMults(n, 15);


    // GENERIC ----------------------------------------------------------------

    // enumFromTo :: Int -> Int -> [Int]
    const enumFromTo = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // Integral a => a -> a -> a
    const quot = (n, m) => Math.floor(n / m);

    // TEST -------------------------------------------------------------------

    // Sums for 10^1 thru 10^8
    return enumFromTo(1, 8)
        .map(n => Math.pow(10, n))
        .reduce((a, x) => (
            a[x.toString()] = sum35(x),
            a
        ), {});
})();</lang>
{{Out}}
<lang JavaScript>{"10":23, "100":2318, "1000":233168, "10000":23331668,
"100000":2333316668, "1000000":233333166668, "10000000":23333331666668,
"100000000":2333333316666668}</lang>

