
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Sorting algorithms/Comb sort
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Implement a &nbsp; <span class="rosetta__text--italic">comb sort</span>. 
/// <br>
/// <br>
/// The <span class="rosetta__text--bold">Comb Sort</span> is a variant of the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Bubble Sort" title="Bubble Sort"></a>. 
/// <br>
/// Like the <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Shell sort" title="Shell sort"></a>, the Comb Sort increases the gap used in comparisons and exchanges.
/// <br>
/// Dividing the gap by &nbsp; <big>$(1-e^{-\varphi})^{-1} \approx 1.247330950103979$ </big> &nbsp; works best, but &nbsp; <big> 1.3</big> &nbsp; may be more practical. 
/// <br>
/// <br>
/// Some implementations use the insertion sort once the gap is less than a certain amount. 
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Also see:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">&nbsp; the Wikipedia article: &nbsp; <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Comb sort" title="wp: Comb sort">Comb sort</a>.</li>
/// <br>
/// </ul>
/// <br>
/// Variants:
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">Combsort11 makes sure the gap ends in (11, 8, 6, 4, 3, 2, 1), which is significantly faster than the other two possible endings.</li>
/// <li class="rosetta__list-item--unordered">Combsort with different endings changes to a more efficient sort when the data is almost sorted (when the gap is small). &nbsp; Comb sort with a low gap isn't much better than the Bubble Sort.</li>
/// <br>
/// </ul>
/// <br>
/// Pseudocode:
///  <span class="rosetta__text--bold">function</span> combsort(<span class="rosetta__text--bold">array</span> input)
///      gap := input<span class="rosetta__text--bold">.size</span> <span class="rosetta__text--italic">//initialize gap size</span>
///      <span class="rosetta__text--bold">loop until</span> gap = 1 <span class="rosetta__text--bold">and</span> swaps = 0
///          <span class="rosetta__text--italic">//update the gap value for a next comb. Below is an example</span>
///          gap := int(gap / 1.25)
///          <span class="rosetta__text--bold">if</span> gap < 1
///            <span class="rosetta__text--italic">//minimum gap is 1</span>
///            gap := 1
///          <span class="rosetta__text--bold">end if</span>
///          i := 0
///          swaps := 0 <span class="rosetta__text--italic">//see <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Bubble Sort" title="Bubble Sort"></a> for an explanation</span>
///          <span class="rosetta__text--italic">//a single "comb" over the input list</span>
///          <span class="rosetta__text--bold">loop until</span> i + gap >= input<span class="rosetta__text--bold">.size</span> <span class="rosetta__text--italic">//see <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Shell sort" title="Shell sort"></a> for similar idea</span>
///              <span class="rosetta__text--bold">if</span> input[i] > input[i+gap]
///                  <span class="rosetta__text--bold">swap</span>(input[i], input[i+gap])
///                  swaps := 1 <span class="rosetta__text--italic">// Flag a swap has occurred, so the</span>
///                             <span class="rosetta__text--italic">// list is not guaranteed sorted</span>
///              <span class="rosetta__text--bold">end if</span>
///              i := i + 1
///          <span class="rosetta__text--bold">end loop</span>
///      <span class="rosetta__text--bold">end loop</span>
///  <span class="rosetta__text--bold">end function</span>
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:

  // Node 5.4.1 tested implementation (ES6)
  function is_array_sorted(arr) {
      var sorted = true;
      for (var i = 0; i < arr.length - 1; i++) {
          if (arr[i] > arr[i + 1]) {
              sorted = false;
              break;
          }
      }
      return sorted;
  }

  // Array to sort
  var arr = [4, 9, 0, 3, 1, 5];

  var iteration_count = 0;
  var gap = arr.length - 2;
  var decrease_factor = 1.25;

  // Until array is not sorted, repeat iterations
  while (!is_array_sorted(arr)) {
      // If not first gap
      if (iteration_count > 0)
      // Calculate gap
          gap = (gap == 1) ? gap : Math.floor(gap / decrease_factor);

      // Set front and back elements and increment to a gap
      var front = 0;
      var back = gap;
      while (back <= arr.length - 1) {
          // If elements are not ordered swap them
          if (arr[front] > arr[back]) {
              var temp = arr[front];
              arr[front] = arr[back];
              arr[back] = temp;
          }

          // Increment and re-run swapping
          front += 1;
          back += 1;
      }
      iteration_count += 1;
  }

  // Print the sorted array
  console.log(arr);
}

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>
  // Node 5.4.1 tested implementation (ES6)
  function is_array_sorted(arr) {
      var sorted = true;
      for (var i = 0; i < arr.length - 1; i++) {
          if (arr[i] > arr[i + 1]) {
              sorted = false;
              break;
          }
      }
      return sorted;
  }

  // Array to sort
  var arr = [4, 9, 0, 3, 1, 5];

  var iteration_count = 0;
  var gap = arr.length - 2;
  var decrease_factor = 1.25;

  // Until array is not sorted, repeat iterations
  while (!is_array_sorted(arr)) {
      // If not first gap
      if (iteration_count > 0)
      // Calculate gap
          gap = (gap == 1) ? gap : Math.floor(gap / decrease_factor);

      // Set front and back elements and increment to a gap
      var front = 0;
      var back = gap;
      while (back <= arr.length - 1) {
          // If elements are not ordered swap them
          if (arr[front] > arr[back]) {
              var temp = arr[front];
              arr[front] = arr[back];
              arr[back] = temp;
          }

          // Increment and re-run swapping
          front += 1;
          back += 1;
      }
      iteration_count += 1;
  }

  // Print the sorted array
  console.log(arr);
}</lang>


{{out}}
<pre>
 [0, 1, 3, 4, 5, 9]
</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
