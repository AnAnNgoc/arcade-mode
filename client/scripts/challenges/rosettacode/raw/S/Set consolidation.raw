
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Set consolidation
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">Given two sets of items then if any item is common to any set then the result of applying <span class="rosetta__text--italic">consolidation</span> to those sets is a set of sets whose contents is:</p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"> The two input sets if no common item exists between the two input sets of items.</li>
/// <li class="rosetta__list-item--unordered"> The single set that is the union of the two input sets if they share a common item.</li></ul>
/// <br>Given N sets of items where N>2 then the result is the same as repeatedly replacing all combinations of two sets by their consolidation until no further consolidation between set pairs is possible.
/// <p class="rosetta__paragraph">If N<2 then consolidation has no strict meaning and the input can be returned.</p><br/><dl class="rosetta__description-list"><dt class="rosetta__description-title"><span class="rosetta__text--bold">Example 1:</span></dt></dl>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">Given the two sets <tt>{A,B}</tt> and <tt>{C,D}</tt> then there is no common element between the sets and the result is the same as the input.</span></p>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"><span class="rosetta__text--bold">Example 2:</span></dt></dl>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">Given the two sets <tt>{A,B}</tt> and <tt>{B,D}</tt> then there is a common element <tt>B</tt> between the sets and the result is the single set <tt>{B,D,A}</tt>.  (Note that order of items in a set is immaterial: <tt>{A,B,D}</tt> is the same as <tt>{B,D,A}</tt> and <tt>{D,A,B}</tt>, etc).</span></p>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"><span class="rosetta__text--bold">Example 3:</span></dt></dl>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">Given the three sets <tt>{A,B}</tt> and <tt>{C,D}</tt> and <tt>{D,B}</tt> then there is no common element between the sets <tt>{A,B}</tt> and <tt>{C,D}</tt> but the sets <tt>{A,B}</tt> and <tt>{D,B}</tt> do share a common element that consolidates to produce the result <tt>{B,D,A}</tt>. On examining this result with the remaining set, <tt>{C,D}</tt>, they share a common element and so consolidate to the final output of the single set <tt>{A,B,C,D}</tt></span></p>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title"><span class="rosetta__text--bold">Example 4:</span></dt></dl>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">The consolidation of the five sets:</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:<tt>{H,I,K}</tt>, <tt>{A,B}</tt>, <tt>{C,D}</tt>, <tt>{D,B}</tt>, and <tt>{F,G,H}</tt></span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">Is the two sets:</span></p>
/// <p class="rosetta__paragraph"><span class="rosetta__text--indented">:<tt>{A, C, B, D}</tt>, and <tt>{G, F, I, H, K}</tt></span></p>
/// <br>
/// <p class="rosetta__paragraph"><span class="rosetta__text--bold">See also</span></p>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered"><a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Connected component (graph theory)" title="wp: Connected component (graph theory)">Connected component (graph theory)</a></li></ul><br><br>
/// </div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
