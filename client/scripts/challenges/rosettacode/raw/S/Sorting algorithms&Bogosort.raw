Sorting algorithms/Bogosort

{{task|Sorting Algorithms}}
{{Sorting Algorithm}}

;Task:
<a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Bogosort" title="wp: Bogosort">Bogosort</a> a list of numbers. 


Bogosort simply shuffles a collection randomly until it is sorted.

"Bogosort" is a perversely inefficient algorithm only used as an in-joke.  

Its average run-time is &nbsp; O(n!) &nbsp; because the chance that any given shuffle of a set will end up in sorted order is about one in &nbsp; <span class="rosetta__text--italic">n</span> &nbsp; factorial, &nbsp; and the worst case is infinite since there's no guarantee that a random shuffling will ever produce a sorted sequence. 

Its best case is &nbsp; O(n) &nbsp; since a single pass through the elements may suffice to order them.


Pseudocode:
 <span class="rosetta__text--bold">while not</span> InOrder(list) <span class="rosetta__text--bold">do</span>
    Shuffle(list)
 <span class="rosetta__text--bold">done</span>

<br>
The [[Knuth shuffle]] may be used to implement the shuffle part of this algorithm.
<br><br>


=={{header|JavaScript}}==
<lang javascript>shuffle = function(v) {
    for(var j, x, i = v.length; i; j = Math.floor(Math.random() * i), x = v[--i], v[i] = v[j], v[j] = x);
    return v;
};

isSorted = function(v){
    for(var i=1; i<v.length; i++) {
        if (v[i-1] > v[i]) { return false; }
    }
    return true;
}
		
bogosort = function(v){
    var sorted = false;
    while(sorted == false){
        v = shuffle(v);
        sorted = isSorted(v);
    }
    return v;
}</lang>

