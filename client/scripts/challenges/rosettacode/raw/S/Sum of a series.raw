
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Sum of a series
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// Compute the &nbsp; <span class="rosetta__text--bold">n</span><sup>th</sup> &nbsp; term of a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Series (mathematics)" title="wp: Series (mathematics)">series]], &nbsp; i.e. the sum of the &nbsp; <span class="rosetta__text--bold">n</span> &nbsp; first terms  of the corresponding [[wp:sequence|sequence</a>.  
/// <br>
/// Informally this value, or its limit when &nbsp; <span class="rosetta__text--bold">n</span> &nbsp; tends to infinity, is also called the <span class="rosetta__text--italic">sum of the series</span>, thus the title of this task.
/// <br>
/// For this task, use:
/// <span class="rosetta__text--indented">::::: <big>$S_n = \sum_{k=1}^n \frac{1}{k^2}$</big></span>
/// <br>
/// <br>
/// <span class="rosetta__text--indented">: and compute &nbsp; <big>$S_{1000}$</big></span>
/// <br>
/// <br>
/// This approximates the &nbsp;  <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Riemann zeta function" title="wp: Riemann zeta function">zeta function</a> &nbsp; for &nbsp; <big>S=2</big>, &nbsp; whose exact value
/// <br>
/// <span class="rosetta__text--indented">::::: <big>$\zeta(2) = {\pi^2\over 6}$</big></span>
/// <br>
/// is the solution of the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Basel problem" title="wp: Basel problem">Basel problem</a>.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function sum(a,b,fn) {
   var s = 0;
   for ( ; a <= b; a++) s += fn(a);
   return s;
}
 
 sum(1,1000, function(x) { return 1/(x*x) } )  // 1.64393456668156

/// rawSolutions:
=={{header|JavaScript}}==
===ES5===
<lang javascript>function sum(a,b,fn) {
   var s = 0;
   for ( ; a <= b; a++) s += fn(a);
   return s;
}
 
 sum(1,1000, function(x) { return 1/(x*x) } )  // 1.64393456668156</lang>

or, in a functional idiom:

<lang JavaScript>(function () {

  function sum(fn, lstRange) {
    return lstRange.reduce(
      function (lngSum, x) {
        return lngSum + fn(x);
      }, 0
    );
  }

  function range(m, n) {
    return Array.apply(null, Array(n - m + 1)).map(function (x, i) {
      return m + i;
    });
  }


  return sum(
    function (x) {
      return 1 / (x * x);
    },
    range(1, 1000)
  );

})();</lang>

{{Out}}

<lang JavaScript>1.6439345666815615</lang>

===ES6===
{{Trans|Haskell}}
<lang JavaScript>(() => {
    'use strict';

    // seriesSum :: Num a => (a -> a) -> [a] -> a
    const seriesSum = (f, xs) =>
        xs.reduce((a, x) => a + f(x), 0);


    // GENERIC ------------------------------------------

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // TEST ----------------------------------------------

    return seriesSum(x => 1 / (x * x), range(1, 1000));
})();</lang>

{{Out}}
<lang JavaScript>1.6439345666815615</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
