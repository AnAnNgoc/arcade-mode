
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Strip block comments
/// type: rosetta-code

/// categories:
/// String manipulation

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <br>
/// A block comment begins with a &nbsp; <span class="rosetta__text--italic">beginning delimiter</span> &nbsp; and ends with a &nbsp; <span class="rosetta__text--italic">ending delimiter</span>, &nbsp; including the delimiters. &nbsp; These delimiters are often multi-character sequences.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// Strip block comments from program text (of a programming language much like classic <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/C" title="C"></a>). 
/// <br>
/// Your demos should at least handle simple, non-nested and multi-line block comment delimiters.  
/// <br>
/// The block comment delimiters are the two-character sequence:
/// <span class="rosetta__text--indented">::* &nbsp; &nbsp; <big><big> <span class="rosetta__text--bold">/*</span> </big></big> &nbsp; &nbsp; (beginning delimiter)</span>
/// <span class="rosetta__text--indented">::* &nbsp; &nbsp; <big><big> <span class="rosetta__text--bold">*/</span> </big></big> &nbsp; &nbsp; (ending delimiter)</span>
/// <br>
/// <br>
/// Sample text for stripping:
/// <pre>
///   /**
///    * Some comments
///    * longer comments here that we can parse.
///    *
///    * Rahoo 
///    */
///    function subroutine() {
///     a = /* inline comment */ b + c ;
///    }
///    /*/ <-- tricky comments */
/// <br>
///    /**
///     * Another comment.
///     */
///     function something() {
///     }
/// </pre>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Extra credit:</dt></dl>
/// Ensure that the stripping code is not hard-coded to the particular delimiters described above, but instead allows the caller to specify them. &nbsp; (If your language supports them, &nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Optional parameters" title="Optional parameters">optional parameters</a> &nbsp; may be useful for this.)
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related task:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Strip comments from a string" title="Strip comments from a string"></a></li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
