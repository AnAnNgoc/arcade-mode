
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: SEDOLs
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// For each number list of <span class="rosetta__text--bold">6</span>-digit <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/SEDOL" title="wp: SEDOL">SEDOL</a>s, calculate and append the checksum digit.  
/// <br>
/// <br>
/// That is, given this input:
/// <pre>
/// 710889
/// B0YBKJ
/// 406566
/// B0YBLH
/// 228276
/// B0YBKL
/// 557910
/// B0YBKR
/// 585284
/// B0YBKT
/// B00030
/// </pre> 
/// Produce this output:
/// <pre>
/// 7108899
/// B0YBKJ7
/// 4065663
/// B0YBLH2
/// 2282765
/// B0YBKL9
/// 5579107
/// B0YBKR5
/// 5852842
/// B0YBKT7
/// B000300
/// </pre>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Extra credit:</dt></dl>
/// Check each input is correctly formed, especially with respect to valid characters allowed in a SEDOL string.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related tasks:</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Luhn test" title="Luhn test"></a></li>
/// <li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Calculate International Securities Identification Number" title="Calculate International Securities Identification Number">ISIN</a></li>
/// <br>
/// </ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function sedol(input) {
    return input + sedol_check_digit(input);
}

var weight = [1, 3, 1, 7, 3, 9, 1];
function sedol_check_digit(char6) {
    if (char6.search(/^[0-9BCDFGHJKLMNPQRSTVWXYZ]{6}$/) == -1)
        throw "Invalid SEDOL number '" + char6 + "'";
    var sum = 0;
    for (var i = 0; i < char6.length; i++)
        sum += weight[i] * parseInt(char6.charAt(i), 36);
    var check = (10 - sum%10) % 10;
    return check.toString();
}

var input = [ 
    '710889', 'B0YBKJ', '406566', 'B0YBLH', '228276',
    'B0YBKL', '557910', 'B0YBKR', '585284', 'B0YBKT',
    "BOATER" , "12345", "123456", "1234567"
];

var expected = [ 
    '7108899', 'B0YBKJ7', '4065663', 'B0YBLH2', '2282765',
    'B0YBKL9', '5579107', 'B0YBKR5', '5852842', 'B0YBKT7',
    null, null, '1234563', null
];

for (var i in input) {
    try {
        var sedolized = sedol(input[i]);
        if (sedolized == expected[i]) 
            print(sedolized);
        else
            print("error: calculated sedol for input " + input[i] + 
                  " is " + sedolized + ", but it should be " + expected[i]
            );
    }
    catch (e) {
        print("error: " + e);
    }
}

/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>function sedol(input) {
    return input + sedol_check_digit(input);
}

var weight = [1, 3, 1, 7, 3, 9, 1];
function sedol_check_digit(char6) {
    if (char6.search(/^[0-9BCDFGHJKLMNPQRSTVWXYZ]{6}$/) == -1)
        throw "Invalid SEDOL number '" + char6 + "'";
    var sum = 0;
    for (var i = 0; i < char6.length; i++)
        sum += weight[i] * parseInt(char6.charAt(i), 36);
    var check = (10 - sum%10) % 10;
    return check.toString();
}

var input = [ 
    '710889', 'B0YBKJ', '406566', 'B0YBLH', '228276',
    'B0YBKL', '557910', 'B0YBKR', '585284', 'B0YBKT',
    "BOATER" , "12345", "123456", "1234567"
];

var expected = [ 
    '7108899', 'B0YBKJ7', '4065663', 'B0YBLH2', '2282765',
    'B0YBKL9', '5579107', 'B0YBKR5', '5852842', 'B0YBKT7',
    null, null, '1234563', null
];

for (var i in input) {
    try {
        var sedolized = sedol(input[i]);
        if (sedolized == expected[i]) 
            print(sedolized);
        else
            print("error: calculated sedol for input " + input[i] + 
                  " is " + sedolized + ", but it should be " + expected[i]
            );
    }
    catch (e) {
        print("error: " + e);
    }
}</lang>
output
<pre>7108899
B0YBKJ7
4065663
B0YBLH2
2282765
B0YBKL9
5579107
B0YBKR5
5852842
B0YBKT7
error: Invalid SEDOL number 'BOATER'
error: Invalid SEDOL number '12345'
1234563
error: Invalid SEDOL number '1234567'</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
