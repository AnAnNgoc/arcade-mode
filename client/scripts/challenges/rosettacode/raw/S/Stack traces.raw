Stack traces

{{task|Programming environment operations}}
Many programming languages allow for introspection of the current call stack environment. This can be for a variety of purposes such as enforcing security checks, debugging, or for getting access to the stack frame of callers.


;Task:
Print out (in a manner considered suitable for the platform) the current call stack. 

The amount of information printed for each frame on the call stack is not constrained, but should include at least the name of the function or method at that level of the stack frame. 

You may explicitly add a call to produce the stack trace to the (example) code being instrumented for examination.

The task should allow the program to continue after generating the stack trace. 

The task report here must include the trace from a sample program.
<br><br>


=={{header|JavaScript}}==
There is no standard way to do this, but some implementations provide it.<br />
{{works with|Firefox}}
<lang javascript>try {
  throw new Error;
} catch(e) {
  alert(e.stack);
}</lang>

The following version works in many browsers but it infinitely loops when there is recursion:
<lang javascript>function foo () {
  var stack = "Stack trace:";
  for (var f = arguments.callee // current function
       ; f; f = f.caller) {
    stack += "\n" + f.name;
  }
  alert(stack);
}
foo();</lang>

