
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Stable marriage problem
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <p class="rosetta__paragraph">Solve the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Stable marriage problem" title="wp: Stable marriage problem">Stable marriage problem</a> using the Gale/Shapley algorithm.</p>
/// <br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Problem description</span><br></p>
/// <p class="rosetta__paragraph">Given an equal number of men and women to be paired for marriage, each man ranks all the women in order of his preference and each woman ranks all the men in order of her preference.</p><br/><p class="rosetta__paragraph">A stable set of engagements for marriage is one where no man prefers a woman over the one he is engaged to, where that other woman <span class="rosetta__text--italic">also</span> prefers that man over the one she is engaged to. I.e. with consulting marriages, there would be no reason for the engagements between the people to change.</p><br/><p class="rosetta__paragraph">Gale and Shapley proved that there is a stable set of engagements for any set of preferences and the first link above gives their algorithm for finding a set of stable engagements.</p>
/// <br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">Task Specifics</span><br></p>
/// <p class="rosetta__paragraph">Given ten males:</p>
/// <p class="rosetta__paragraph">abe, bob, col, dan, ed, fred, gav, hal, ian, jon</p>
/// <p class="rosetta__paragraph">And ten females:</p>
/// <p class="rosetta__paragraph">abi, bea, cath, dee, eve, fay, gay, hope, ivy, jan</p><br/><p class="rosetta__paragraph">And a complete list of ranked preferences, where the most liked is to the left:</p>
/// <p class="rosetta__paragraph">abe: abi, eve, cath, ivy, jan, dee, fay, bea, hope, gay</p>
/// <p class="rosetta__paragraph">bob: cath, hope, abi, dee, eve, fay, bea, jan, ivy, gay</p>
/// <p class="rosetta__paragraph">col: hope, eve, abi, dee, bea, fay, ivy, gay, cath, jan</p>
/// <p class="rosetta__paragraph">dan: ivy, fay, dee, gay, hope, eve, jan, bea, cath, abi</p>
/// <p class="rosetta__paragraph">ed: jan, dee, bea, cath, fay, eve, abi, ivy, hope, gay</p>
/// <p class="rosetta__paragraph">fred: bea, abi, dee, gay, eve, ivy, cath, jan, hope, fay</p>
/// <p class="rosetta__paragraph">gav: gay, eve, ivy, bea, cath, abi, dee, hope, jan, fay</p>
/// <p class="rosetta__paragraph">hal: abi, eve, hope, fay, ivy, cath, jan, bea, gay, dee</p>
/// <p class="rosetta__paragraph">ian: hope, cath, dee, gay, bea, abi, fay, ivy, jan, eve</p>
/// <p class="rosetta__paragraph">jon: abi, fay, jan, gay, eve, bea, dee, cath, ivy, hope</p><br/><p class="rosetta__paragraph">abi: bob, fred, jon, gav, ian, abe, dan, ed, col, hal</p>
/// <p class="rosetta__paragraph">bea: bob, abe, col, fred, gav, dan, ian, ed, jon, hal</p>
/// <p class="rosetta__paragraph">cath: fred, bob, ed, gav, hal, col, ian, abe, dan, jon</p>
/// <p class="rosetta__paragraph">dee: fred, jon, col, abe, ian, hal, gav, dan, bob, ed</p>
/// <p class="rosetta__paragraph">eve: jon, hal, fred, dan, abe, gav, col, ed, ian, bob</p>
/// <p class="rosetta__paragraph">fay: bob, abe, ed, ian, jon, dan, fred, gav, col, hal</p>
/// <p class="rosetta__paragraph">gay: jon, gav, hal, fred, bob, abe, col, ed, dan, ian</p>
/// <p class="rosetta__paragraph">hope: gav, jon, bob, abe, ian, dan, hal, ed, col, fred</p>
/// <p class="rosetta__paragraph">ivy: ian, col, hal, gav, fred, bob, abe, ed, jon, dan</p>
/// <p class="rosetta__paragraph">jan: ed, hal, gav, abe, bob, jon, col, ian, fred, dan</p><br/><ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered">Use the Gale Shapley algorithm to find a stable set of engagements</li>
/// <li class="rosetta__list-item--ordered">Perturb this set of engagements to form an unstable set of engagements then check this new set for stability.</li></ol><br/><p class="rosetta__paragraph"><span class="rosetta__text--bold">References</span></p>
/// <ol class="rosetta__ordered-list"><li class="rosetta__list-item--ordered"> <a class="rosetta__link--wiki" href="http://www.cs.columbia.edu/~evs/intro/stable/writeup.html" title="link: http://www.cs.columbia.edu/~evs/intro/stable/writeup.html">The Stable Marriage Problem</a>. (Eloquent description and background information).</li>
/// <li class="rosetta__list-item--ordered"><a class="rosetta__link--wiki" href="http://sephlietz.com/gale-shapley/" title="link: http://sephlietz.com/gale-shapley/">Gale-Shapley Algorithm Demonstration</a>.</li>
/// <li class="rosetta__list-item--ordered"><a class="rosetta__link--wiki" href="http://mathsite.math.berkeley.edu/smp/smp.html" title="link: http://mathsite.math.berkeley.edu/smp/smp.html">Another Gale-Shapley Algorithm Demonstration</a>.</li>
/// <li class="rosetta__list-item--ordered"><a class="rosetta__link--wiki" href="https://www.youtube.com/watch?v=Qcv1IqHWAzg" title="link: https://www.youtube.com/watch?v=Qcv1IqHWAzg">Stable Marriage Problem - Numberphile</a> (Video).</li>
/// <li class="rosetta__list-item--ordered"><a class="rosetta__link--wiki" href="https://www.youtube.com/watch?v=LtTV6rIxhdo" title="link: https://www.youtube.com/watch?v=LtTV6rIxhdo">Stable Marriage Problem (the math bit)</a> (Video).</li>
/// <li class="rosetta__list-item--ordered"><a class="rosetta__link--wiki" href="http://www.ams.org/samplings/feature-column/fc-2015-03" title="link: http://www.ams.org/samplings/feature-column/fc-2015-03">The Stable Marriage Problem and School Choice</a>. (Excellent exposition)</li></ol><br><br><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function Person(name) {

    var candidateIndex = 0;

    this.name = name;
    this.fiance = null;
    this.candidates = [];

    this.rank = function(p) {
        for (i = 0; i < this.candidates.length; i++)
            if (this.candidates[i] === p) return i;
        return this.candidates.length + 1;
    }

    this.prefers = function(p) {
        return this.rank(p) < this.rank(this.fiance);
    }

    this.nextCandidate = function() {
        if (candidateIndex >= this.candidates.length) return null;
        return this.candidates[candidateIndex++];
    }

    this.engageTo = function(p) {
        if (p.fiance) p.fiance.fiance = null;
        p.fiance = this;
        if (this.fiance) this.fiance.fiance = null;
        this.fiance = p;
    }

    this.swapWith = function(p) {
        console.log("%s & %s swap partners", this.name, p.name);
        var thisFiance = this.fiance;
        var pFiance = p.fiance;
        this.engageTo(pFiance);
        p.engageTo(thisFiance);
    }
}

function isStable(guys, gals) {
    for (var i = 0; i < guys.length; i++)
        for (var j = 0; j < gals.length; j++)
            if (guys[i].prefers(gals[j]) && gals[j].prefers(guys[i]))
                return false;
    return true;
}

function engageEveryone(guys) {
    var done;
    do {
        done = true;
        for (var i = 0; i < guys.length; i++) {
            var guy = guys[i];
            if (!guy.fiance) {
                done = false;
                var gal = guy.nextCandidate();
                if (!gal.fiance || gal.prefers(guy))
                    guy.engageTo(gal);
            }
        }
    } while (!done);
}

function doMarriage() {

    var abe  = new Person("Abe");
    var bob  = new Person("Bob");
    var col  = new Person("Col");
    var dan  = new Person("Dan");
    var ed   = new Person("Ed");
    var fred = new Person("Fred");
    var gav  = new Person("Gav");
    var hal  = new Person("Hal");
    var ian  = new Person("Ian");
    var jon  = new Person("Jon");
    var abi  = new Person("Abi");
    var bea  = new Person("Bea");
    var cath = new Person("Cath");
    var dee  = new Person("Dee");
    var eve  = new Person("Eve");
    var fay  = new Person("Fay");
    var gay  = new Person("Gay");
    var hope = new Person("Hope");
    var ivy  = new Person("Ivy");
    var jan  = new Person("Jan");

    abe.candidates  = [abi, eve, cath, ivy, jan, dee, fay, bea, hope, gay];
    bob.candidates  = [cath, hope, abi, dee, eve, fay, bea, jan, ivy, gay];
    col.candidates  = [hope, eve, abi, dee, bea, fay, ivy, gay, cath, jan];
    dan.candidates  = [ivy, fay, dee, gay, hope, eve, jan, bea, cath, abi];
    ed.candidates   = [jan, dee, bea, cath, fay, eve, abi, ivy, hope, gay];
    fred.candidates = [bea, abi, dee, gay, eve, ivy, cath, jan, hope, fay];
    gav.candidates  = [gay, eve, ivy, bea, cath, abi, dee, hope, jan, fay];
    hal.candidates  = [abi, eve, hope, fay, ivy, cath, jan, bea, gay, dee];
    ian.candidates  = [hope, cath, dee, gay, bea, abi, fay, ivy, jan, eve];
    jon.candidates  = [abi, fay, jan, gay, eve, bea, dee, cath, ivy, hope];
    abi.candidates  = [bob, fred, jon, gav, ian, abe, dan, ed, col, hal];
    bea.candidates  = [bob, abe, col, fred, gav, dan, ian, ed, jon, hal];
    cath.candidates = [fred, bob, ed, gav, hal, col, ian, abe, dan, jon];
    dee.candidates  = [fred, jon, col, abe, ian, hal, gav, dan, bob, ed];
    eve.candidates  = [jon, hal, fred, dan, abe, gav, col, ed, ian, bob];
    fay.candidates  = [bob, abe, ed, ian, jon, dan, fred, gav, col, hal];
    gay.candidates  = [jon, gav, hal, fred, bob, abe, col, ed, dan, ian];
    hope.candidates = [gav, jon, bob, abe, ian, dan, hal, ed, col, fred];
    ivy.candidates  = [ian, col, hal, gav, fred, bob, abe, ed, jon, dan];
    jan.candidates  = [ed, hal, gav, abe, bob, jon, col, ian, fred, dan];

    var guys = [abe, bob, col, dan, ed, fred, gav, hal, ian, jon];
    var gals = [abi, bea, cath, dee, eve, fay, gay, hope, ivy, jan];

    engageEveryone(guys);

    for (var i = 0; i < guys.length; i++) {
        console.log("%s is engaged to %s", guys[i].name, guys[i].fiance.name);
    }
    console.log("Stable = %s", isStable(guys, gals) ? "Yes" : "No");
    jon.swapWith(fred);
    console.log("Stable = %s", isStable(guys, gals) ? "Yes" : "No");
}

doMarriage();


/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>function Person(name) {

    var candidateIndex = 0;

    this.name = name;
    this.fiance = null;
    this.candidates = [];

    this.rank = function(p) {
        for (i = 0; i < this.candidates.length; i++)
            if (this.candidates[i] === p) return i;
        return this.candidates.length + 1;
    }

    this.prefers = function(p) {
        return this.rank(p) < this.rank(this.fiance);
    }

    this.nextCandidate = function() {
        if (candidateIndex >= this.candidates.length) return null;
        return this.candidates[candidateIndex++];
    }

    this.engageTo = function(p) {
        if (p.fiance) p.fiance.fiance = null;
        p.fiance = this;
        if (this.fiance) this.fiance.fiance = null;
        this.fiance = p;
    }

    this.swapWith = function(p) {
        console.log("%s & %s swap partners", this.name, p.name);
        var thisFiance = this.fiance;
        var pFiance = p.fiance;
        this.engageTo(pFiance);
        p.engageTo(thisFiance);
    }
}

function isStable(guys, gals) {
    for (var i = 0; i < guys.length; i++)
        for (var j = 0; j < gals.length; j++)
            if (guys[i].prefers(gals[j]) && gals[j].prefers(guys[i]))
                return false;
    return true;
}

function engageEveryone(guys) {
    var done;
    do {
        done = true;
        for (var i = 0; i < guys.length; i++) {
            var guy = guys[i];
            if (!guy.fiance) {
                done = false;
                var gal = guy.nextCandidate();
                if (!gal.fiance || gal.prefers(guy))
                    guy.engageTo(gal);
            }
        }
    } while (!done);
}

function doMarriage() {

    var abe  = new Person("Abe");
    var bob  = new Person("Bob");
    var col  = new Person("Col");
    var dan  = new Person("Dan");
    var ed   = new Person("Ed");
    var fred = new Person("Fred");
    var gav  = new Person("Gav");
    var hal  = new Person("Hal");
    var ian  = new Person("Ian");
    var jon  = new Person("Jon");
    var abi  = new Person("Abi");
    var bea  = new Person("Bea");
    var cath = new Person("Cath");
    var dee  = new Person("Dee");
    var eve  = new Person("Eve");
    var fay  = new Person("Fay");
    var gay  = new Person("Gay");
    var hope = new Person("Hope");
    var ivy  = new Person("Ivy");
    var jan  = new Person("Jan");

    abe.candidates  = [abi, eve, cath, ivy, jan, dee, fay, bea, hope, gay];
    bob.candidates  = [cath, hope, abi, dee, eve, fay, bea, jan, ivy, gay];
    col.candidates  = [hope, eve, abi, dee, bea, fay, ivy, gay, cath, jan];
    dan.candidates  = [ivy, fay, dee, gay, hope, eve, jan, bea, cath, abi];
    ed.candidates   = [jan, dee, bea, cath, fay, eve, abi, ivy, hope, gay];
    fred.candidates = [bea, abi, dee, gay, eve, ivy, cath, jan, hope, fay];
    gav.candidates  = [gay, eve, ivy, bea, cath, abi, dee, hope, jan, fay];
    hal.candidates  = [abi, eve, hope, fay, ivy, cath, jan, bea, gay, dee];
    ian.candidates  = [hope, cath, dee, gay, bea, abi, fay, ivy, jan, eve];
    jon.candidates  = [abi, fay, jan, gay, eve, bea, dee, cath, ivy, hope];
    abi.candidates  = [bob, fred, jon, gav, ian, abe, dan, ed, col, hal];
    bea.candidates  = [bob, abe, col, fred, gav, dan, ian, ed, jon, hal];
    cath.candidates = [fred, bob, ed, gav, hal, col, ian, abe, dan, jon];
    dee.candidates  = [fred, jon, col, abe, ian, hal, gav, dan, bob, ed];
    eve.candidates  = [jon, hal, fred, dan, abe, gav, col, ed, ian, bob];
    fay.candidates  = [bob, abe, ed, ian, jon, dan, fred, gav, col, hal];
    gay.candidates  = [jon, gav, hal, fred, bob, abe, col, ed, dan, ian];
    hope.candidates = [gav, jon, bob, abe, ian, dan, hal, ed, col, fred];
    ivy.candidates  = [ian, col, hal, gav, fred, bob, abe, ed, jon, dan];
    jan.candidates  = [ed, hal, gav, abe, bob, jon, col, ian, fred, dan];

    var guys = [abe, bob, col, dan, ed, fred, gav, hal, ian, jon];
    var gals = [abi, bea, cath, dee, eve, fay, gay, hope, ivy, jan];

    engageEveryone(guys);

    for (var i = 0; i < guys.length; i++) {
        console.log("%s is engaged to %s", guys[i].name, guys[i].fiance.name);
    }
    console.log("Stable = %s", isStable(guys, gals) ? "Yes" : "No");
    jon.swapWith(fred);
    console.log("Stable = %s", isStable(guys, gals) ? "Yes" : "No");
}

doMarriage();
</lang>

{{out}}
<pre>Abe is engaged to Ivy
Bob is engaged to Cath
Col is engaged to Dee
Dan is engaged to Fay
Ed is engaged to Jan
Fred is engaged to Bea
Gav is engaged to Gay
Hal is engaged to Eve
Ian is engaged to Hope
Jon is engaged to Abi
Stable = Yes
Jon & Fred swap partners
Stable = No</pre>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
