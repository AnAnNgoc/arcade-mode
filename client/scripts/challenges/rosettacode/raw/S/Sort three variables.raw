
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Sort three variables
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// [[Category:Sorting]]
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task: </dt></dl>
/// Sort &nbsp; (the values of) &nbsp; three variables &nbsp; (<span class="rosetta__text--bold">X</span>, &nbsp; <span class="rosetta__text--bold">Y</span>, &nbsp; and &nbsp; <span class="rosetta__text--bold">Z</span>) &nbsp; that contain any value &nbsp; (numbers and/or literals).
/// <br>
/// If that isn't possible in your language, then just sort numbers &nbsp; (and note if they can be floating point, integer, or other).
/// <br>
/// <br>
/// <br>
/// I.E.:  &nbsp;  (for the three variables &nbsp; <span class="rosetta__text--bold">x</span>, &nbsp; <span class="rosetta__text--bold">y</span>, &nbsp; and &nbsp; <span class="rosetta__text--bold">z</span>), &nbsp; where:
///                          x =  'lions, tigers, and'
///                          y =  'bears, oh my!'
///                          z =  '(from the "Wizard of OZ")'
/// <br>
/// After sorting,  the three variables would hold:
///                          x =  '(from the "Wizard of OZ")'
///                          y =  'bears, oh my!'
///                          z =  'lions, tigers, and'
/// <br>
/// <!-- Care was taken to use a leading lowercase letter so that EBCDIC and ASCII machines sort the literals in the same order.   {Gerard Schildberger}   !-->
/// <br>
/// <br>
/// For numeric value sorting, use:
/// <br>
/// I.E.:  &nbsp;  (for the three variables &nbsp; <span class="rosetta__text--bold">x</span>, &nbsp; <span class="rosetta__text--bold">y</span>, &nbsp; and &nbsp; <span class="rosetta__text--bold">z</span>), &nbsp; where:
///                          x =  77444
///                          y =    -12
///                          z =      0
/// <br>
/// After sorting,  the three variables would hold:
///                          x =    -12
///                          y =      0
///                          z =  77444
/// <br>
/// The variables should contain some form of a number, but specify if the algorithm
/// used can be for floating point or integers. &nbsp; Note any limitations.
/// <br>
/// <br>
/// The values may or may not be unique.
/// <br>
/// <br>
/// The method used for sorting can be any algorithm; &nbsp; the goal is to use the most idiomatic in the computer programming language used.
/// <br>
/// More than one algorithm could be shown if one isn't clearly the better choice.
/// <br>
/// <br>
/// One algorithm could be:
///                          Θ  store the three variables &nbsp; <span class="rosetta__text--bold">x</span>, <span class="rosetta__text--bold">y</span>, and <span class="rosetta__text--bold">z</span>
///                                   into an array (or a list) &nbsp; <span class="rosetta__text--bold">A</span>
/// <br>
///                          Θ  sort  (the three elements of)  the array &nbsp; <span class="rosetta__text--bold">A</span>
/// <br>
///                          Θ  extract the three elements from the array and place them in the
///                                   variables <span class="rosetta__text--bold">x</span>, <span class="rosetta__text--bold">y</span>, and <span class="rosetta__text--bold">z</span> &nbsp; in order of extraction
/// <br>
/// Show the results of the sort here on this page using at least the values of those shown above.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
