
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Substring
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
///  
/// [[Category:String manipulation]] [[Category:Simple]]
/// In this task display a substring:
/// <br>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">starting from <tt>n</tt> characters in and of <tt>m</tt> length;</li>
/// <li class="rosetta__list-item">starting from <tt>n</tt> characters in, up to the end of the string;</li>
/// <li class="rosetta__list-item">whole string minus last character;</li>
/// <li class="rosetta__list-item">starting from a known character within the string and of <tt>m</tt> length;</li>
/// <li class="rosetta__list-item">starting from a known substring within the string and of <tt>m</tt> length.</li>
/// <br>
/// </ul>
/// <br>
/// If the program uses UTF-8 or UTF-16, it must work on any valid Unicode code point, 
/// whether in the Basic Multilingual Plane or above it. 
/// <br>
/// The program must reference logical characters (code points), not 8-bit code units for UTF-8 or 16-bit code units for UTF-16. 
/// <br>
/// Programs for other encodings (such as 8-bit ASCII, or EUC-JP) are not required to handle all Unicode characters.
/// <br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var str = "abcdefgh";

var n = 2;
var m = 3;

//  *  starting from n characters in and of m length;
str.substr(n, m);  // => "cde"

//  * starting from n characters in, up to the end of the string;
str.substr(n);  // => "cdefgh"
str.substring(n);  // => "cdefgh"

//  * whole string minus last character;
str.substring(0, str.length - 1);  // => "abcdefg"

//  * starting from a known character within the string and of m length;
str.substr(str.indexOf('b'), m);  // => "bcd"

//  * starting from a known substring within the string and of m length. 
str.substr(str.indexOf('bc'), m);  // => "bcd"

/// rawSolutions:
=={{header|JavaScript}}==
The <code>String</code> object has two similar methods: <code>substr</code> and <code>substring</code>.
*<code>substr(start, [len])</code> returns a substring beginning at a specified location and having a specified length.
*<code>substring(start, [end])</code> returns a string containing the substring from <code>start</code> up to, ''but not including'', <code>end</code>.

<lang javascript>var str = "abcdefgh";

var n = 2;
var m = 3;

//  *  starting from n characters in and of m length;
str.substr(n, m);  // => "cde"

//  * starting from n characters in, up to the end of the string;
str.substr(n);  // => "cdefgh"
str.substring(n);  // => "cdefgh"

//  * whole string minus last character;
str.substring(0, str.length - 1);  // => "abcdefg"

//  * starting from a known character within the string and of m length;
str.substr(str.indexOf('b'), m);  // => "bcd"

//  * starting from a known substring within the string and of m length. 
str.substr(str.indexOf('bc'), m);  // => "bcd"</lang>


Or, in terms of some familiar functional primitives, translating broadly from Haskell:

<lang AppleScript>(function () {
    'use strict';

    //  take :: Int -> Text -> Text
    function take(n, s) {
        return s.substr(0, n);
    }

    //  drop :: Int -> Text -> Text
    function drop(n, s) {
        return s.substr(n);
    }


    // init :: Text -> Text
    function init(s) {
        var n = s.length;
        return (n > 0 ? s.substr(0, n - 1) : undefined);
    }
    
    // breakOn :: Text -> Text -> (Text, Text)
    function breakOn(strPattern, s) {
        var i = s.indexOf(strPattern);
        return i === -1 ? [strPattern, ''] : [s.substr(0, i), s.substr(i)];
    }
    

    var str = '一二三四五六七八九十';


    return JSON.stringify({
    
        'from n in, of m length': (function (n, m) {
            return take(m, drop(n, str));
        })(4, 3),
        
        
        'from n in, up to end' :(function (n) {
            return drop(n, str);
        })(3),
        
        
        'all but last' : init(str),
        
        
        'from matching char, of m length' : (function (pattern, s, n) {
            return take(n, breakOn(pattern, s)[1]);
        })('五', str, 3),
        
        
        'from matching string, of m length':(function (pattern, s, n) {
            return take(n, breakOn(pattern, s)[1]);
        })('六七', str, 4)
        
    }, null, 2);

})();</lang>

{{Out}}

<lang JavaScript>{
  "from n in, of m length": "五六七",
  "from n in, up to end": "四五六七八九十",
  "all but last": "一二三四五六七八九",
  "from matching char, of m length": "五六七",
  "from matching string, of m length": "六七八九"
}</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
