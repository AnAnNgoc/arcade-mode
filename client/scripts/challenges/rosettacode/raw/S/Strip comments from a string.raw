
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Strip comments from a string
/// type: rosetta-code

/// categories:
/// String manipulation

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// <br>
/// <br>
/// The task is to remove text that follow any of a set of comment markers, (in these examples either a hash or a semicolon) from a string or input line.
/// <br>
/// <br>
/// <span class="rosetta__text--bold">Whitespace debacle:</span> &nbsp; There is some confusion about whether to remove any whitespace from the input line. 
/// <br>
/// As of [http://rosettacode.org/mw/index.php?title=Strip_comments_from_a_string&oldid=119409 2 September 2011], at least 8 languages (C, C++, Java, Perl, Python, Ruby, sed, UNIX Shell) were incorrect, out of 36 total languages, because they did not trim whitespace by 29 March 2011 rules. Some other languages might be incorrect for the same reason. 
/// <br>
/// <span class="rosetta__text--bold">Please discuss this issue at <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/" title=""></a>.</span>
/// <br>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">From [http://rosettacode.org/mw/index.php?title=Strip_comments_from_a_string&oldid=103978 29 March 2011], this task required that: <span class="rosetta__text--italic">"The comment marker and any whitespace at the beginning or ends of the resultant line should be removed. A line without comments should be trimmed of any leading or trailing whitespace before being produced as a result."</span> The task had 28 languages, which did not all meet this new requirement.</li>
/// <li class="rosetta__list-item--unordered">From [http://rosettacode.org/mw/index.php?title=Strip_comments_from_a_string&oldid=103978 28 March 2011], this task required that: <span class="rosetta__text--italic">"Whitespace before the comment marker should be removed."</span></li>
/// <li class="rosetta__list-item--unordered">From [http://rosettacode.org/mw/index.php?title=Strip_comments_from_a_string&offset=20101206204307&action=history 30 October 2010], this task did not specify whether or not to remove whitespace.</li></ul>
/// <br>
/// The following examples will be truncated to either "apples, pears " or "apples, pears". 
/// <br>
/// (This example has flipped between "apples, pears " and "apples, pears" in the past.)
/// <br>
/// <pre>
/// apples, pears # and bananas
/// apples, pears ; and bananas
/// </pre>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Related task:</dt></dl>
/// <ul class="rosetta__unordered-list"><li class="rosetta__list-item--unordered">&nbsp; <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Strip block comments" title="Strip block comments">Strip block comments</a></li></ul><br><br>
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function stripComments(s) {
  var re1 = /^\s+|\s+$/g;  // Strip leading and trailing spaces
  var re2 = /\s*[#;].+$/g; // Strip everything after # or ; to the end of the line, including preceding spaces
  return s.replace(re1,'').replace(re2,'');
}


var s1 = 'apples, pears # and bananas';
var s2 = 'apples, pears ; and bananas';

alert(stripComments(s1) + '\n' + stripComments(s2));


/// rawSolutions:
=={{header|JavaScript}}==
<lang javascript>function stripComments(s) {
  var re1 = /^\s+|\s+$/g;  // Strip leading and trailing spaces
  var re2 = /\s*[#;].+$/g; // Strip everything after # or ; to the end of the line, including preceding spaces
  return s.replace(re1,'').replace(re2,'');
}


var s1 = 'apples, pears # and bananas';
var s2 = 'apples, pears ; and bananas';

alert(stripComments(s1) + '\n' + stripComments(s2));
</lang>

A more efficient version that caches the regular expressions in a closure:

<lang javascript>var stripComments = (function () {
  var re1 = /^\s+|\s+$/g;
  var re2 = /\s*[#;].+$/g;
  return function (s) {
    return s.replace(re1,'').replace(re2,'');
  };
}());
</lang>
A difference with the two versions is that in the first, all declarations are processed before code is executed so the function declaration can be after the code that calls it. However in the second example, the expression creating the function must be executed before the function is available, so it must be before the code that calls it.



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
