
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Scope modifiers
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// Most programming languages offer support for <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Creating a function" title="Creating a function">subroutines</a>. 
/// When execution changes between subroutines, different sets of variables and functions ("scopes") are available to the program. 
/// Frequently these sets are defined by the placement of the variable and function declarations ("static scoping" or "lexical scoping"). 
/// These sets may also be defined by special modifiers to the variable and function declarations.
/// <br>
/// Show the different scope modifiers available in your language and briefly explain how they change the scope of their variable or function. 
/// If your language has no scope modifiers, note it.
/// <br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
null

/// rawSolutions:
=={{header|JavaScript}}==

There are not precisely any scope ''modifiers'' in JavaScript.

The <code>var</code> variable declaration makes a variable local to a function, and function parameters are also local. Any variable not so declared is global, except in ES5 strict mode where an undeclared variable is an error.

A named function definition (<code>function foo() { ... }</code>) is “hoisted” to the top of the enclosing function; it is therefore possible to call a function before its definition would seem to be executed.



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
