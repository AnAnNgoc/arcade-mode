Roman numerals/Decode

{{task}}

;Task:
Create a function that takes a Roman numeral as its argument and returns its value as a numeric decimal integer. 

You don't need to validate the form of the Roman numeral.

Modern Roman numerals are written by expressing each decimal digit of the number to be encoded separately, 
<br>starting with the leftmost decimal digit and skipping any <span class="rosetta__text--bold">0</span>s &nbsp; (zeroes). 

<span class="rosetta__text--bold">1990</span> is rendered as &nbsp; <span class="rosetta__text--bold">MCMXC</span> &nbsp; &nbsp; (1000 = M, &nbsp; 900 = CM, &nbsp; 90 = XC) &nbsp; &nbsp; and 
<br><span class="rosetta__text--bold">2008</span> is rendered as &nbsp; <span class="rosetta__text--bold">MMVIII</span> &nbsp; &nbsp; &nbsp; (2000 = MM, &nbsp; 8 = VIII).
 
The Roman numeral for <span class="rosetta__text--bold">1666</span>, &nbsp; <span class="rosetta__text--bold">MDCLXVI</span>, &nbsp; uses each letter in descending order.
<br><br>


=={{header|JavaScript}}==
===ES5===
====Imperative====
{{works with|Rhino}}
{{works with|SpiderMonkey}}
<lang javascript>var Roman = {
  Values: [['CM', 900],  ['CD', 400], ['XC',  90], ['XL',  40], ['IV', 4],   
           ['IX',   9], ['V',   5], ['X',   10], ['L',  50], 
           ['C',  100], ['M', 1000], ['I',    1], ['D',  500]],
  UnmappedStr : 'Q',
  parse: function(str) {
    var result = 0
    for (var i=0; i<Roman.Values.length; ++i) {
      var pair = Roman.Values[i]
      var key = pair[0]
      var value = pair[1]
      var regex = RegExp(key)
      while (str.match(regex)) {
        result += value
        str = str.replace(regex, Roman.UnmappedStr)
      }
    }
    return result
  }
}

var test_data = ['MCMXC', 'MDCLXVI', 'MMVIII']
for (var i=0; i<test_data.length; ++i) {
  var test_datum = test_data[i]
  print(test_datum + ": " + Roman.parse(test_datum)) 
}</lang>
{{out}}
<pre>MCMXC: 1990
MDCLXVI: 1666
MMVIII: 2008
</pre>
====Functional====
{{Trans|Haskell}}
(isPrefixOf example)
<lang JavaScript>(function (lstTest) {
 
    var mapping = [["M", 1000], ["CM", 900], ["D", 500], ["CD", 400], ["C", 100], [
        "XC", 90], ["L", 50], ["XL", 40], ["X", 10], ["IX", 9], ["V", 5], ["IV",
        4], ["I", 1]];
 
    // s -> n
    function romanValue(s) {
        // recursion over list of characters
        // [c] -> n
        function toArabic(lst) {
            return lst.length ? function (xs) {
                var lstParse = chain(mapping, function (lstPair) {
                    return isPrefixOf(
                        lstPair[0], xs
                    ) ? [lstPair[1], drop(lstPair[0].length, xs)] : []
                });
                return lstParse[0] + toArabic(lstParse[1]);
            }(lst) : 0
        }
        return toArabic(s.split(''));
    }
 
    // Monadic bind (chain) for lists
    function chain(xs, f) {
        return [].concat.apply([], xs.map(f));
    }
 
    // [a] -> [a] -> Bool
    function isPrefixOf(lstFirst, lstSecond) {
        return lstFirst.length ? (
            lstSecond.length ?
            lstFirst[0] === lstSecond[0] && isPrefixOf(
                lstFirst.slice(1), lstSecond.slice(1)
            ) : false
        ) : true;
    }
 
    // Int -> [a] -> [a]
    function drop(n, lst) {
        return n <= 0 ? lst : (
            lst.length ? drop(n - 1, lst.slice(1)) : []
        );
    }
 
    return lstTest.map(romanValue);
 
})(['MCMXC', 'MDCLXVI', 'MMVIII']);</lang>
{{Out}}
<lang JavaScript>[1990, 1666, 2008]</lang>

or, more natively:
<lang JavaScript>(function (lstTest) {
 
    function romanValue(s) {
        return s.length ? function () {
            var parse = [].concat.apply([], glyphs.map(function (g) {
                return 0 === s.indexOf(g) ? [trans[g], s.substr(g.length)] : [];
            }));
            return parse[0] + romanValue(parse[1]);
        }() : 0;
    }
 
    var trans = {
            M: 1E3,
            CM: 900,
            D: 500,
            CD: 400,
            C: 100,
            XC: 90,
            L: 50,
            XL: 40,
            X: 10,
            IX: 9,
            V: 5,
            IV: 4,
            I: 1
        },
        glyphs = Object.keys(trans);
 
    return lstTest.map(romanValue);
 
})(["MCMXC", "MDCLXVI", "MMVIII", "MMMM"]);</lang>
{{Out}}
<lang JavaScript>[1990, 1666, 2008]</lang>

===ES6===
====Recursion====
<lang JavaScript>(() => {
    // romanValue :: String -> Int
    const romanValue = s =>
        s.length ? (() => {
            const parse = [].concat(
                ...glyphs.map(g => 0 === s.indexOf(g) ? (
                    [dctTrans[g], s.substr(g.length)]
                ) : [])
            );
            return parse[0] + romanValue(parse[1]);
        })() : 0;

    // dctTrans :: {romanKey: Integer}
    const dctTrans = {
        M: 1E3,
        CM: 900,
        D: 500,
        CD: 400,
        C: 100,
        XC: 90,
        L: 50,
        XL: 40,
        X: 10,
        IX: 9,
        V: 5,
        IV: 4,
        I: 1
    };

    // glyphs :: [romanKey]
    const glyphs = Object.keys(dctTrans);

    // TEST -------------------------------------------------------------------
    return ["MCMXC", "MDCLXVI", "MMVIII", "MMMM"].map(romanValue);
})();</lang>
{{Out}}
<lang JavaScript>[1990,1666,2008,4000]</lang>


====Folding from the right====
{{Trans|Haskell}} 
(fold and foldr examples)
<lang JavaScript>(() => {

    // Folding from right to left,
    // lower leftward characters are subtracted,
    // others are added.

    // fromRoman :: String -> Int
    const fromRoman = s =>
        snd(foldr(
            ([r, n], l) => [l, l >= r ? n + l : n - l], [0, 0],
            map(charVal, stringChars(s))
        ));

    // charVal :: Char -> Maybe Int
    const charVal = k => {
        const v = {
            I: 1,
            V: 5,
            X: 10,
            L: 50,
            C: 100,
            D: 500,
            M: 1000
        }[k];
        return v !== undefined ? v : 0;
    };

    // GENERIC FUNCTIONS ------------------------------------------------------

    // foldr (a -> b -> b) -> b -> [a] -> b
    const foldr = (f, a, xs) => xs.reduceRight(f, a);

    // map :: (a -> b) -> [a] -> [b]
    const map = (f, xs) => xs.map(f);

    // snd :: (a, b) -> b
    const snd = tpl => Array.isArray(tpl) ? tpl[1] : undefined;

    // stringChars :: String -> [Char]
    const stringChars = s => s.split('');

    // show :: a -> String
    const show = (...x) =>
        JSON.stringify.apply(
            null, x.length > 1 ? [x[1], null, x[0]] : x
        );

    // TEST -------------------------------------------------------------------
    return show(
        map(fromRoman, ["MDCLXVI", "MCMXC", "MMVIII", "MMXVI", "MMXVII"])
    );
})();</lang>
{{Out}}
<pre>[1666,1990,2008,2016,2017]</pre>

