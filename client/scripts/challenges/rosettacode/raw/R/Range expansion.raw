Range expansion

{{task}}
{{:Range extraction/Format}}


;Task:
Expand the range description: 
  <big> -6,-3--1,3-5,7-11,14,15,17-20 </big>

<small>Note that the second element above, 
is the <span class="rosetta__text--bold">range from minus 3 to <span class="rosetta__text--italic">minus</span> 1</span>. </small>


;Related task:
* &nbsp; [[Range extraction]]
<br><br>


=={{header|JavaScript}}==

===Imperative (Spidermonkey)===

<lang javascript>#!/usr/bin/env js

function main() {
    print(rangeExpand('-6,-3--1,3-5,7-11,14,15,17-20'));
}

function rangeExpand(rangeExpr) {
    
    function getFactors(term) {
        var matches = term.match(/(-?[0-9]+)-(-?[0-9]+)/);
        if (!matches) return {first:Number(term)};
        return {first:Number(matches[1]), last:Number(matches[2])};
    }
    
    function expandTerm(term) {
        var factors = getFactors(term);
        if (factors.length < 2) return [factors.first];
        var range = [];
        for (var n = factors.first; n <= factors.last;  n++) {
            range.push(n);
        }
        return range;
    }
    
    var result = [];
    var terms = rangeExpr.split(/,/);
    for (var t in terms) {
        result = result.concat(expandTerm(terms[t]));
    }
    
    return result;
}

main();
</lang>

{{out}}
 -6,-3,-2,-1,3,4,5,7,8,9,10,11,14,15,17,18,19,20

===Functional===

====ES5====

<lang JavaScript>(function (strTest) {
    'use strict';

    // s -> [n]
    function expansion(strExpr) {

        // concat map yields flattened output list
        return [].concat.apply([], strExpr.split(',')
            .map(function (x) {
                return x.split('-')
                    .reduce(function (a, s, i, l) {

                        // negative (after item 0) if preceded by an empty string
                        // (i.e. a hyphen-split artefact, otherwise ignored)
                        return s.length ? i ? a.concat(
                            parseInt(l[i - 1].length ? s :
                                '-' + s, 10)
                        ) : [+s] : a;
                    }, []);

                // two-number lists are interpreted as ranges
            })
            .map(function (r) {
                return r.length > 1 ? range.apply(null, r) : r;
            }));
    }


    // [m..n]
    function range(m, n) {
        return Array.apply(null, Array(n - m + 1))
            .map(function (x, i) {
                return m + i;
            });
    }

    return expansion(strTest);

})('-6,-3--1,3-5,7-11,14,15,17-20');</lang>

{{Out}}

<lang JavaScript>[-6, -3, -2, -1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20]</lang>


====ES6====

<lang JavaScript>(strTest => {
    
    // expansion :: String -> [Int]
    let expansion = strExpr =>

        // concat map yields flattened output list
        [].concat.apply([], strExpr.split(',')
            .map(x => x.split('-')
                .reduce((a, s, i, l) =>

                    // negative (after item 0) if preceded by an empty string
                    // (i.e. a hyphen-split artefact, otherwise ignored)
                    s.length ? i ? a.concat(
                        parseInt(l[i - 1].length ? s :
                            '-' + s, 10)
                    ) : [+s] : a, [])

                // two-number lists are interpreted as ranges
            )
            .map(r => r.length > 1 ? range.apply(null, r) : r)),



        // range :: Int -> Int -> Maybe Int -> [Int]
        range = (m, n, step) => {
            let d = (step || 1) * (n >= m ? 1 : -1);

            return Array.from({
                length: Math.floor((n - m) / d) + 1
            }, (_, i) => m + (i * d));
        };



    return expansion(strTest);

})('-6,-3--1,3-5,7-11,14,15,17-20');</lang>

{{Out}}
<lang JavaScript>[-6, -3, -2, -1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20]</lang>

