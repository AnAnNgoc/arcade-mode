
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Runtime evaluation/In an environment
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
///  Given a program in the language (as a string or AST) with a free variable named <var>x</var> (or another name if that is not valid syntax), evaluate it with <var>x</var> bound to a provided value, then evaluate it again with <var>x</var> bound to another provided value, then subtract the result of the first from the second and return or print it.
/// <br>
/// Do so in a way which:
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">does not involve string manipulation of the input source code</li>
/// <li class="rosetta__list-item--unordered">is plausibly extensible to a runtime-chosen set of bindings rather than just <var>x</var></li>
/// <li class="rosetta__list-item--unordered">does not make <var>x</var> a <span class="rosetta__text--italic">global</span> variable</li>
/// <br>
/// </ul>or note that these are impossible.
/// <br>
/// ===See also===
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item--unordered">For more general examples and language-specific details, see <a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Eval" title="Eval"></a>.</li>
/// <li class="rosetta__list-item--unordered"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Dynamic variable names" title="Dynamic variable names"></a> is a similar task.</li>
/// <br>
/// </ul>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function evalWithX(expr, a, b) {
    var x = a;
    var atA = eval(expr);
    x = b;
    var atB = eval(expr);
    return atB - atA;
}

/// rawSolutions:
=={{header|JavaScript}}==

eval uses the environment from the calling function.

<lang javascript>function evalWithX(expr, a, b) {
    var x = a;
    var atA = eval(expr);
    x = b;
    var atB = eval(expr);
    return atB - atA;
}</lang>

<lang javascript>evalWithX('Math.exp(x)', 0, 1) // returns 1.718281828459045</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
