Read a configuration file

{{task|File handling}}

The task is to read a configuration file in standard configuration file, 
and set variables accordingly. 

For this task, we have a configuration file as follows:

 # This is a configuration file in standard configuration file format
 #
 # Lines beginning with a hash or a semicolon are ignored by the application
 # program. Blank lines are also ignored by the application program.
 
 # This is the fullname parameter
 FULLNAME Foo Barber
 
 # This is a favourite fruit
 FAVOURITEFRUIT banana
 
 # This is a boolean that should be set
 NEEDSPEELING
 
 # This boolean is commented out
 ; SEEDSREMOVED
 
 # Configuration option names are not case sensitive, but configuration parameter
 # data is case sensitive and may be preserved by the application program.
 
 # An optional equals sign can be used to separate configuration parameter data
 # from the option name. This is dropped by the parser. 
 
 # A configuration option may take multiple parameters separated by commas.
 # Leading and trailing whitespace around parameter names and parameter data fields
 # are ignored by the application program.
 
 OTHERFAMILY Rhu Barber, Harry Barber


For the task we need to set four variables according to the configuration entries as follows:

*fullname = Foo Barber
*favouritefruit = banana
*needspeeling = true
*seedsremoved = false


We also have an option that contains multiple parameters. These may be stored in an array.

* otherfamily(1) = Rhu Barber
* otherfamily(2) = Harry Barber


;Related tasks
* [[Update a configuration file]]
<br><br>


=={{header|JavaScript}}==
In JavaScript using an object makes more sense than local variables.  This function takes our config file in plain text as the parameter.

<lang javascript>function parseConfig(config) {
    // this expression matches a line starting with an all capital word, 
    // and anything after it
    var regex = /^([A-Z]+)(.*)$/mg;
    var configObject = {};
    
    // loop until regex.exec returns null
    var match;
    while (match = regex.exec(config)) {
        // values will typically be an array with one element
        // unless we want an array
        // match[0] is the whole match, match[1] is the first group (all caps word), 
        // and match[2] is the second (everything through the end of line)
        var key = match[1], values = match[2].split(",");
        if (values.length === 1) {
            configObject[key] = values[0];
        }
        else {
            configObject[key] = values.map(function(value){
                return value.trim();
            });
        }
    }
    
    return configObject;
}  </lang>

The result is an object, which can be represented with this JSON.

<lang javascript>{
  "FULLNAME": " Foo Barber",
  "FAVOURITEFRUIT": " banana",
  "NEEDSPEELING": "",
  "OTHERFAMILY": [
    "Rhu Barber",
    "Harry Barber"
  ]
}
</lang>

