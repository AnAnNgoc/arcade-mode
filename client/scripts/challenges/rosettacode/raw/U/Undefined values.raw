
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Undefined values
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><p class="rosetta__paragraph">For languages which have an explicit notion of an undefined value, identify and exercise those language's mechanisms for identifying and manipulating a variable's value's status as being undefined.</p>
/// <br/><br/><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
var a;

typeof(a) === "undefined";
typeof(b) === "undefined";

var obj = {}; // Empty object.
typeof(obj.c) === "undefined";

obj.c = 42;

obj.c === 42;
delete obj.c;
typeof(obj.c) === "undefined";

/// rawSolutions:
=={{header|JavaScript}}==
In Javascript undefined is a property of the global object, i.e. it is a variable in global scope. The initial value of undefined is the primitive value undefined. The problem with using undefined is that undefined is mutable. Instead we can use typeof to check if a value is undefined.
<lang javascript>var a;

typeof(a) === "undefined";
typeof(b) === "undefined";

var obj = {}; // Empty object.
typeof(obj.c) === "undefined";

obj.c = 42;

obj.c === 42;
delete obj.c;
typeof(obj.c) === "undefined";</lang>

We can also use the prefix keyword void, it always returns undefined. But this will throw a error if the variable has not been defined.
<lang javascript>var a;
a === void 0; // true
b === void 0; // throws a ReferenceError</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
