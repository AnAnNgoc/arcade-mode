Anonymous recursion

{{task|Recursion}}

While implementing a recursive function, it often happens that we must resort to a separate &nbsp; <span class="rosetta__text--italic">helper function</span> &nbsp; to handle the actual recursion.

This is usually the case when directly calling the current function would waste too many resources (stack space, execution time), causing unwanted side-effects, &nbsp; and/or the function doesn't have the right arguments and/or return values.

So we end up inventing some silly name like &nbsp; <span class="rosetta__text--bold">foo2</span> &nbsp; or &nbsp; <span class="rosetta__text--bold">foo_helper</span>. &nbsp; I have always found it painful to come up with a proper name, and see some disadvantages:

::* &nbsp; You have to think up a name, which then pollutes the namespace
::* &nbsp; Function is created which is called from nowhere else
::* &nbsp; The program flow in the source code is interrupted

Some languages allow you to embed recursion directly in-place. &nbsp; This might work via a label, a local <span class="rosetta__text--italic">gosub</span> instruction, or some special keyword.

Anonymous recursion can also be accomplished using the &nbsp; [[Y combinator]].


;Task:
If possible, demonstrate this by writing the recursive version of the fibonacci function &nbsp; (see [[Fibonacci sequence]]) &nbsp; which checks for a negative argument before doing the actual recursion.
<br><br>


=={{header|JavaScript}}==
<lang javascript>function fibo(n) {
  if (n < 0) { throw "Argument cannot be negative"; }

  return (function(n) {
    return (n < 2) ? 1 : arguments.callee(n-1) + arguments.callee(n-2);
  })(n);
}</lang>
Note that <code>arguments.callee</code> will not be available in ES5 Strict mode. Instead, you are expected to "name" function (the name is only visible inside function however).
<lang javascript>function fibo(n) {
  if (n < 0) { throw "Argument cannot be negative"; }

  return (function fib(n) {
    return (n < 2) ? 1 : fib(n-1) + fib(n-2);
  })(n);
}</lang>

