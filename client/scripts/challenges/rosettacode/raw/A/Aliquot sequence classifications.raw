
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Aliquot sequence classifications
/// type: rosetta-code

/// categories:
/// ?

/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <br>
/// An <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Aliquot sequence" title="wp: Aliquot sequence">aliquot sequence</a> of a positive integer K is defined recursively as the first member
/// being K and subsequent members being the sum of the [[Proper divisors]] of the previous term.
/// <br>
/// <span class="rosetta__text--indented">* If the terms eventually reach 0 then the series for K is said to <span class="rosetta__text--bold">terminate</span>.</span>
/// <br>
/// <span class="rosetta__text--indented"><br>There are several classifications for non termination:</span>
/// <span class="rosetta__text--indented">* If the second term is K then all future terms are also K and so the sequence repeats from the first term with period 1 and K is called <span class="rosetta__text--bold">perfect</span>.</span>
/// <span class="rosetta__text--indented">* If the third term <span class="rosetta__text--italic">would</span> be repeating K then the sequence repeats with period 2 and K is called <span class="rosetta__text--bold">amicable</span>.</span>
/// <span class="rosetta__text--indented">* If the N'th term <span class="rosetta__text--italic">would</span> be repeating K for the first time, with N > 3 then the sequence repeats with period N - 1 and K is called <span class="rosetta__text--bold">sociable</span>.</span>
/// <span class="rosetta__text--indented"><br>Perfect, amicable and sociable numbers eventually repeat the original number K; there are other repetitions...</span>
/// <span class="rosetta__text--indented">* Some K have a sequence that eventually forms a periodic repetition of period 1 but of a number other than K, for example 95 which forms the sequence <code>95, 25, 6, 6, 6, ...</code> such K are called <span class="rosetta__text--bold">aspiring</span>.</span>
/// <span class="rosetta__text--indented">* K that have a sequence that eventually forms a periodic repetition of period >= 2 but of a number other than K, for example 562 which forms the sequence <code>562, 284, 220, 284, 220, ...</code> such K are called <span class="rosetta__text--bold">cyclic</span>.</span>
/// <br>
/// <span class="rosetta__text--indented"><br>And finally:</span>
/// <span class="rosetta__text--indented">* Some K form aliquot sequences that are not known to be either terminating or periodic. these K are to be called <span class="rosetta__text--bold">non-terminating</span>. <br>For the purposes of this task, K is to be classed as non-terminating if it has not been otherwise classed after generating <span class="rosetta__text--bold">16</span> terms or if any term of the sequence is greater than 2**47 = 140737488355328. </span>
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Task:</dt></dl>
/// # Create routine(s) to generate the aliquot sequence of a positive integer enough to classify it according to the classifications given above.
/// # Use it to display the classification and sequences of the numbers one to ten inclusive.
/// # Use it to show the classification and sequences of the following integers, in order:
/// <span class="rosetta__text--indented">: 11, 12, 28, 496, 220, 1184,  12496, 1264460, 790, 909, 562, 1064, 1488, and optionally 15355717786080.</span>
/// <br>
/// Show all output on this page.
/// <br>
/// <br>
/// <dl class="rosetta__description-list"><dt class="rosetta__description-title">Cf.</dt></dl>
/// <ul class="rosetta__unordered-list">
/// <li class="rosetta__list-item">[[Abundant, deficient and perfect number classifications]]. (Classifications from only the first two members of the whole sequence).</li>
/// <li class="rosetta__list-item">[[Proper divisors]]</li>
/// <li class="rosetta__list-item">[[Amicable pairs]]</li>
/// <br>
/// </ul><br><br>
/// <br>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:


/// rawSolutions:
null

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
