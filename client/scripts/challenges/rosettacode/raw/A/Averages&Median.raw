
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Averages/Median
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <p class="rosetta__paragraph">Write a program to find the  <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Median" title="wp: Median">median</a>  value of a vector of floating-point numbers.</p><br/><p class="rosetta__paragraph">The program need not handle the case where the vector is empty, but <span class="rosetta__text--italic">must</span> handle the case where there are an even number of elements.  In that case, return the average of the two middle values.</p><br/><p class="rosetta__paragraph">There are several approaches to this.  One is to sort the elements, and then pick the element(s) in the middle.</p><br/><p class="rosetta__paragraph">Sorting would take at least  <big><span style="font-family: serif">O(<span class="rosetta__text--italic">n</span> log<span class="rosetta__text--italic">n</span>)</span></big>.  Another approach would be to build a priority queue from the elements, and then extract half of the elements to get to the middle element(s).  This would also take  <big><span style="font-family: serif">O(<span class="rosetta__text--italic">n</span> log<span class="rosetta__text--italic">n</span>)</span></big>.  The best solution is to use the  <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Selection algorithm" title="wp: Selection algorithm">selection algorithm</a>  to find the median in  <big><span style="font-family: serif">O(<span class="rosetta__text--italic">n</span>)</span></big>  time.</p>
/// <br/><p class="rosetta__paragraph"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/Quickselect_algorithm" title="Quickselect_algorithm">Quickselect_algorithm</a></p>
/// <br/><p class="rosetta__paragraph"><hr></p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function median(ary) {
    if (ary.length == 0)
        return null;
    ary.sort(function (a,b){return a - b})
    var mid = Math.floor(ary.length / 2);
    if ((ary.length % 2) == 1)  // length is odd
        return ary[mid];
    else 
        return (ary[mid - 1] + ary[mid]) / 2;
}

median([]);   // null
median([5,3,4]);  // 4
median([5,4,2,3]);  // 3.5
median([3,4,1,-8.4,7.2,4,1,1.2]);  // 2.1

/// rawSolutions:
=={{header|JavaScript}}==

===ES5===
<lang javascript>function median(ary) {
    if (ary.length == 0)
        return null;
    ary.sort(function (a,b){return a - b})
    var mid = Math.floor(ary.length / 2);
    if ((ary.length % 2) == 1)  // length is odd
        return ary[mid];
    else 
        return (ary[mid - 1] + ary[mid]) / 2;
}

median([]);   // null
median([5,3,4]);  // 4
median([5,4,2,3]);  // 3.5
median([3,4,1,-8.4,7.2,4,1,1.2]);  // 2.1</lang>

===ES6===

Using a quick select algorithm
{{Trans|Haskell}}

<lang JavaScript>(() => {
    'use strict';

    // median :: [Num] -> Num
    function median(xs) {
        // nth :: [Num] -> Int -> Maybe Num
        let nth = (xxs, n) => {
                if (xxs.length > 0) {
                    let [x, xs] = uncons(xxs), 
                        [ys, zs] = partition(y => y < x, xs),
                        k = ys.length;

                    return k === n ? x : (
                        k > n ? nth(ys, n) : nth(zs, n - k - 1)
                    );
                } else return undefined;
            },
            n = xs.length;

        return even(n) ? (
            (nth(xs, div(n, 2)) + nth(xs, div(n, 2) - 1)) / 2
        ) : nth(xs, div(n, 2));
    }



    // GENERIC

    // partition :: (a -> Bool) -> [a] -> ([a], [a])
    let partition = (p, xs) =>
        xs.reduce((a, x) =>
            p(x) ? [a[0].concat(x), a[1]] : [a[0], a[1].concat(x)], [
                [],
                []
            ]),

        // uncons :: [a] -> Maybe (a, [a])
        uncons = xs => xs.length ? [xs[0], xs.slice(1)] : undefined,

        // even :: Integral a => a -> Bool
        even = n => n % 2 === 0,

        // div :: Num -> Num -> Int
        div = (x, y) => Math.floor(x / y);

    return [
        [],
        [5, 3, 4],
        [5, 4, 2, 3],
        [3, 4, 1, -8.4, 7.2, 4, 1, 1.2]
    ].map(median);
})();</lang>

{{Out}}
<lang JavaScript>[
  null,
  4,
  3.5,
  2.1
]</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
