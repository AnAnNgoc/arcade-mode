
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Averages/Arithmetic mean
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta">
/// <br/>
/// <p class="rosetta__paragraph">Write a program to find the <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/arithmetic mean" title="wp: arithmetic mean">mean</a> (arithmetic average) of a numeric vector.</p><br/><p class="rosetta__paragraph">In case of a zero-length input, since the mean of an empty set of numbers is ill-defined, the program may choose to behave in any way it deems appropriate, though if the programming language has an established convention for conveying math errors or undefined values, it's preferable to follow it.</p>
/// <br/>
/// <br/><br><hr><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
function mean(array)
{
 var sum = 0, i;
 for (i = 0; i < array.length; i++)
 {
  sum += array[i];
 }
  return array.length ? sum / array.length : 0;
}

alert( mean( [1,2,3,4,5] ) );   // 3
alert( mean( [] ) );            // 0

/// rawSolutions:
=={{header|JavaScript}}==

===ES5===

<lang javascript>function mean(array)
{
 var sum = 0, i;
 for (i = 0; i < array.length; i++)
 {
  sum += array[i];
 }
  return array.length ? sum / array.length : 0;
}

alert( mean( [1,2,3,4,5] ) );   // 3
alert( mean( [] ) );            // 0</lang>

Using the native function `.forEach()`:
<lang javascript>function mean(array) {
    var sum = 0;
    array.forEach(function(value){
        sum += value;
        });
    return array.length ? sum / array.length : 0;
    }

alert( mean( [1,2,3,4,5] ) );   // 3</lang>

Using the native function `.reduce()`:
<lang javascript>function mean(array) {
    return !array.length ? 0
        : array.reduce(function(pre, cur, i) {
            return (pre * i + cur) / (i + 1);
            });
    }

alert( mean( [1,2,3,4,5] ) );   // 3
alert( mean( [] ) );            // 0
</lang>

Extending the `Array` prototype:
<lang javascript>Array.prototype.mean = function() {
    return !this.length ? 0
        : this.reduce(function(pre, cur, i) {
            return (pre * i + cur) / (i + 1);
            });
    }

alert( [1,2,3,4,5].mean() );   // 3
alert( [].mean() );            // 0
</lang>


{{libheader|Functional}}
<lang javascript>function mean(a)
{
 return a.length ? Functional.reduce('+', 0, a) / a.length : 0;
}</lang>


===ES6===

<lang JavaScript>(sample => {

    // mean :: [Num] => (Num | NaN)
    let mean = lst => {
        let lng = lst.length;

        return lng ? (
            lst.reduce((a, b) => a + b, 0) / lng
        ) : NaN;
    };
    
    return mean(sample);

})([1, 2, 3, 4, 5, 6, 7, 8, 9]);</lang>

{{Out}}
<lang JavaScript>5</lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
