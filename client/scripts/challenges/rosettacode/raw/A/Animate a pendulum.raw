
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-undef: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Animate a pendulum
/// type: rosetta-code

/// categories:


/// difficulty: ?

/// benchmark:
replaceWithActualFunctionHere;

/// description:
/// <div class="rosetta"><br/><p class="rosetta__paragraph"><a class="rosetta__link--rosetta" href="http://rosettacode.org/wiki/File:pendulum.gif" title="File:pendulum.gif">160px|thumb|right|Capture of the Oz version.</a></p>
/// <br/><p class="rosetta__paragraph">One good way of making an animation is by simulating a physical system and illustrating the variables in that system using a dynamically changing graphical display.</p>
/// <p class="rosetta__paragraph">The classic such physical system is a <a class="rosetta__link--wiki" href="https://en.wikipedia.org/wiki/Pendulum" title="wp: Pendulum">simple gravity pendulum</a>.</p><br/><p class="rosetta__paragraph">For this task, create a simple physical model of a pendulum and animate it.</p><br/></div>

/// challengeSeed:
function replaceMe (foo) {
  // Good luck!
  return true;
}

/// solutions:
<html><head>
  <title>Pendulum</title>
</head><body style="background: gray;">

<canvas id="canvas" width="600" height="600">
  <p>Sorry, your browser does not support the &lt;canvas&gt; used to display the pendulum animation.</p>
</canvas>
<script>
  function PendulumSim(length_m, gravity_mps2, initialAngle_rad, timestep_ms, callback) {
    var velocity = 0;
    var angle = initialAngle_rad;
    var k = -gravity_mps2/length_m;
    var timestep_s = timestep_ms / 1000;
    return setInterval(function () {
      var acceleration = k * Math.sin(angle);
      velocity += acceleration * timestep_s;
      angle    += velocity     * timestep_s;
      callback(angle);
    }, timestep_ms);
  }
  
  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');
  var prev=0;
  var sim = PendulumSim(1, 9.80665, Math.PI*99/100, 10, function (angle) {
    var rPend = Math.min(canvas.width, canvas.height) * 0.47;
    var rBall = Math.min(canvas.width, canvas.height) * 0.02;
    var rBar = Math.min(canvas.width, canvas.height) * 0.005;
    var ballX = Math.sin(angle) * rPend;
    var ballY = Math.cos(angle) * rPend;

    context.fillStyle = "rgba(255,255,255,0.51)";
    context.globalCompositeOperation = "destination-out";
    context.fillRect(0, 0, canvas.width, canvas.height);
    
    context.fillStyle = "yellow";
    context.strokeStyle = "rgba(0,0,0,"+Math.max(0,1-Math.abs(prev-angle)*10)+")";
    context.globalCompositeOperation = "source-over";

    context.save();
      context.translate(canvas.width/2, canvas.height/2);
      context.rotate(angle);
      
      context.beginPath();
      context.rect(-rBar, -rBar, rBar*2, rPend+rBar*2);
      context.fill();
      context.stroke();
      
      context.beginPath();
      context.arc(0, rPend, rBall, 0, Math.PI*2, false);
      context.fill();
      context.stroke();
    context.restore();
    prev=angle;
  });
</script>

</body></html>

/// rawSolutions:
=={{header|JavaScript}}==
===With &lt;canvas&gt;===
{{trans|E}} (plus gratuitous motion blur)

<lang javascript><html><head>
  <title>Pendulum</title>
</head><body style="background: gray;">

<canvas id="canvas" width="600" height="600">
  <p>Sorry, your browser does not support the &lt;canvas&gt; used to display the pendulum animation.</p>
</canvas>
<script>
  function PendulumSim(length_m, gravity_mps2, initialAngle_rad, timestep_ms, callback) {
    var velocity = 0;
    var angle = initialAngle_rad;
    var k = -gravity_mps2/length_m;
    var timestep_s = timestep_ms / 1000;
    return setInterval(function () {
      var acceleration = k * Math.sin(angle);
      velocity += acceleration * timestep_s;
      angle    += velocity     * timestep_s;
      callback(angle);
    }, timestep_ms);
  }
  
  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');
  var prev=0;
  var sim = PendulumSim(1, 9.80665, Math.PI*99/100, 10, function (angle) {
    var rPend = Math.min(canvas.width, canvas.height) * 0.47;
    var rBall = Math.min(canvas.width, canvas.height) * 0.02;
    var rBar = Math.min(canvas.width, canvas.height) * 0.005;
    var ballX = Math.sin(angle) * rPend;
    var ballY = Math.cos(angle) * rPend;

    context.fillStyle = "rgba(255,255,255,0.51)";
    context.globalCompositeOperation = "destination-out";
    context.fillRect(0, 0, canvas.width, canvas.height);
    
    context.fillStyle = "yellow";
    context.strokeStyle = "rgba(0,0,0,"+Math.max(0,1-Math.abs(prev-angle)*10)+")";
    context.globalCompositeOperation = "source-over";

    context.save();
      context.translate(canvas.width/2, canvas.height/2);
      context.rotate(angle);
      
      context.beginPath();
      context.rect(-rBar, -rBar, rBar*2, rPend+rBar*2);
      context.fill();
      context.stroke();
      
      context.beginPath();
      context.arc(0, rPend, rBall, 0, Math.PI*2, false);
      context.fill();
      context.stroke();
    context.restore();
    prev=angle;
  });
</script>

</body></html></lang>

===With &lt;SVG&gt;===
With some control elements to ease the usage.
<lang javascript><html>
	<head>
		<title>Swinging Pendulum Simulation</title>
	</head>
	<body><center>
		<svg id="scene" height="200" width="300">
			<line id="string" x1="150" y1="50" x2="250" y2="50" stroke="brown" stroke-width="4" />
			<circle id="ball" cx="250" cy="50" r="20" fill="black" />
		</svg>
		<br>
		Initial angle:<input id="in_angle" type="number" min="0" max="180" onchange="condReset()"/>(degrees)
		<br>
		<button type="button" onclick="startAnimation()">Start</button>
		<button type="button" onclick="stopAnimation()">Stop</button>
		<button type="button" onclick="reset()">Reset</button>
		<script>
			in_angle.value = 0;
			var cx = 150, cy = 50;
			var radius = 100; // cm
			var g = 981; // cm/s^2
			var angle = 0; // radians
			var vel = 0; // cm/s
			var dx = 0.02; // s
			var acc, vel, penx, peny;
			var timerFunction = null;
			function stopAnimation() {
				if(timerFunction != null){
					clearInterval(timerFunction);
					timerFunction = null;
				}
			}
			function startAnimation() {
				if(!timerFunction) timerFunction = setInterval(swing, dx * 1000);
			}
			function swing(){
				acc = g * Math.cos(angle) * dx;
				vel += acc * dx;
				angle += vel * dx;
				setPenPos();
			}
			function setPenPos(){
				penx = cx + radius * Math.cos(angle);
				peny = cy + radius * Math.sin(angle);
				scene.getElementById("string").setAttribute("x2", penx);
				scene.getElementById("string").setAttribute("y2", peny);
				scene.getElementById("ball").setAttribute("cx", penx);
				scene.getElementById("ball").setAttribute("cy", peny);
			}
			function reset(){
				var val = parseInt(in_angle.value)*0.0174532925199;
				if (val) angle = val;
				else angle = 0;
				acc = 0;
				vel = 0;
				setPenPos();
			}
			function condReset(){
				if (!timerFunction) reset();
			}
		</script>
	</body>
</html></lang>



/// tail:
const replaceThis = 3;

/// tests:
assert(typeof replaceMe === 'function', 'message: <code>replaceMe</code> is a function.');
