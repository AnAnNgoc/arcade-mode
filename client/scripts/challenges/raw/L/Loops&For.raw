Loops/For

{{task|Iteration}} 
[[Category:Simple]]
{{omit from|GUISS}}

“'''For'''” &nbsp; loops are used to make some block of code be iterated a number of times, setting a variable or parameter to a monotonically increasing integer value for each execution of the block of code. 

Common extensions of this allow other counting patterns or iterating over abstract structures other than the integers.


;Task:
Show how two loops may be nested within each other, with the number of iterations performed by the inner for loop being controlled by the outer for loop. 

Specifically print out the following pattern by using one for loop nested in another:
<pre>*
**
***
****
*****</pre>


;Reference:
* [[wp:For loop|For loop]] Wikipedia.
<br><br>


=={{header|JavaScript}}==
<lang javascript>var i, j;
for (i = 1; i <= 5; i += 1) {
  s = '';
  for (j = 0; j < i; j += 1)
    s += '*';
  document.write(s + '<br>');
}</lang>


Alternatively, using JavaScript's '''Array.forEach()''', and given an array of indices, 
or a simple range function which generates a range:

<lang JavaScript>function range(i) {
  return i ? range(i - 1).concat(i) : [];
}

range(5) --> [1, 2, 3, 4, 5]</lang>

We could write something like:

<lang JavaScript>var s = '';

range(5).forEach(
  function (line) {
    range(line).forEach(
      function () { s += '*'; }
    );
    s += '\n';
  }
);

console.log(s);</lang>

but it might be more natural in JavaScript, if we are going to use built-in Array functions, to simplify a little with '''Array.reduce()''', writing:

<lang JavaScript>console.log(
  range(5).reduce(
    function (a, n) {
      return a + Array(n + 1).join('*') + '\n';
    }, ''
  )
);</lang>

in which the inner ''n'' refers to the Array value visited at the next level out, and the triangle is returned as a single expression, rather than as a series of variable mutations.

Finally, in contexts where an expression composes better than a statement, the effect of a loop can often be expressed as a map.

<lang JavaScript>console.log(
  range(5).map(function(a) {
    return Array(a + 1).join('*');
  }).join('\n')
);</lang>

