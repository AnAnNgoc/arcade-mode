Accumulator factory

{{task}}
{{requires|Mutable State}}
{{Omit from|MUMPS|Creating a function implies that there is routine somewhere that has the function stored, and that function could be modified}}

A problem posed by [[wp:Paul Graham|Paul Graham]] is that of creating a function that takes a single (numeric) argument and which returns another function that is an accumulator. The returned accumulator function in turn also takes a single numeric argument, and returns the sum of all the numeric values passed in so far to that accumulator (including the initial value passed when the accumulator was created).


;Rules:
The detailed rules are at http://paulgraham.com/accgensub.html and are reproduced here for simplicity (with additions in <small>''small italic text''</small>).
:Before you submit an example, make sure the function

:# Takes a number n and returns a function (lets call it g), that takes a number i, and returns n incremented by the accumulation of i from every call of function g(i).<br><small>Although these exact function and parameter names need not be used</small>
:# Works for any numeric type-- i.e. can take both ints and floats and returns functions that can take both ints and floats. (It is not enough simply to convert all input to floats. An accumulator that has only seen integers must return integers.) <small>''(i.e., if the language doesn't allow for numeric polymorphism, you have to use overloading or something like that)''</small>
:# Generates functions that return the sum of every number ever passed to them, not just the most recent. <small>''(This requires a piece of state to hold the accumulated value, which in turn means that pure functional languages can't be used for this task.)''</small>
:# Returns a real function, meaning something that you can use wherever you could use a function you had defined in the ordinary way in the text of your program. <small>''(Follow your language's conventions here.)''</small>
:# Doesn't store the accumulated value or the returned functions in a way that could cause them to be inadvertently modified by other code. <small>''(No global variables or other such things.)''</small>
: E.g. if after the example, you added the following code (in a made-up language) <small>''where the factory function is called foo''</small>:
:: <lang pseudocode>x = foo(1); 
x(5); 
foo(3);
print x(2.3);</lang>
: It should print <tt>8.3</tt>. <small>''(There is no need to print the form of the accumulator function returned by <tt>foo(3)</tt>; it's not part of the task at all.)''</small>


;Task:
Create a function that implements the described rules. 


It need not handle any special error cases not described above. The simplest way to implement the task as described is typically to use a [[Closures|closure]], providing the language supports them.

Where it is not possible to hold exactly to the constraints above, describe the deviations.
<br><br>


=={{header|JavaScript}}==
===ES5===
<lang javascript>function accumulator(sum) {
  return function(n) {
    return sum += n;
  }
}
var x = accumulator(1);
x(5);
console.log(accumulator(3).toString() + '<br>');
console.log(x(2.3));</lang>
{{out}}
<pre>function (n) { return sum += n; }
8.3</pre>

===ES6===
<lang javascript>let accumulator = sum => (n => sum += n);
let x = accumulator(1);
console.log(x(5));
accumulator(3);
console.log(x(2.3));</lang>
{{out}}
<pre>6
8.3</pre>

===JavaScript 1.8 (SpiderMonkey Only)===
<lang javascript>function accumulator(sum) function(n) sum += n;
var x = accumulator(1);
x(5);
console.log(accumulator(3).toSource());
console.log(x(2.3));</lang>
{{out}}
<pre>(function (n) sum += n)
8.3</pre>

