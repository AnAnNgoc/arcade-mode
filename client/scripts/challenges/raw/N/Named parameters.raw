Named parameters

{{task|Basic language learning}}
Create a function which takes in a number of arguments which are specified by name rather than (necessarily) position, and show how to call the function. If the language supports reordering the arguments or optionally omitting some of them, note this.

'''Note:'''
: Named parameters relies on being able to use the names given to function parameters when the function is defined, when assigning arguments when the function is called.
: For example, if a function were to be defined as <code>define func1( paramname1, paramname2)</code>; then it could be called normally as <code>func1(argument1, argument2)</code> and in the called function paramname1 would be associated with argument1 and paramname2 with argument2.
: <code>func1</code> '''must also be able to be called in a way that visually binds each parameter to its respective argument, irrespective of argument order''', for example: <code>func1(paramname2=argument2, paramname1=argument1)</code> which ''explicitly'' makes the same parameter/argument bindings as before.
: Named parameters are often a feature of languages used in safety critical areas such as [[wp:Verilog|Verilog]] and [[wp:VHDL|VHDL]].

'''See also:'''
* [[Varargs]]
* [[Optional parameters]]
* [[wp:Named parameter|Wikipedia: Named parameter]]
<br><br>


=={{header|JavaScript}}==
JavaScript only has positional parameters, but named parameters can be emulated by passing an object with the appropriate properties:
<lang javascript>function example(options) {
  // assign some defaults where the user's has not provided a value
  opts = {}
  opts.foo = options.foo || 0;
  opts.bar = options.bar || 1;
  opts.grill = options.grill || 'pork chops'

  alert("foo is " + opts.foo + ", bar is " + opts.bar + ", and grill is " + opts.grill);
}

example({grill: "lamb kebab", bar: 3.14});
// => "foo is 0, bar is 3.14, and grill is lamb kebab"</lang>
===ECMAScript 2015 (ES6) variants===
With this version, ECMAScript adds destrucuring assignments and destructuring in function parameters. Thus you could do something like this (this works in ES6 Fiddle, but is syntax error in Mozilla SpiderMonkey JS Shell, so uses console.log instead of print):<lang javascript>let
  example = // The member name in the object can either be the same as the parameter (as in bar, grill),
            // or a different parameter name as in the case of member foo being assigned to parameter a here.
    ({foo: a=0, bar=1, grill='pork chops'}={}) => (
      console.log('foo is ',a,', bar is ',bar,', and grill is '+grill));

example();
//  foo is 0 , bar is 1 , and grill is pork chops
example({grill: "lamb kebab", bar: 3.14});
//  foo is 0 , bar is 3.14 , and grill is lamb kebab
example({foo:null});
//  foo is , bar is 1 , and grill is pork chops</lang>

