Reduced row echelon form

{{wikipedia|Rref#Pseudocode}}
{{task|Matrices}}
{{omit from|GUISS}}
Show how to compute the '''reduced row echelon form''' 
(a.k.a. '''row canonical form''') of a matrix. 

The matrix can be stored in any datatype that is convenient 
(for most languages, this will probably be a two-dimensional array). 

Built-in functions or this pseudocode (from Wikipedia) may be used:
 '''function''' ToReducedRowEchelonForm(Matrix M) '''is'''
     ''lead'' := 0
     ''rowCount'' := the number of rows in M
     ''columnCount'' := the number of columns in M
     '''for''' 0 &le; ''r'' < ''rowCount'' '''do'''
         '''if''' ''columnCount'' &le; ''lead'' '''then'''
             '''stop'''
         '''end if'''
         ''i'' = ''r''
         '''while''' M[''i'', ''lead''] = 0 '''do'''
             ''i'' = ''i'' + 1
             '''if''' ''rowCount'' = ''i'' '''then'''
                 ''i'' = ''r''
                 ''lead'' = ''lead'' + 1
                 '''if''' ''columnCount'' = ''lead'' '''then'''
                     '''stop'''
                 '''end if'''
             '''end if'''
         '''end while'''
         Swap rows ''i'' and ''r''
         If M[''r'', ''lead''] is not 0 divide row ''r'' by M[''r'', ''lead'']
         '''for''' 0 &le; ''i'' < ''rowCount'' '''do'''
             '''if''' ''i'' â‰  ''r'' '''do'''
                 Subtract M[i, lead] multiplied by row ''r'' from row ''i''
             '''end if'''
         '''end for'''
         ''lead'' = ''lead'' + 1
     '''end for'''
 '''end function'''

For testing purposes, the RREF of this matrix:
<pre>1   2   -1   -4
2   3   -1   -11
-2   0   -3   22</pre>
is:
<pre>1   0   0   -8
0   1   0   1
0   0   1   -2</pre>


=={{header|JavaScript}}==
{{works with|SpiderMonkey}} for the <code>print()</code> function.
Extends the Matrix class defined at [[Matrix Transpose#JavaScript]]
<lang javascript>// modifies the matrix in-place
Matrix.prototype.toReducedRowEchelonForm = function() {
    var lead = 0;
    for (var r = 0; r < this.rows(); r++) {
        if (this.columns() <= lead) {
            return;
        }
        var i = r;
        while (this.mtx[i][lead] == 0) {
            i++;
            if (this.rows() == i) {
                i = r;
                lead++;
                if (this.columns() == lead) {
                    return;
                }
            }
        }

        var tmp = this.mtx[i];
        this.mtx[i] = this.mtx[r];
        this.mtx[r] = tmp;

        var val = this.mtx[r][lead];
        for (var j = 0; j < this.columns(); j++) {
            this.mtx[r][j] /= val;
        }

        for (var i = 0; i < this.rows(); i++) {
            if (i == r) continue;
            val = this.mtx[i][lead];
            for (var j = 0; j < this.columns(); j++) {
                this.mtx[i][j] -= val * this.mtx[r][j];
            }
        }
        lead++;
    }
    return this;
}

var m = new Matrix([
  [ 1, 2, -1, -4],
  [ 2, 3, -1,-11],
  [-2, 0, -3, 22]
]);
print(m.toReducedRowEchelonForm());
print();

m = new Matrix([
  [ 1, 2, 3, 7],
  [-4, 7,-2, 7],
  [ 3, 3, 0, 7]
]);
print(m.toReducedRowEchelonForm());</lang>
{{out}}
<pre>1,0,0,-8
0,1,0,1
0,0,1,-2

1,0,0,0.6666666666666663
0,1,0,1.666666666666667
0,0,1,1</pre>


