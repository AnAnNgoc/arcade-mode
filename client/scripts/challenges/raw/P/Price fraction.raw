Price fraction

{{task|Financial operations}}

A friend of mine runs a pharmacy. &nbsp; He has a specialized function in his Dispensary application which receives a decimal value of currency and replaces it to a standard value. &nbsp; This value is regulated by a government department.


;Task:
Given a floating point value between &nbsp; 0.00 &nbsp; and &nbsp; 1.00, &nbsp; rescale according to the following table:

 >=  0.00  <  0.06  :=  0.10
 >=  0.06  <  0.11  :=  0.18
 >=  0.11  <  0.16  :=  0.26
 >=  0.16  <  0.21  :=  0.32
 >=  0.21  <  0.26  :=  0.38
 >=  0.26  <  0.31  :=  0.44
 >=  0.31  <  0.36  :=  0.50
 >=  0.36  <  0.41  :=  0.54
 >=  0.41  <  0.46  :=  0.58
 >=  0.46  <  0.51  :=  0.62
 >=  0.51  <  0.56  :=  0.66
 >=  0.56  <  0.61  :=  0.70
 >=  0.61  <  0.66  :=  0.74
 >=  0.66  <  0.71  :=  0.78
 >=  0.71  <  0.76  :=  0.82
 >=  0.76  <  0.81  :=  0.86
 >=  0.81  <  0.86  :=  0.90
 >=  0.86  <  0.91  :=  0.94
 >=  0.91  <  0.96  :=  0.98
 >=  0.96  <  1.01  :=  1.00
<br><br>


=={{header|JavaScript}}==

In the task definition, the first step is 0.06, the rest are 0.05 
so a re-factoring can subtract 0.01 from the value and divide by 0.05 to get the step.

Working with decimal numbers in JavaScript has issues, e.g. 0.06 - 0.01 = 0.049999999999999996 due to using IEEE 754 double precision numbers that can't accurately represent all decimals. So values are multiplied by 100 and integer arithmetic is used.

Note that multiplying a string by a number produces a number, the bitwise OR (|) truncates floating point numbers to integer, making it a concise replacement for ''Math.floor''.

Passing a value outside the range 0 <= x < 1.01 will return undefined.

<lang javascript>function getScaleFactor(v) {

  var values = ['0.10','0.18','0.26','0.32','0.38','0.44','0.50','0.54',
                '0.58','0.62','0.66','0.70','0.74','0.78','0.82','0.86',
                '0.90','0.94','0.98','1.00'];

  return values[(v * 100 - 1) / 5 | 0];
}</lang>

