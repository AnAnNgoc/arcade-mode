Pythagorean triples

{{task}}
A [[wp:Pythagorean_triple|Pythagorean triple]] is defined as three positive integers <math>(a, b, c)</math> where <math>a < b < c</math>, and <math>a^2+b^2=c^2.</math>

They are called primitive triples if <math>a, b, c</math> are co-prime, that is, if their pairwise greatest common divisors <math>{\rm gcd}(a, b) = {\rm gcd}(a, c) = {\rm gcd}(b, c) = 1</math>. 

Because of their relationship through the Pythagorean theorem, a, b, and c are co-prime if a and b are co-prime (<math>{\rm gcd}(a, b) = 1</math>). &nbsp; 

Each triple forms the length of the sides of a right triangle, whose perimeter is <math>P=a+b+c</math>.


;Task:
The task is to determine how many Pythagorean triples there are with a perimeter no larger than 100 and the number of these that are primitive.


;Extra credit: 
Deal with large values. &nbsp; Can your program handle a maximum perimeter of 1,000,000? &nbsp; What about 10,000,000? &nbsp; 100,000,000?

Note: the extra credit is not for you to demonstrate how fast your language is compared to others; &nbsp; you need a proper algorithm to solve them in a timely manner.


;Cf:
* [[List comprehensions]]
<br><br>


=={{header|JavaScript}}==
===ES6===
Exhaustive search of a full cartesian product. Not scalable.
<lang JavaScript>(() => {

    // concatMap :: (a -> [b]) -> [a] -> [b]
    const concatMap = (f, xs) => [].concat.apply([], xs.map(f));

    // range :: Int -> Int -> [Int]
    const range = (m, n) =>
        Array.from({
            length: Math.floor(n - m) + 1
        }, (_, i) => m + i);

    // gcd :: Integral a => a -> a -> a
    const gcd = (x, y) => {
        const _gcd = (a, b) => (b === 0 ? a : _gcd(b, a % b)),
            abs = Math.abs;
        return _gcd(abs(x), abs(y));
    }

    // Arguments: predicate, maximum perimeter
    // pythTripleCount :: ((Int, Int, Int) -> Bool) -> Int -> Int
    const pythTripleCount = (p, maxPerim) => {
        const xs = range(1, Math.floor(maxPerim / 2));

        return  concatMap(x =>
                concatMap(y =>
                concatMap(z =>
                (   (x + y + z     <=  maxPerim ) &&
                    (x * x + y * y === z * z    ) &&
                   p(x,  y,  z)                 ) ? [
                                [x, y, z]
                    ] :         [       ], // concatMap eliminates empty lists
                    xs.slice(y)), xs.slice(x)), xs
                )
                .length;
    };

    return [10, 100, 1000]
        .map(n => ({
            maxPerimeter: n,
            triples: pythTripleCount(x => true, n),
            primitives: pythTripleCount((x, y, _) => gcd(x, y) === 1, n)
        }));
})();</lang>

{{Out}}
<lang JavaScript>[{"maxPerimeter":10, "triples":0, "primitives":0}, 
 {"maxPerimeter":100, "triples":17, "primitives":7}, 
 {"maxPerimeter":1000, "triples":325, "primitives":70}]</lang>

