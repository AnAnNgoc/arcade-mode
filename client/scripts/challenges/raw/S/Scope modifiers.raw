Scope modifiers

{{task|Basic language learning}}
Most programming languages offer support for [[Creating a function|subroutines]]. 
When execution changes between subroutines, different sets of variables and functions ("scopes") are available to the program. 
Frequently these sets are defined by the placement of the variable and function declarations ("static scoping" or "lexical scoping"). 
These sets may also be defined by special modifiers to the variable and function declarations.

Show the different scope modifiers available in your language and briefly explain how they change the scope of their variable or function. 
If your language has no scope modifiers, note it.


=={{header|JavaScript}}==

There are not precisely any scope ''modifiers'' in JavaScript.

The <code>var</code> variable declaration makes a variable local to a function, and function parameters are also local. Any variable not so declared is global, except in ES5 strict mode where an undeclared variable is an error.

A named function definition (<code>function foo() { ... }</code>) is “hoisted” to the top of the enclosing function; it is therefore possible to call a function before its definition would seem to be executed.

