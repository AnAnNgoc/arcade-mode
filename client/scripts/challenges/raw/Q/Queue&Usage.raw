Queue/Usage

{{task|Data Structures}}{{Data structure}}
[[File:Fifo.gif|frame|right|Illustration of FIFO behavior]]

;Task:
Create a queue data structure and demonstrate its operations. 

(For implementations of queues, see the [[FIFO]] task.)


Operations:
::* &nbsp; push   &nbsp; &nbsp; &nbsp;        (aka ''enqueue'') - add element
::* &nbsp; pop    &nbsp; &nbsp; &nbsp; &nbsp; (aka ''dequeue'') - pop first element
::* &nbsp; empty  &nbsp; &nbsp;               - return truth value when empty

<br>
{{Template:See also lists}}
<br><br>


=={{header|JavaScript}}==
JavaScript arrays can be used as FIFOs.
<lang javascript>var f = new Array();
print(f.length);
f.push(1,2);         // can take multiple arguments
f.push(3);
f.shift();
f.shift();
print(f.length);
print(f.shift())
print(f.length == 0);
print(f.shift());</lang>

outputs:
<pre>0
1
3
true
undefined</pre>

