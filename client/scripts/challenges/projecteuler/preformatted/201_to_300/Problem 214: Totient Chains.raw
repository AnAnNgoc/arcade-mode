
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Problem 214: Totient Chains
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">Let φ be Euler's totient function, i.e. for a natural number n,</p>
/// <p class="euler__paragraph">φ(n) is the number of k, 1 ≤ k ≤ n, for which gcd(k,n) = 1.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">By iterating φ, each positive integer generates a decreasing chain of numbers ending in 1.</p>
/// <p class="euler__paragraph">E.g. if we start with 5 the sequence 5,4,2,1 is generated.</p>
/// <p class="euler__paragraph">Here is a listing of all chains with length 4:</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">5,4,2,1</p>
/// <p class="euler__paragraph">7,6,2,1</p>
/// <p class="euler__paragraph">8,4,2,1</p>
/// <p class="euler__paragraph">9,6,2,1</p>
/// <p class="euler__paragraph">10,4,2,1</p>
/// <p class="euler__paragraph">12,4,2,1</p>
/// <p class="euler__paragraph">14,6,2,1</p>
/// <p class="euler__paragraph">18,6,2,1</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Only two of these chains start with a prime, their sum is 12.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">What is the sum of all primes less than 40000000 which generate a chain of length 25?</p></div>

/// challengeSeed:
function euler214() {
  // Good luck!
  return true;
}

euler214();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler214 === 'function', 'message: <code>euler214()</code> is a function.');
assert.strictEqual(euler214(), 1677366278943, 'message: <code>euler214()</code> should return 1677366278943.');
/// id: 5900f4421000cf542c50ff55
