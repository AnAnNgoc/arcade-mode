
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 219: Skew-cost coding
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">Let A and B be bit strings (sequences of 0's and 1's).</p>
/// <p class="euler__paragraph">If A is equal to the leftmost length(A) bits of B, then A is said to be a prefix of B.</p>
/// <p class="euler__paragraph">For example, 00110 is a prefix of 001101001, but not of 00111 or 100110.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">A prefix-free code of size n is a collection of n distinct bit strings such that no string is a prefix of any other.  For example, this is a prefix-free code of size 6:</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">0000, 0001, 001, 01, 10, 11</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Now suppose that it costs one penny to transmit a '0' bit, but four pence to transmit a '1'.</p>
/// <p class="euler__paragraph">Then the total cost of the prefix-free code shown above is 35 pence, which happens to be the cheapest possible for the skewed pricing scheme in question.</p>
/// <p class="euler__paragraph">In short, we write Cost(6) = 35.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">What is Cost(109) ?</p></div>

/// challengeSeed:
function euler219() {
  // Good luck!
  return true;
}

euler219();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler219 === 'function', 'message: <code>euler219()</code> is a function.');
assert.strictEqual(euler219(), 64564225042, 'message: <code>euler219()</code> should return 64564225042.');
/// id: 5900f4481000cf542c50ff5a
