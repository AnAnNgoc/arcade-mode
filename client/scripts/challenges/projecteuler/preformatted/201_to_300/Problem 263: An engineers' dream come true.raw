
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 263: An engineers' dream come true
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">Consider the number 6. The divisors of 6 are: 1,2,3 and 6.</p>
/// <p class="euler__paragraph">Every number from 1 up to and including 6 can be written as a sum of distinct divisors of 6:</p>
/// <p class="euler__paragraph">1=1, 2=2, 3=1+2, 4=1+3, 5=2+3, 6=6.</p>
/// <p class="euler__paragraph">A number n is called a practical number if every number from 1 up to and including n can be expressed as a sum of distinct divisors of n.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">A pair of consecutive prime numbers with a difference of six is called a sexy pair (since "sex" is the Latin word for "six"). The first sexy pair is (23, 29).</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">We may occasionally find a triple-pair, which means three consecutive sexy prime pairs, such that the second member of each pair is the first member of the next pair.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">We shall call a number n such that :</p>
/// <p class="euler__paragraph">(n-9, n-3), (n-3,n+3), (n+3, n+9) form a triple-pair, and </p>
/// <p class="euler__paragraph">the numbers n-8, n-4, n, n+4 and n+8 are all practical,</p>
/// <p class="euler__paragraph"> </p>
/// <p class="euler__paragraph">an engineers’ paradise.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Find the sum of the first four engineers’ paradises.</p></div>

/// challengeSeed:
function euler263() {
  // Good luck!
  return true;
}

euler263();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler263 === 'function', 'message: <code>euler263()</code> is a function.');
assert.strictEqual(euler263(), 2039506520, 'message: <code>euler263()</code> should return 2039506520.');
/// id: 5900f4741000cf542c50ff86
