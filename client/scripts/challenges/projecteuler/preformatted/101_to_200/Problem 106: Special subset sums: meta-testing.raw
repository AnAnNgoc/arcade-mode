
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Problem 106: Special subset sums: meta-testing
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">Let S(A) represent the sum of elements in set A of size n. We shall call it a special sum set if for any two non-empty disjoint subsets, B and C, the following properties are true:</p>
/// <p class="euler__paragraph">S(B) â‰  S(C); that is, sums of subsets cannot be equal.</p>
/// <p class="euler__paragraph">If B contains more elements than C then S(B) > S(C).</p>
/// <p class="euler__paragraph">For this problem we shall assume that a given set contains n strictly increasing elements and it already satisfies the second rule.</p>
/// <p class="euler__paragraph">Surprisingly, out of the 25 possible subset pairs that can be obtained from a set for which n = 4, only 1 of these pairs need to be tested for equality (first rule). Similarly, when n = 7, only 70 out of the 966 subset pairs need to be tested.</p>
/// <p class="euler__paragraph">For n = 12, how many of the 261625 subset pairs that can be obtained need to be tested for equality?</p>
/// <p class="euler__paragraph">NOTE: This problem is related to Problem 103 and Problem 105.</p></div>

/// challengeSeed:
function euler106() {
  // Good luck!
  return true;
}

euler106();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler106 === 'function', 'message: <code>euler106()</code> is a function.');
assert.strictEqual(euler106(), 21384, 'message: <code>euler106()</code> should return 21384.');
/// id: 5900f3d71000cf542c50fee9
