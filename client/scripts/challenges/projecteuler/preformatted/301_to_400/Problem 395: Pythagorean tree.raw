
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Problem 395: Pythagorean tree
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">The Pythagorean tree is a fractal generated by the following procedure:</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Start with a unit square. Then, calling one of the sides its base (in the animation, the bottom side is the base):</p>
/// <p class="euler__paragraph"> Attach a right triangle to the side opposite the base, with the hypotenuse coinciding with that side and with the sides in a 3-4-5 ratio. Note that the smaller side of the triangle must be on the 'right' side with respect to the base (see animation).</p>
/// <p class="euler__paragraph"> Attach a square to each leg of the right triangle, with one of its sides coinciding with that leg.</p>
/// <p class="euler__paragraph"> Repeat this procedure for both squares, considering as their bases the sides touching the triangle.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">The resulting figure, after an infinite number of iterations, is the Pythagorean tree.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">It can be shown that there exists at least one rectangle, whose sides are parallel to the largest square of the Pythagorean tree, which encloses the Pythagorean tree completely.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Find the smallest area possible for such a bounding rectangle, and give your answer rounded to 10 decimal places.</p></div>

/// challengeSeed:
function euler395() {
  // Good luck!
  return true;
}

euler395();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler395 === 'function', 'message: <code>euler395()</code> is a function.');
assert.strictEqual(euler395(), 28.2453753155, 'message: <code>euler395()</code> should return 28.2453753155.');
/// id: 5900f4f71000cf542c51000a
