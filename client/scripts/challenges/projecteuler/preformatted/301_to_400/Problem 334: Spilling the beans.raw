
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 334: Spilling the beans
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">In Plato's heaven, there exist an infinite number of bowls in a straight line.</p>
/// <p class="euler__paragraph">Each bowl either contains some or none of a finite number of beans.</p>
/// <p class="euler__paragraph">A child plays a game, which allows only one kind of move: removing two beans from any bowl, and putting one in each of the two adjacent bowls. The game ends when each bowl contains either one or no beans.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">For example, consider two adjacent bowls containing 2 and 3 beans respectively, all other bowls being empty. The following eight moves will finish the game:</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">You are given the following sequences:</p>
/// <p class="euler__paragraph">      t0 = 123456.</p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">      ti = </p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">         ti-12</p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">         ,</p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">         if ti-1 is even</p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">         ti-12</p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">         </p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">         926252, </p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">         if ti-1 is odd</p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph">      </p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph">      where ⌊x⌋ is the floor function</p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph">      and  is the bitwise XOR operator.</p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">      bi = ( ti mod 211) + 1.</p>
/// <p class="euler__paragraph">   </p>
/// <p class="euler__paragraph">The first two terms of the last sequence are b1 = 289 and b2 = 145.</p>
/// <p class="euler__paragraph">If we start with b1 and b2 beans in two adjacent bowls, 3419100 moves would be required to finish the game.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Consider now 1500 adjacent bowls containing b1, b2,..., b1500 beans respectively, all other bowls being empty. Find how many moves it takes before the game ends.</p></div>

/// challengeSeed:
function euler334() {
  // Good luck!
  return true;
}

euler334();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler334 === 'function', 'message: <code>euler334()</code> is a function.');
assert.strictEqual(euler334(), 150320021261690850, 'message: <code>euler334()</code> should return 150320021261690850.');
/// id: 5900f4ba1000cf542c50ffcd
