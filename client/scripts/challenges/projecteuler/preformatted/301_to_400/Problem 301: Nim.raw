
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Problem 301: Nim
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">Nim is a game played with heaps of stones, where two players take it in turn to remove any number of stones from any heap until no stones remain.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">We'll consider the three-heap normal-play version of Nim, which works as follows:</p>
/// <p class="euler__paragraph">- At the start of the game there are three heaps of stones.</p>
/// <p class="euler__paragraph">- On his turn the player removes any positive number of stones from any single heap.</p>
/// <p class="euler__paragraph">- The first player unable to move (because no stones remain) loses.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"> If (n1,n2,n3) indicates a Nim position consisting of heaps of size n1, n2 and n3 then there is a simple function X(n1,n2,n3) — that you may look up or attempt to deduce for yourself — that returns:</p>
/// <p class="euler__paragraph">zero if, with perfect strategy, the player about to move will eventually lose; or</p>
/// <p class="euler__paragraph">non-zero if, with perfect strategy, the player about to move will eventually win.For example X(1,2,3) = 0 because, no matter what the current player does, his opponent can respond with a move that leaves two heaps of equal size, at which point every move by the current player can be mirrored by his opponent until no stones remain; so the current player loses. To illustrate:</p>
/// <p class="euler__paragraph">- current player moves to (1,2,1)</p>
/// <p class="euler__paragraph">- opponent moves to (1,0,1)</p>
/// <p class="euler__paragraph">- current player moves to (0,0,1)</p>
/// <p class="euler__paragraph">- opponent moves to (0,0,0), and so wins.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">For how many positive integers n ≤ 230 does X(n,2n,3n) = 0 ?</p></div>

/// challengeSeed:
function euler301() {
  // Good luck!
  return true;
}

euler301();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler301 === 'function', 'message: <code>euler301()</code> is a function.');
assert.strictEqual(euler301(), 2178309, 'message: <code>euler301()</code> should return 2178309.');
/// id: 5900f4991000cf542c50ffab
