
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Problem 374: Maximum Integer Partition Product
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">An integer partition of a number n is a way of writing n as a sum of positive integers.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Partitions that differ only in the order of their summands are considered the same.</p>
/// <p class="euler__paragraph">A partition of n into distinct parts is a partition of n in which every part occurs at most once.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">The partitions of 5 into distinct parts are:</p>
/// <p class="euler__paragraph">5, 4+1 and 3+2.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Let f(n) be the maximum product of the parts of any such partition of n into distinct parts and let m(n) be the number of elements of any such partition of n with that product.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">So f(5)=6 and m(5)=2.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">For n=10 the partition with the largest product is 10=2+3+5, which gives f(10)=30 and m(10)=3.</p>
/// <p class="euler__paragraph">And their product, f(10)·m(10) = 30·3 = 90</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">It can be verified that</p>
/// <p class="euler__paragraph">∑f(n)·m(n) for 1 ≤ n ≤ 100 = 1683550844462.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Find ∑f(n)·m(n) for 1 ≤ n ≤ 1014.</p>
/// <p class="euler__paragraph">Give your answer modulo 982451653, the 50 millionth prime.</p></div>

/// challengeSeed:
function euler374() {
  // Good luck!
  return true;
}

euler374();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler374 === 'function', 'message: <code>euler374()</code> is a function.');
assert.strictEqual(euler374(), 334420941, 'message: <code>euler374()</code> should return 334420941.');
/// id: 5900f4e51000cf542c50fff6
