
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 338: Cutting Rectangular Grid Paper
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">A rectangular sheet of grid paper with integer dimensions w × h is given. Its grid spacing is 1.</p>
/// <p class="euler__paragraph">When we cut the sheet along the grid lines into two pieces and rearrange those pieces without overlap, we can make new rectangles with different dimensions.</p>
/// <p class="euler__paragraph">For example, from a sheet with dimensions 9 × 4 , we can make rectangles with dimensions 18 × 2, 12 × 3 and 6 × 6 by cutting and rearranging as below:</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Similarly, from a sheet with dimensions 9 × 8 , we can make rectangles with dimensions 18 × 4 and 12 × 6 .</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">For a pair w and h, let F(w,h) be the number of distinct rectangles that can be made from a sheet with dimensions w × h .</p>
/// <p class="euler__paragraph">For example, F(2,1) = 0, F(2,2) = 1, F(9,4) = 3 and F(9,8) = 2. </p>
/// <p class="euler__paragraph">Note that rectangles congruent to the initial one are not counted in F(w,h).</p>
/// <p class="euler__paragraph">Note also that rectangles with dimensions w × h and dimensions h × w are not considered distinct.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">For an integer N, let G(N) be the sum of F(w,h) for all pairs w and h which satisfy 0 < h ≤ w ≤ N.</p>
/// <p class="euler__paragraph">We can verify that G(10) = 55, G(103) = 971745 and G(105) = 9992617687.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Find G(1012). Give your answer modulo 108.</p></div>

/// challengeSeed:
function euler338() {
  // Good luck!
  return true;
}

euler338();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler338 === 'function', 'message: <code>euler338()</code> is a function.');
assert.strictEqual(euler338(), 15614292, 'message: <code>euler338()</code> should return 15614292.');
/// id: 5900f4be1000cf542c50ffd1
