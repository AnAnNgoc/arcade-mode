
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Problem 362: Squarefree factors
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">Consider the number 54.</p>
/// <p class="euler__paragraph">54 can be factored in 7 distinct ways into one or more factors larger than 1:</p>
/// <p class="euler__paragraph">54, 2×27, 3×18, 6×9, 3×3×6, 2×3×9 and 2×3×3×3.</p>
/// <p class="euler__paragraph">If we require that the factors are all squarefree only two ways remain: 3×3×6 and 2×3×3×3.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Let's call Fsf(n) the number of ways n can be factored into one or more squarefree factors larger than 1, so</p>
/// <p class="euler__paragraph">Fsf(54)=2.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Let S(n) be ∑Fsf(k) for k=2 to n.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">S(100)=193.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Find S(10 000 000 000).</p></div>

/// challengeSeed:
function euler362() {
  // Good luck!
  return true;
}

euler362();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler362 === 'function', 'message: <code>euler362()</code> is a function.');
assert.strictEqual(euler362(), 457895958010, 'message: <code>euler362()</code> should return 457895958010.');
/// id: 5900f4d61000cf542c50ffe9
