
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 426: Box-ball system
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">Consider an infinite row of boxes. Some of the boxes contain a ball. For example, an initial configuration of 2 consecutive occupied boxes followed by 2 empty boxes, 2 occupied boxes, 1 empty box, and 2 occupied boxes can be denoted by the sequence (2, 2, 2, 1, 2), in which the number of consecutive occupied and empty boxes appear alternately.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">A turn consists of moving each ball exactly once according to the following rule: Transfer the leftmost ball which has not been moved to the nearest empty box to its right.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">After one turn the sequence (2, 2, 2, 1, 2) becomes (2, 2, 1, 2, 3) as can be seen below; note that we begin the new sequence starting at the first occupied box.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">A system like this is called a Box-Ball System or BBS for short.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">It can be shown that after a sufficient number of turns, the system evolves to a state where the consecutive numbers of occupied boxes is invariant. In the example below, the consecutive numbers of occupied boxes evolves to [1, 2, 3]; we shall call this the final state.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">We define the sequence {ti}:s0 = 290797</p>
/// <p class="euler__paragraph">sk+1 = sk2 mod 50515093</p>
/// <p class="euler__paragraph">tk = (sk mod 64) + 1</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">Starting from the initial configuration (t0, t1, …, t10), the final state becomes [1, 3, 10, 24, 51, 75].</p>
/// <p class="euler__paragraph">Starting from the initial configuration (t0, t1, …, t10 000 000), find the final state.</p>
/// <p class="euler__paragraph">Give as your answer the sum of the squares of the elements of the final state. For example, if the final state is [1, 2, 3] then 14 ( = 12 + 22 + 32) is your answer.</p></div>

/// challengeSeed:
function euler426() {
  // Good luck!
  return true;
}

euler426();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler426 === 'function', 'message: <code>euler426()</code> is a function.');
assert.strictEqual(euler426(), 31591886008, 'message: <code>euler426()</code> should return 31591886008.');
/// id: 5900f5171000cf542c510029
