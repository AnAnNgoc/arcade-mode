
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('assert');

/// title: Problem 437: Fibonacci primitive roots
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">When we calculate 8n modulo 11 for n=0 to 9 we get: 1, 8, 9, 6, 4, 10, 3, 2, 5, 7.</p>
/// <p class="euler__paragraph">As we see all possible values from 1 to 10 occur. So 8 is a primitive root of 11.</p>
/// <p class="euler__paragraph">But there is more:</p>
/// <p class="euler__paragraph">If we take a closer look we see:</p>
/// <p class="euler__paragraph">1+8=9</p>
/// <p class="euler__paragraph">8+9=17≡6 mod 11</p>
/// <p class="euler__paragraph">9+6=15≡4 mod 11</p>
/// <p class="euler__paragraph">6+4=10</p>
/// <p class="euler__paragraph">4+10=14≡3 mod 11</p>
/// <p class="euler__paragraph">10+3=13≡2 mod 11</p>
/// <p class="euler__paragraph">3+2=5</p>
/// <p class="euler__paragraph">2+5=7</p>
/// <p class="euler__paragraph">5+7=12≡1 mod 11.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">So the powers of 8 mod 11 are cyclic with period 10, and 8n + 8n+1 ≡ 8n+2 (mod 11).</p>
/// <p class="euler__paragraph">8 is called a Fibonacci primitive root of 11.</p>
/// <p class="euler__paragraph">Not every prime has a Fibonacci primitive root.</p>
/// <p class="euler__paragraph">There are 323 primes less than 10000 with one or more Fibonacci primitive roots and the sum of these primes is 1480491.</p>
/// <p class="euler__paragraph">Find the sum of the primes less than 100,000,000 with at least one Fibonacci primitive root.</p></div>

/// challengeSeed:
function euler437() {
  // Good luck!
  return true;
}

euler437();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler437 === 'function', 'message: <code>euler437()</code> is a function.');
assert.strictEqual(euler437(), 74204709657207, 'message: <code>euler437()</code> should return 74204709657207.');
/// id: 5900f5241000cf542c510036
