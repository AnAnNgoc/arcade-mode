
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 12: Highly divisible triangular number
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:</p>
/// <p class="euler__paragraph">1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...</p>
/// <p class="euler__paragraph">Let us list the factors of the first seven triangle numbers:</p>
/// <p class="euler__paragraph"> 1: 1 3: 1,3 6: 1,2,3,610: 1,2,5,1015: 1,3,5,1521: 1,3,7,2128: 1,2,4,7,14,28</p>
/// <p class="euler__paragraph">We can see that 28 is the first triangle number to have over five divisors.</p>
/// <p class="euler__paragraph">What is the value of the first triangle number to have over five hundred divisors?</p></div>

/// challengeSeed:
function euler12() {
// noprotect
  // Good luck!
  return true;
}

euler12();

/// solutions:
// noprotect
function euler12() {
  function findFactors(num) {
    const factors = [];
    const sqrtOfNum = Math.floor(num ** 0.5);
    for (let divisor = 1; divisor <= sqrtOfNum; divisor++) {
      if (num % divisor === 0) {
        factors.push(divisor);
        if (divisor !== num / divisor) {
          factors.push(num / divisor);
        }
      }
    }
    return factors;
  }

  const numFactors = 500;
  let i = 1;
  let triangularNum = 1;
  while (findFactors(triangularNum).length < numFactors) {
    i += 1;
    triangularNum += i;
  }
  return triangularNum;
}

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler12 === 'function', 'message: <code>euler12()</code> is a function.');
assert.strictEqual(euler12(), 76576500, 'message: <code>euler12()</code> should return 76576500.');
/// id: 5900f3781000cf542c50fe8b
