
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 287: Quadtree encoding (a simple compression algorithm)
/// type: project-euler

/// categories:
math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
<div class="euler"><p class="euler__paragraph">The quadtree encoding allows us to describe a 2N×2N  black and white image as a sequence of bits (0 and 1). Those sequences are to be read from left to right like this:</p><p class="euler__paragraph">the first bit deals with the complete 2N×2N region;</p><p class="euler__paragraph">"0" denotes a split:</p><p class="euler__paragraph">the current 2n×2n region is divided into 4 sub-regions of dimension 2n-1×2n-1,</p><p class="euler__paragraph">the next bits contains the description of the top left, top right, bottom left and bottom right sub-regions - in that order;</p><p class="euler__paragraph">"10" indicates that the current region contains only black pixels;</p><p class="euler__paragraph">"11" indicates that the current region contains only white pixels.Consider the following 4×4 image (colored marks denote places where a split can occur):</p><p class="euler__paragraph"></p><p class="euler__paragraph">This image can be described by several sequences, for example :</p><p class="euler__paragraph">"001010101001011111011010101010", of length 30, or</p><p class="euler__paragraph">"0100101111101110", of length 16, which is the minimal sequence for this image.</p><p class="euler__paragraph"></p><p class="euler__paragraph">For a positive integer N, define DN as the 2N×2N image with the following coloring scheme:</p><p class="euler__paragraph">the pixel with coordinates x = 0, y = 0 corresponds to the bottom left pixel,</p><p class="euler__paragraph">if (x - 2N-1)2 + (y - 2N-1)2 ≤ 22N-2 then the pixel is black,</p><p class="euler__paragraph">otherwise the pixel is white.What is the length of the minimal sequence describing D24 ?</p></div>

/// challengeSeed:
function euler287() {
  // Good luck!
  return true;
}

euler287();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert.strictEqual(euler287(), 313135496, 'message: <code>euler287()</code> should return 313135496.');
/// id: 5900f48b1000cf542c50ff9e
