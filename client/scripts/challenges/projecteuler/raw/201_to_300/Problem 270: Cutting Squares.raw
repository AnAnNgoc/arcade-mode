
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 270: Cutting Squares
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">A square piece of paper with integer dimensions N×N is placed with a corner at the origin and two of its sides along the x- and y-axes. Then, we cut it up respecting the following rules:</p><p class="euler__paragraph">We only make straight cuts between two points lying on different sides of the square, and having integer coordinates.</p><p class="euler__paragraph">Two cuts cannot cross, but several cuts can meet at the same border point.</p><p class="euler__paragraph">Proceed until no more legal cuts can be made.</p><p class="euler__paragraph">Counting any reflections or rotations as distinct, we call C(N) the number of ways to cut an N×N square. For example, C(1) = 2 and C(2) = 30 (shown below).</p><p class="euler__paragraph"></p><p class="euler__paragraph"></p><p class="euler__paragraph">What is C(30) mod 108 ?</p></div>

/// challengeSeed:
function euler270() {
  // Good luck!
  return true;
}

euler270();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert.strictEqual(euler270(), 82282080, 'message: <code>euler270()</code> should return 82282080.');
/// id: 5900f47c1000cf542c50ff8e
