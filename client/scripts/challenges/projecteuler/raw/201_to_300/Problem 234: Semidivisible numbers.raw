
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 234: Semidivisible numbers
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">For an integer n ≥ 4, we define the lower prime square root of n, denoted by lps(n), as the largest prime ≤ √n and the upper prime square root of n, ups(n), as the smallest prime ≥ √n.</p>
/// <p class="euler__paragraph">So, for example, lps(4) = 2 = ups(4), lps(1000) = 31, ups(1000) = 37.</p>
/// <p class="euler__paragraph">Let us call an integer n ≥ 4 semidivisible, if one of lps(n) and ups(n) divides n, but not both.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">The sum of the semidivisible numbers not exceeding 15 is 30, the numbers are 8, 10 and 12. 15 is not semidivisible because it is a multiple of both lps(15) = 3 and ups(15) = 5.</p>
/// <p class="euler__paragraph">As a further example, the sum of the 92 semidivisible numbers up to 1000 is 34825.</p>
/// <p class="euler__paragraph"></p>
/// <p class="euler__paragraph">What is the sum of all semidivisible numbers not exceeding 999966663333 ?</p></div>

/// challengeSeed:
function euler234() {
  // Good luck!
  return true;
}

euler234();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler234 === 'function', 'message: <code>euler234()</code> is a function.');
assert.strictEqual(euler234(), 1259187438574927000, 'message: <code>euler234()</code> should return 1259187438574927000.');
/// id: 5900f4571000cf542c50ff69
