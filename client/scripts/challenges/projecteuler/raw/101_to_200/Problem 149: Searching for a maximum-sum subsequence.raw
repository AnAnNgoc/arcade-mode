
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 149: Searching for a maximum-sum subsequence
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">Looking at the table below, it is easy to verify that the maximum possible sum of adjacent numbers in any direction (horizontal, vertical, diagonal or anti-diagonal) is 16 (= 8 + 7 + 1).</p><p class="euler__paragraph"></p><p class="euler__paragraph"></p><p class="euler__paragraph">−25329−6513273−18−4  8</p><p class="euler__paragraph"></p><p class="euler__paragraph">Now, let us repeat the search, but on a much larger scale:</p><p class="euler__paragraph"></p><p class="euler__paragraph">First, generate four million pseudo-random numbers using a specific form of what is known as a "Lagged Fibonacci Generator":</p><p class="euler__paragraph"></p><p class="euler__paragraph">For 1 ≤ k ≤ 55, sk = [100003 − 200003k + 300007k3] (modulo 1000000) − 500000.</p><p class="euler__paragraph">For 56 ≤ k ≤ 4000000, sk = [sk−24 + sk−55 + 1000000] (modulo 1000000) − 500000.</p><p class="euler__paragraph"></p><p class="euler__paragraph">Thus, s10 = −393027 and s100 = 86613.</p><p class="euler__paragraph"></p><p class="euler__paragraph">The terms of s are then arranged in a 2000×2000 table, using the first 2000 numbers to fill the first row (sequentially), the next 2000 numbers to fill the second row, and so on.</p><p class="euler__paragraph"></p><p class="euler__paragraph">Finally, find the greatest sum of (any number of) adjacent entries in any direction (horizontal, vertical, diagonal or anti-diagonal).</p></div>

/// challengeSeed:
function euler149() {
  // Good luck!
  return true;
}

euler149();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert.strictEqual(euler149(), 52852124, 'message: <code>euler149()</code> should return 52852124.');
/// id: 5900f4021000cf542c50ff13
