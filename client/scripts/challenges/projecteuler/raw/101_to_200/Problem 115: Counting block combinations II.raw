
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 115: Counting block combinations II
/// type: project-euler

/// categories:
math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
<div class="euler"><p class="euler__paragraph">NOTE: This is a more difficult version of Problem 114.</p><p class="euler__paragraph">A row measuring n units in length has red blocks with a minimum length of m units placed on it, such that any two red blocks (which are allowed to be different lengths) are separated by at least one black square.</p><p class="euler__paragraph">Let the fill-count function, F(m, n), represent the number of ways that a row can be filled.</p><p class="euler__paragraph">For example, F(3, 29) = 673135 and F(3, 30) = 1089155.</p><p class="euler__paragraph">That is, for m = 3, it can be seen that n = 30 is the smallest value for which the fill-count function first exceeds one million.</p><p class="euler__paragraph">In the same way, for m = 10, it can be verified that F(10, 56) = 880711 and F(10, 57) = 1148904, so n = 57 is the least value for which the fill-count function first exceeds one million.</p><p class="euler__paragraph">For m = 50, find the least value of n for which the fill-count function first exceeds one million.</p></div>

/// challengeSeed:
function euler115() {
  // Good luck!
  return true;
}

euler115();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert.strictEqual(euler115(), 168, 'message: <code>euler115()</code> should return 168.');
/// id: 5900f3df1000cf542c50fef1
