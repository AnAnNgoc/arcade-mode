
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 182: RSA encryption
/// type: project-euler

/// categories:
math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
<div class="euler"><p class="euler__paragraph">The RSA encryption is based on the following procedure:</p><p class="euler__paragraph">Generate two distinct primes p and q.Compute n=pq and φ=(p-1)(q-1).</p><p class="euler__paragraph">Find an integer e, 1<e<φ, such that gcd(e,φ)=1.</p><p class="euler__paragraph">A message in this system is a number in the interval [0,n-1].</p><p class="euler__paragraph">A text to be encrypted is then somehow converted to messages (numbers in the interval [0,n-1]).</p><p class="euler__paragraph">To encrypt the text,  for each message, m, c=me mod n is calculated.</p><p class="euler__paragraph">To decrypt the text, the following procedure is needed: calculate d such that ed=1 mod φ, then for each encrypted message, c, calculate m=cd mod n.</p><p class="euler__paragraph">There exist values of e and m  such that me mod n=m.We call messages m for which me mod n=m unconcealed messages.</p><p class="euler__paragraph">An issue when choosing e is that there should not be too many unconcealed messages.  For instance, let p=19 and q=37.</p><p class="euler__paragraph">Then n=19*37=703 and φ=18*36=648.</p><p class="euler__paragraph">If we choose e=181, then, although gcd(181,648)=1 it turns out that all possible messagesm (0≤m≤n-1) are unconcealed when calculating me mod n.</p><p class="euler__paragraph">For any valid choice of e there exist some unconcealed messages.</p><p class="euler__paragraph">It's important that the number of unconcealed messages is at a minimum.</p><p class="euler__paragraph">Choose p=1009 and q=3643.</p><p class="euler__paragraph">Find the sum of all values of e, 1<e<φ(1009,3643) and gcd(e,φ)=1, so that the number of unconcealed messages for this value of e is at a minimum.</p></div>

/// challengeSeed:
function euler182() {
  // Good luck!
  return true;
}

euler182();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert.strictEqual(euler182(), 399788195976, 'message: <code>euler182()</code> should return 399788195976.');
/// id: 5900f4231000cf542c50ff35
