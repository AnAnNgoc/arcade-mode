
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 18: Maximum path sum I
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.</p>
/// <p class="euler__paragraph">37 4</p>
/// <p class="euler__paragraph">2 4 6</p>
/// <p class="euler__paragraph">8 5 9 3</p>
/// <p class="euler__paragraph">That is, 3 + 7 + 4 + 9 = 23.</p>
/// <p class="euler__paragraph">Find the maximum total from top to bottom of the triangle below:</p>
/// <p class="euler__paragraph">75</p>
/// <p class="euler__paragraph">95 64</p>
/// <p class="euler__paragraph">17 47 82</p>
/// <p class="euler__paragraph">18 35 87 10</p>
/// <p class="euler__paragraph">20 04 82 47 65</p>
/// <p class="euler__paragraph">19 01 23 75 03 34</p>
/// <p class="euler__paragraph">88 02 77 73 07 63 67</p>
/// <p class="euler__paragraph">99 65 04 28 06 16 70 92</p>
/// <p class="euler__paragraph">41 41 26 56 83 40 80 70 33</p>
/// <p class="euler__paragraph">41 48 72 33 47 32 37 16 94 29</p>
/// <p class="euler__paragraph">53 71 44 65 25 43 91 52 97 51 14</p>
/// <p class="euler__paragraph">70 11 33 28 77 73 17 78 39 68 17 57</p>
/// <p class="euler__paragraph">91 71 52 38 17 14 91 43 58 50 27 29 48</p>
/// <p class="euler__paragraph">63 66 04 68 89 53 67 30 73 16 69 87 40 31</p>
/// <p class="euler__paragraph">04 62 98 27 23 09 70 98 73 93 38 53 60 04 23</p>
/// <p class="euler__paragraph">NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)</p></div>

/// challengeSeed:
function euler18() {
  // Good luck!
  return true;
}

euler18();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert(typeof euler18 === 'function', 'message: <code>euler18()</code> is a function.');
assert.strictEqual(euler18(), 1074, 'message: <code>euler18()</code> should return 1074.');
/// id: 5900f37e1000cf542c50fe91
