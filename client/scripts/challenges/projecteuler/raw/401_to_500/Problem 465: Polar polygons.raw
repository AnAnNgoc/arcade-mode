
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 465: Polar polygons
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">The kernel of a polygon is defined by the set of points from which the entire polygon's boundary is visible. We define a polar polygon as a polygon for which the origin is strictly contained inside its kernel.</p><p class="euler__paragraph"></p><p class="euler__paragraph">For this problem, a polygon can have collinear consecutive vertices. However, a polygon still cannot have self-intersection and cannot have zero area.</p><p class="euler__paragraph"></p><p class="euler__paragraph">For example, only the first of the following is a polar polygon (the kernels of the second, third, and fourth do not strictly contain the origin, and the fifth does not have a kernel at all):</p><p class="euler__paragraph"></p><p class="euler__paragraph"></p><p class="euler__paragraph"></p><p class="euler__paragraph">Notice that the first polygon has three consecutive collinear vertices.</p><p class="euler__paragraph"></p><p class="euler__paragraph">Let P(n) be the number of polar polygons such that the vertices (x, y) have integer coordinates whose absolute values are not greater than n.</p><p class="euler__paragraph"></p><p class="euler__paragraph">Note that polygons should be counted as different if they have different set of edges, even if they enclose the same area. For example, the polygon with vertices [(0,0),(0,3),(1,1),(3,0)] is distinct from the polygon with vertices [(0,0),(0,3),(1,1),(3,0),(1,0)].</p><p class="euler__paragraph"></p><p class="euler__paragraph">For example, P(1) = 131, P(2) = 1648531, P(3) = 1099461296175 and P(343) mod 1 000 000 007 = 937293740.</p><p class="euler__paragraph"></p><p class="euler__paragraph">Find P(713) mod 1 000 000 007.</p></div>

/// challengeSeed:
function euler465() {
  // Good luck!
  return true;
}

euler465();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert.strictEqual(euler465(), 585965659, 'message: <code>euler465()</code> should return 585965659.');
/// id: 5900f53d1000cf542c510050
