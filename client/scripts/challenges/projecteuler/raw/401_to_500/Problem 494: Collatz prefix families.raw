
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 494: Collatz prefix families
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">The Collatz sequence is defined as:</p><p class="euler__paragraph">$a_{i+1} = \left\{  \large{\frac {a_i} 2 \atop 3 a_i+1} {\text{if }a_i\text{ is even} \atop \text{if }a_i\text{ is odd}} \right.$.</p><p class="euler__paragraph"></p><p class="euler__paragraph"></p><p class="euler__paragraph">The Collatz conjecture states that starting from any positive integer, the sequence eventually reaches the cycle 1,4,2,1....</p><p class="euler__paragraph">We shall define the sequence prefix p(n) for the Collatz sequence starting with a1 = n as the sub-sequence of all numbers not a power of 2 (20=1 is considered a power of 2 for this problem). For example:p(13) = {13, 40, 20, 10, 5} p(8) = {}</p><p class="euler__paragraph">Any number invalidating the conjecture would have an infinite length sequence prefix.</p><p class="euler__paragraph"></p><p class="euler__paragraph"></p><p class="euler__paragraph">Let Sm be the set of all sequence prefixes of length m. Two sequences {a1, a2, ..., am} and {b1, b2, ..., bm} in Sm are said to belong to the same prefix family if ai < aj if and only if bi < bj for all 1 ≤ i,j ≤ m.</p><p class="euler__paragraph"></p><p class="euler__paragraph"></p><p class="euler__paragraph">For example, in S4, {6, 3, 10, 5} is in the same family as {454, 227, 682, 341}, but not {113, 340, 170, 85}.</p><p class="euler__paragraph">Let f(m) be the number of distinct prefix families in Sm.</p><p class="euler__paragraph">You are given f(5) = 5, f(10) = 55, f(20) = 6771.</p><p class="euler__paragraph"></p><p class="euler__paragraph"></p><p class="euler__paragraph">Find f(90).</p></div>

/// challengeSeed:
function euler494() {
  // Good luck!
  return true;
}

euler494();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert.strictEqual(euler494(), TODO: MISSING ANSWER, 'message: <code>euler494()</code> should return TODO: MISSING ANSWER.');
/// id: 5900f55a1000cf542c51006d
