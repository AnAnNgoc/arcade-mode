
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 506: Clock sequence
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">Consider the infinite repeating sequence of digits:</p><p class="euler__paragraph">1234321234321234321...</p><p class="euler__paragraph">Amazingly, you can break this sequence of digits into a sequence of integers such that the sum of the digits in the n'th value is n.</p><p class="euler__paragraph">The sequence goes as follows:</p><p class="euler__paragraph">1, 2, 3, 4, 32, 123, 43, 2123, 432, 1234, 32123, ...</p><p class="euler__paragraph">Let vn be the n'th value in this sequence. For example, v2 = 2, v5 = 32 and v11 = 32123.</p><p class="euler__paragraph">Let S(n) be v1 + v2 + ... + vn. For example, S(11) = 36120, and S(1000) mod 123454321 = 18232686.</p><p class="euler__paragraph">Find S(1014) mod 123454321.</p></div>

/// challengeSeed:
function euler506() {
  // Good luck!
  return true;
}

euler506();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert.strictEqual(euler506(), 18934502, 'message: <code>euler506()</code> should return 18934502.');
/// id: 5900f5671000cf542c510079
