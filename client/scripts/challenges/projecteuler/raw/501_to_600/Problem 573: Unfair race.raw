
/* eslint spaced-comment: 0 */
/* eslint no-redeclare: 0 */
/* eslint no-unused-vars: 0 */

const assert = require('chai').assert;

/// title: Problem 573: Unfair race
/// type: project-euler

/// categories:
/// math

/// difficulty: ?

/// benchmark:
//replaceWithActualFunctionHere;

/// description:
/// <div class="euler"><p class="euler__paragraph">$n$ runners in very different training states want to compete in a race. Each one of them is given a different starting number $k$ $(1\leq k \leq n)$ according to his (constant) individual racing speed being $v_k=\frac{k}{n}$.</p><p class="euler__paragraph">In order to give the slower runners a chance to win the race, $n$ different starting positions are chosen randomly (with uniform distribution) and independently from each other within the racing track of length $1$. After this, the starting position nearest to the goal is assigned to runner $1$, the next nearest starting position to runner $2$ and so on, until finally the starting position furthest away from the goal is assigned to runner $n$. The winner of the race is the runner who reaches the goal first.</p><p class="euler__paragraph"></p><p class="euler__paragraph">Interestingly, the expected running time for the winner is $\frac{1}{2}$, independently of the number of runners. Moreover, while it can be shown that all runners will have the same expected running time of $\frac{n}{n+1}$, the race is still unfair, since the winning chances may differ significantly for different starting numbers:</p><p class="euler__paragraph"></p><p class="euler__paragraph">Let $P_{n,k}$ be the probability for runner $k$ to win a race with $n$ runners and $E_n = \sum_{k=1}^n k P_{n,k}$ be the expected starting number of the winner in that race. It can be shown that, for example,</p><p class="euler__paragraph">$P_{3,1}=\frac{4}{9}$, $P_{3,2}=\frac{2}{9}$, $P_{3,3}=\frac{1}{3}$ and $E_3=\frac{17}{9}$ for a race with $3$ runners. </p><p class="euler__paragraph">You are given that $E_4=2.21875$, $E_5=2.5104$ and $E_{10}=3.66021568$.</p><p class="euler__paragraph"></p><p class="euler__paragraph">Find $E_{1000000}$ rounded to 4 digits after the decimal point.</p></div>

/// challengeSeed:
function euler573() {
  // Good luck!
  return true;
}

euler573();

/// solutions:

/// tail:
const replaceThis = 3;

/// tests:
assert.strictEqual(euler573(), TODO: MISSING ANSWER, 'message: <code>euler573()</code> should return TODO: MISSING ANSWER.');
/// id: 5900feff58d9425c70af4f8f
